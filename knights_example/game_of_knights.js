/* Generated by the Nim Compiler v1.0.0 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI169084 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI172265 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI172264 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172246 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI172245 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172244 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI169028 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI172208 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172172 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI167714 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI172307 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172326 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172390 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172058 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI172057 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3686 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3660 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170151 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3630 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3652 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3662 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3646 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI21156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3628 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3658 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI166025 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI166017 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI166020 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI166018 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI172112 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172113 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI172105 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172106 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172102 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
NTI172105.base = NTI104;
NTI172106.base = NTI172105;
NTI172112.base = NTI104;
NTI172113.base = NTI172112;
var NNI172102 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "board", len: 0, typ: NTI172106, name: "board", sons: null}, 
{kind: 1, offset: "player_pos", len: 0, typ: NTI172113, name: "player_pos", sons: null}]};
NTI172102.node = NNI172102;
var NNI166025 = {kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null};
NTI166025.node = NNI166025;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI166025.base = NTI3608;
NTI166017.base = NTI166025;
NTI166020.base = NTI166017;
var NNI166018 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "player_count", len: 0, typ: NTI104, name: "player_count", sons: null}, 
{kind: 1, offset: "players", len: 0, typ: NTI166020, name: "players", sons: null}, 
{kind: 1, offset: "current_player_number", len: 0, typ: NTI104, name: "current_player_number", sons: null}, 
{kind: 1, offset: "winner_player_number", len: 0, typ: NTI104, name: "winner_player_number", sons: null}]};
NTI166018.node = NNI166018;
NTI166018.base = NTI3608;
NTI172102.base = NTI166018;
var NNI3658 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3658.node = NNI3658;
var NNI3628 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3628.node = NNI3628;
NTI3708.base = NTI3626;
NTI3714.base = NTI3626;
var NNI3626 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3708, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI114, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3714, name: "up", sons: null}]};
NTI3626.node = NNI3626;
NTI3626.base = NTI3608;
NTI3628.base = NTI3626;
NTI3658.base = NTI3628;
var NNI21156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI21156.node = NNI21156;
var NNI3646 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3646.node = NNI3646;
var NNI3642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3642.node = NNI3642;
NTI3642.base = NTI3628;
NTI3646.base = NTI3642;
var NNI3662 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3662.node = NNI3662;
NTI3662.base = NTI3628;
var NNI3652 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3652.node = NNI3652;
var NNI3630 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3630.node = NNI3630;
NTI3630.base = NTI3626;
NTI3652.base = NTI3630;
var NNI170151 = {kind: 1, offset: "depth", len: 0, typ: NTI104, name: "depth", sons: null};
NTI170151.node = NNI170151;
NTI170151.base = NTI166025;
var NNI3660 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3660.node = NNI3660;
NTI3660.base = NTI3628;
var NNI3686 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3686.node = NNI3686;
NTI3686.base = NTI3628;
NTI172057.base = NTI172058;
NTI172390.base = NTI104;
NTI172326.base = NTI104;
NTI172307.base = NTI104;
var NNI3650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3650.node = NNI3650;
NTI3650.base = NTI3628;
NTI167714.base = NTI138;
NTI172172.base = NTI104;
NTI172208.base = NTI104;
NTI169028.base = NTI166017;
NTI172245.base = NTI172246;
NTI172244.base = NTI172245;
NTI172264.base = NTI172265;
NTI169084.base = NTI138;

function makeNimstrLit(c_23270) {
		  var ln = c_23270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_23270.charCodeAt(i);
  }
  return result;
  

	
}

function toJSStr(s_23304) {
										var Tmp5;
						var Tmp7;

	var result_23305 = null;

		var res_23363 = new_seq_23336((s_23304 != null ? s_23304.length : 0));
		var i_23365 = 0;
		var j_23367 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_23365 < (s_23304 != null ? s_23304.length : 0))) break L2;
					var c_23368 = s_23304[i_23365];
					if ((c_23368 < 128)) {
					res_23363[j_23367] = String.fromCharCode(c_23368);
					i_23365 += 1;
					}
					else {
						var helper_23391 = new_seq_23336(0);
						L3: do {
								L4: while (true) {
								if (!true) break L4;
									var code_23392 = c_23368.toString(16);
									if (((code_23392 != null ? code_23392.length : 0) == 1)) {
									if (helper_23391 != null) { helper_23391.push("%0"); } else { helper_23391 = ["%0"]; };
									}
									else {
									if (helper_23391 != null) { helper_23391.push("%"); } else { helper_23391 = ["%"]; };
									}
									
									if (helper_23391 != null) { helper_23391.push(code_23392); } else { helper_23391 = [code_23392]; };
									i_23365 += 1;
										if (((s_23304 != null ? s_23304.length : 0) <= i_23365)) Tmp5 = true; else {											Tmp5 = (s_23304[i_23365] < 128);										}									if (Tmp5) {
									break L3;
									}
									
									c_23368 = s_23304[i_23365];
								}
						} while(false);
++excHandler;
						Tmp7 = framePtr;
						try {
						res_23363[j_23367] = decodeURIComponent(helper_23391.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
						framePtr = Tmp7;
						res_23363[j_23367] = helper_23391.join("");
						lastJSError = prevJSError;
						} finally {
						framePtr = Tmp7;
						}
					}
					
					j_23367 += 1;
				}
		} while(false);
		if (res_23363 === null) res_23363 = [];
               if (res_23363.length < j_23367) { for (var i=res_23363.length;i<j_23367;++i) res_23363.push(null); }
               else { res_23363.length = j_23367; };
		result_23305 = res_23363.join("");

	return result_23305;

}

function cstrToNimstr(c_23287) {
		  var ln = c_23287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_23287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_23287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_24827, src_24828, ti_24829) {
	var result_25019 = null;

		switch (ti_24829.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_24801(ti_24829))) {
			result_25019 = src_24828;
			}
			else {
				result_25019 = [src_24828[0], src_24828[1]];
			}
			
			break;
		case 19:
			      if (dest_24827 === null || dest_24827 === undefined) {
        dest_24827 = {};
      }
      else {
        for (var key in dest_24827) { delete dest_24827[key]; }
      }
      for (var key in src_24828) { dest_24827[key] = src_24828[key]; }
      result_25019 = dest_24827;
    
			break;
		case 18:
		case 17:
			if (!((ti_24829.base == null))) {
			result_25019 = nimCopy(dest_24827, src_24828, ti_24829.base);
			}
			else {
			if ((ti_24829.kind == 17)) {
			result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {m_type: ti_24829} : dest_24827;
			}
			else {
				result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {} : dest_24827;
			}
			}
			nimCopyAux(result_25019, src_24828, ti_24829.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_24828 === null) {
        result_25019 = null;
      }
      else {
        if (dest_24827 === null || dest_24827 === undefined) {
          dest_24827 = new Array(src_24828.length);
        }
        else {
          dest_24827.length = src_24828.length;
        }
        result_25019 = dest_24827;
        for (var i = 0; i < src_24828.length; ++i) {
          result_25019[i] = nimCopy(result_25019[i], src_24828[i], ti_24829.base);
        }
      }
    
			break;
		case 28:
			      if (src_24828 !== null) {
        result_25019 = src_24828.slice(0);
      }
    
			break;
		default: 
			result_25019 = src_24828;
			break;
		}

	return result_25019;

}

function arrayConstr(len_25086, value_25087, typ_25088) {
		    var result = new Array(len_25086);
    for (var i = 0; i < len_25086; ++i) result[i] = nimCopy(null, value_25087, typ_25088);
    return result;
  

	
}

function raiseException(e_21618, ename_21619) {
		e_21618.name = ename_21619;
		if ((excHandler == 0)) {
		unhandledException(e_21618);
		}
		
		e_21618.trace = nimCopy(null, raw_write_stack_trace_21468(), NTI138);
		throw e_21618;

	
}

function chckIndx(i_25105, a_25106, b_25107) {
			var Tmp1;

	var result_25108 = 0;

	BeforeRet: do {
			if (!(a_25106 <= i_25105)) Tmp1 = false; else {				Tmp1 = (i_25105 <= b_25107);			}		if (Tmp1) {
		result_25108 = i_25105;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_25105, a_25106, b_25107);
		}
		
	} while (false);

	return result_25108;

}

function addInt(a_23803, b_23804) {
		    var result = a_23803 + b_23804;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function mnewString(len_23463) {
		    return new Array(len_23463);
  

	
}

function chckRange(i_25124, a_25125, b_25126) {
			var Tmp1;

	var result_25127 = 0;

	BeforeRet: do {
			if (!(a_25125 <= i_25124)) Tmp1 = false; else {				Tmp1 = (i_25124 <= b_25126);			}		if (Tmp1) {
		result_25127 = i_25124;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_25127;

}

function subInt(a_23821, b_23822) {
		    var result = a_23821 - b_23822;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr([97, 122]);

function eqStrings(a_23641, b_23642) {
		    if (a_23641 == b_23642) return true;
    if (a_23641 === null && b_23642.length == 0) return true;
    if (b_23642 === null && a_23641.length == 0) return true;
    if ((!a_23641) || (!b_23642)) return false;
    var alen = a_23641.length;
    if (alen != b_23642.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_23641[i] != b_23642[i]) return false;
    return true;
  

	
}

function mulInt(a_23839, b_23840) {
		    var result = a_23839 * b_23840;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet3 = setConstr([48, 57]);
var ConstSet4 = setConstr([48, 57]);

function addChar(x_25311, c_25312) {
		x_25311.push(c_25312);

	
}
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr(0, 125);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90]);

function nimMax(a_24221, b_24222) {
		var Tmp1;

	var result_24223 = 0;

	BeforeRet: do {
		if ((b_24222 <= a_24221)) {
		Tmp1 = a_24221;
		}
		else {
		Tmp1 = b_24222;
		}
		
		result_24223 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24223;

}

function nimMin(a_24203, b_24204) {
		var Tmp1;

	var result_24205 = 0;

	BeforeRet: do {
		if ((a_24203 <= b_24204)) {
		Tmp1 = a_24203;
		}
		else {
		Tmp1 = b_24204;
		}
		
		result_24205 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24205;

}
var ConstSet9 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);

function isObj(obj_25270, subclass_25271) {
	var result_25272 = false;

	BeforeRet: do {
		var x_25273 = obj_25270;
		if ((x_25273 == subclass_25271)) {
		result_25272 = true;
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!!((x_25273 == subclass_25271))) break L2;
					if ((x_25273 == null)) {
					result_25272 = false;
					break BeforeRet;
					}
					
					x_25273 = x_25273.base;
				}
		} while(false);
		result_25272 = true;
		break BeforeRet;
	} while (false);

	return result_25272;

}
						var directions_172090 = [[1, 2], [-1, 2], [1, -2], [-1, -2], [2, 1], [2, -1], [-2, 1], [-2, -1]];

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function nimCharToStr(x_21062) {
	var result_21063 = null;

		result_21063 = nimCopy(null, mnewString(1), NTI138);
		result_21063[0] = x_21062;

	return result_21063;

}
var ConstSet10 = setConstr(13, 10);
var nimvm_8110 = false;
var nim_program_result = 0;
var global_raise_hook_18618 = [null];
var local_raise_hook_18623 = [null];
var out_of_mem_hook_18626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_157237 = [0];
var instructions_174016 = [makeNimstrLit("Each player has one chess knight in the corners of a 5x5 chessboard. Just"), makeNimstrLit("like in regular chess, a Knight can jump in an \"L\" pattern. Each turn,"), makeNimstrLit("move your knight to any tile that hasn\'t been occupied by a knight before."), makeNimstrLit("The first player that cannot move loses."), makeNimstrLit(" "), makeNimstrLit("Please choose how many moves ahead your opponent can look (1 to 10):")];
var game_174024 = [{m_type: NTI172102, board: [new Int32Array(5), new Int32Array(5), new Int32Array(5), new Int32Array(5), new Int32Array(5)], player_pos: [new Int32Array(2), new Int32Array(2), new Int32Array(2)], player_count: 0, players: null, current_player_number: 0, winner_player_number: 0}];
var current_state_174025 = [0];

function new_seq_23336(len_23339) {
	var result_23341 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 996;
		result_23341 = new Array(len_23339); for (var i=0;i<len_23339;++i) {result_23341[i]=null;}	framePtr = F.prev;

	return result_23341;

}

function send_171045(msg_171047) {
	var F={procname:"webterminal.send",prev:framePtr,filename:"webterminal.nim",line:0};
	framePtr = F;
		F.line = 136;
		send(toJSStr(msg_171047));
	framePtr = F.prev;

	
}

function is_fat_pointer_24801(ti_24803) {
	var result_24804 = false;

	BeforeRet: do {
		result_24804 = !((ConstSet1[ti_24803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_24804;

}

function nimCopyAux(dest_24832, src_24833, n_24835) {
		switch (n_24835.kind) {
		case 0:
			break;
		case 1:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_24835.sons.length; i++) {
      nimCopyAux(dest_24832, src_24833, n_24835.sons[i]);
    }
    
			break;
		case 3:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
      for (var i = 0; i < n_24835.sons.length; ++i) {
        nimCopyAux(dest_24832, src_24833, n_24835.sons[i][1]);
      }
    
			break;
		}

	
}

function add_18638(x_18641, x_18641_Idx, y_18642) {
		      if (x_18641[x_18641_Idx] === null) { x_18641[x_18641_Idx] = []; }
      var off = x_18641[x_18641_Idx].length;
      x_18641[x_18641_Idx].length += y_18642.length;
      for (var i = 0; i < y_18642.length; ++i) {
        x_18641[x_18641_Idx][off+i] = y_18642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_21151(f_21153) {
					var Tmp3;

	var result_21154 = [null];

		var it_21162 = f_21153;
		var i_21164 = 0;
		var total_21166 = 0;
		var temp_frames_21173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI21156);
		L1: do {
				L2: while (true) {
					if (!!((it_21162 == null))) Tmp3 = false; else {						Tmp3 = (i_21164 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_21173[i_21164].Field0 = it_21162.procname;
					temp_frames_21173[i_21164].Field1 = it_21162.line;
					i_21164 += 1;
					total_21166 += 1;
					it_21162 = it_21162.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_21162 == null))) break L5;
					total_21166 += 1;
					it_21162 = it_21162.prev;
				}
		} while(false);
		result_21154[0] = nimCopy(null, [], NTI138);
		if (!((total_21166 == i_21164))) {
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit("(")); } else { result_21154[0] = makeNimstrLit("("); };
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(cstrToNimstr(((total_21166 - i_21164))+"")); } else { result_21154[0] = cstrToNimstr(((total_21166 - i_21164))+"").slice(); };
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_21154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_21421 = 0;
			var colontmp__174234 = 0;
			colontmp__174234 = (i_21164 - 1);
			var res_174239 = colontmp__174234;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_174239)) break L8;
						j_21421 = res_174239;
						add_18638(result_21154, 0, temp_frames_21173[j_21421].Field0);
						if ((0 < temp_frames_21173[j_21421].Field1)) {
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit(", line: ")); } else { result_21154[0] = makeNimstrLit(", line: "); };
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(cstrToNimstr((temp_frames_21173[j_21421].Field1)+"")); } else { result_21154[0] = cstrToNimstr((temp_frames_21173[j_21421].Field1)+"").slice(); };
						}
						
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit("\x0A")); } else { result_21154[0] = makeNimstrLit("\x0A"); };
						res_174239 -= 1;
					}
			} while(false);
		} while(false);

	return result_21154[0];

}

function raw_write_stack_trace_21468() {
	var result_21470 = null;

		if (!((framePtr == null))) {
		result_21470 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_21151(framePtr) || []), NTI138);
		}
		else {
			result_21470 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_21470;

}

function unhandledException(e_21529) {
		var buf_21530 = [[]];
		if (!(((e_21529.message != null ? e_21529.message.length : 0) == 0))) {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(e_21529.message); } else { buf_21530[0] = e_21529.message.slice(); };
		}
		else {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit(" [")); } else { buf_21530[0] = makeNimstrLit(" ["); };
		add_18638(buf_21530, 0, e_21529.name);
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_21530[0] = makeNimstrLit("]\x0A"); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(raw_write_stack_trace_21468()); } else { buf_21530[0] = raw_write_stack_trace_21468().slice(); };
		var cbuf_21601 = toJSStr(buf_21530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_21601);
  }
  else {
    throw cbuf_21601;
  }
  

	
}

function raiseIndexError(i_22655, a_22656, b_22657) {
		var Tmp1;

		var eHEX60gensym22802_23003 = null;
		eHEX60gensym22802_23003 = {m_type: NTI3658, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		if ((b_22657 < a_22656)) {
		Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
		}
		else {
		Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_22655)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_22656)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_22657)+"") || []);
		}
		
		eHEX60gensym22802_23003.message = nimCopy(null, Tmp1, NTI138);
		eHEX60gensym22802_23003.parent = null;
		raiseException(eHEX60gensym22802_23003, "IndexError");

	
}

function raiseOverflow() {
		var eHEX60gensym22058_22203 = null;
		eHEX60gensym22058_22203 = {m_type: NTI3646, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22058_22203.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		eHEX60gensym22058_22203.parent = null;
		raiseException(eHEX60gensym22058_22203, "OverflowError");

	
}

function on_load_174121() {
	var F={procname:"game_of_knights.on_load",prev:framePtr,filename:"game_of_knights.nim",line:0};
	framePtr = F;
		F.line = 59;
		current_state_174025[0] = 1;
		F.line = 60;
		send_171045(makeNimstrLit("Game of Knights"));
		F.line = 61;
		send_171045(makeNimstrLit(" "));
		L1: do {
			F.line = 62;
			var line_174183 = null;
			F.line = 17;
			var i_174219 = 0;
			if ((i_174219 <= 5)) {
			L2: do {
				F.line = 19;
					L3: while (true) {
					if (!true) break L3;
						F.line = 62;
						line_174183 = instructions_174016[chckIndx(i_174219, 0, instructions_174016.length+0-1)-0];
						F.line = 63;
						send_171045(line_174183);
						if ((5 <= i_174219)) {
						F.line = 21;
						break L2;
						}
						
						F.line = 22;
						i_174219 = addInt(i_174219, 1);
					}
			} while(false);
			}
			
		} while(false);
	framePtr = F.prev;

	
}
establish_terminal_on_start_function(on_load_174121);

function raiseRangeError() {
		var eHEX60gensym22457_22603 = null;
		eHEX60gensym22457_22603 = {m_type: NTI3662, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22457_22603.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		eHEX60gensym22457_22603.parent = null;
		raiseException(eHEX60gensym22457_22603, "RangeError");

	
}

function nsuToUpperAsciiChar(c_146463) {
	var result_146464 = 0;

	var F={procname:"strutils.toUpperAscii",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet2[c_146463] != undefined)) {
		F.line = 261;
		result_146464 = chckRange(subInt(c_146463, 32), 0, 255);
		}
		else {
			F.line = 263;
			result_146464 = c_146463;
		}
		
	framePtr = F.prev;

	return result_146464;

}

function nsuToUpperAsciiStr(s_146502) {
	var result_146503 = null;

	var F={procname:"strutils.toUpperAscii",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 227;
		result_146503 = nimCopy(null, mnewString(chckRange((s_146502 != null ? s_146502.length : 0), 0, 2147483647)), NTI138);
		L1: do {
			F.line = 228;
			var iHEX60gensym146504_146513 = 0;
			F.line = 2698;
			var colontmp__174310 = 0;
			F.line = 228;
			colontmp__174310 = subInt((s_146502 != null ? s_146502.length : 0), 1);
			F.line = 2709;
			var res_174311 = 0;
			L2: do {
				F.line = 2710;
					L3: while (true) {
					if (!(res_174311 <= colontmp__174310)) break L3;
						F.line = 277;
						iHEX60gensym146504_146513 = res_174311;
						F.line = 229;
						result_146503[chckIndx(iHEX60gensym146504_146513, 0, result_146503.length+0-1)-0] = nsuToUpperAsciiChar(s_146502[chckIndx(iHEX60gensym146504_146513, 0, s_146502.length+0-1)-0]);
						F.line = 2712;
						res_174311 = addInt(res_174311, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_146503;

}

function find_167609(a_167613, item_167614) {
	var result_167615 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 3156;
			var i_167621 = null;
			F.line = 3;
			var i_174318 = 0;
			L2: do {
				F.line = 4;
					L3: while (true) {
					if (!(i_174318 < (a_167613 != null ? a_167613.length : 0))) break L3;
						F.line = 3156;
						i_167621 = a_167613[chckIndx(i_174318, 0, a_167613.length+0-1)-0];
						if (eqStrings(i_167621, item_167614)) {
						F.line = 3157;
						break BeforeRet;
						}
						
						F.line = 3158;
						result_167615 = addInt(result_167615, 1);
						F.line = 6;
						i_174318 = addInt(i_174318, 1);
					}
			} while(false);
		} while(false);
		F.line = 3159;
		result_167615 = -1;
	} while (false);
	framePtr = F.prev;

	return result_167615;

}

function contains_167602(a_167606, item_167607) {
	var result_167608 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 3173;
		result_167608 = (0 <= find_167609(a_167606, item_167607));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_167608;

}

function handle_end_174085(game_174087) {
	var F={procname:"game_of_knights.handle_end",prev:framePtr,filename:"game_of_knights.nim",line:0};
	framePtr = F;
		F.line = 29;
		send_171045(makeNimstrLit(" "));
		F.line = 30;
		send_171045(makeNimstrLit("-----------------"));
		F.line = 31;
		send_171045(makeNimstrLit("GAME OVER"));
		F.line = 32;
		send_171045(status_166098(game_174087));
		F.line = 33;
		send_171045(makeNimstrLit(" "));
		if ((game_174087.winner_player_number == 1)) {
		F.line = 35;
		send_171045(makeNimstrLit("YOU WON! The AI is out of moves."));
		}
		else {
			F.line = 37;
		send_171045(makeNimstrLit("The AI won. You ran out of moves but the AI has a move remaining."));
		}
		
		F.line = 38;
		send_171045(makeNimstrLit("\x0ARefresh the browser page to play again."));
		F.line = 39;
		current_state_174025[0] = 4;
	framePtr = F.prev;

	
}

function nsuJoinSep(a_151664, sep_151665) {
	var result_151666 = null;

	var F={procname:"strutils.join",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		if ((0 < (a_151664 != null ? a_151664.length : 0))) {
		F.line = 1769;
		var l_151677 = mulInt((sep_151665 != null ? sep_151665.length : 0), subInt((a_151664 != null ? a_151664.length : 0), 1));
		L1: do {
			F.line = 1770;
			var i_151691 = 0;
			F.line = 2698;
			var colontmp__174321 = 0;
			F.line = 1770;
			colontmp__174321 = (a_151664 != null ? (a_151664.length-1) : -1);
			F.line = 2709;
			var res_174322 = 0;
			L2: do {
				F.line = 2710;
					L3: while (true) {
					if (!(res_174322 <= colontmp__174321)) break L3;
						F.line = 1770;
						i_151691 = res_174322;
						F.line = 1770;
						l_151677 = addInt(l_151677, (a_151664[chckIndx(i_151691, 0, a_151664.length+0-1)-0] != null ? a_151664[chckIndx(i_151691, 0, a_151664.length+0-1)-0].length : 0));
						F.line = 2712;
						res_174322 = addInt(res_174322, 1);
					}
			} while(false);
		} while(false);
		F.line = 1771;
		result_151666 = nimCopy(null, mnewString(0), NTI138);
		F.line = 1772;
		if (result_151666 != null) { result_151666 = (result_151666).concat(a_151664[chckIndx(0, 0, a_151664.length+0-1)-0]); } else { result_151666 = a_151664[chckIndx(0, 0, a_151664.length+0-1)-0].slice(); };
		L4: do {
			F.line = 1773;
			var i_151711 = 0;
			F.line = 2698;
			var colontmp__174328 = 0;
			F.line = 1773;
			colontmp__174328 = (a_151664 != null ? (a_151664.length-1) : -1);
			F.line = 2709;
			var res_174329 = 1;
			L5: do {
				F.line = 2710;
					L6: while (true) {
					if (!(res_174329 <= colontmp__174328)) break L6;
						F.line = 1773;
						i_151711 = res_174329;
						F.line = 1774;
						if (result_151666 != null) { result_151666 = (result_151666).concat(sep_151665); } else { result_151666 = sep_151665.slice(); };
						F.line = 1775;
						if (result_151666 != null) { result_151666 = (result_151666).concat(a_151664[chckIndx(i_151711, 0, a_151664.length+0-1)-0]); } else { result_151666 = a_151664[chckIndx(i_151711, 0, a_151664.length+0-1)-0].slice(); };
						F.line = 2712;
						res_174329 = addInt(res_174329, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 1777;
			result_151666 = nimCopy(null, [], NTI138);
		}
		
	framePtr = F.prev;

	return result_151666;

}

function show_turn_start_174101(game_174103) {
	var F={procname:"game_of_knights.show_turn_start",prev:framePtr,filename:"game_of_knights.nim",line:0};
	framePtr = F;
		F.line = 42;
		var moves_possible_174105 = [null];
		F.line = 43;
		set_possible_moves_166093(game_174103, moves_possible_174105, 0);
		F.line = 44;
		send_171045(makeNimstrLit(" "));
		F.line = 45;
		send_171045(makeNimstrLit("-----------------"));
		if ((game_174103.current_player_number == 1)) {
		F.line = 47;
		send_171045(makeNimstrLit("Your turn (White Knight)"));
		}
		else {
			F.line = 49;
		send_171045(makeNimstrLit("AI\'s turn (Black Knight)"));
		}
		
		F.line = 50;
		send_171045(status_166098(game_174103));
		if ((game_174103.current_player_number == 1)) {
		F.line = 52;
		var move_display_174107 = nsuJoinSep(moves_possible_174105[0], makeNimstrLit(", "));
		F.line = 53;
		send_171045((makeNimstrLit("Possible moves: ") || []).concat(move_display_174107 || []));
		F.line = 54;
		send_171045(makeNimstrLit("Send move:"));
		}
		else {
			F.line = 56;
		send_171045(makeNimstrLit("Thinking..."));
		}
		
	framePtr = F.prev;

	
}

function integer_out_of_range_error_43414() {
	var F={procname:"parseutils.integerOutOfRangeError",prev:framePtr,filename:"parseutils.nim",line:0};
	framePtr = F;
		F.line = 3463;
		var eHEX60gensym43418_43603 = null;
		F.line = 3466;
		eHEX60gensym43418_43603 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 401;
		eHEX60gensym43418_43603.message = nimCopy(null, makeNimstrLit("Parsed integer outside of valid range"), NTI138);
		F.line = 3459;
		eHEX60gensym43418_43603.parent = null;
		F.line = 401;
		raiseException(eHEX60gensym43418_43603, "ValueError");
	framePtr = F.prev;

	
}

function raw_parse_int_43801(s_43803, b_43805, b_43805_Idx, start_43806) {
			var Tmp1;
					var Tmp4;
			var Tmp7;

	var result_43808 = 0;

	var F={procname:"parseutils.rawParseInt",prev:framePtr,filename:"parseutils.nim",line:0};
	framePtr = F;
		F.line = 409;
		var sign_43810 = -1;
		F.line = 410;
		var i_43811 = start_43806;
		if ((i_43811 < (s_43803 != null ? s_43803.length : 0))) {
		if ((s_43803[chckIndx(i_43811, 0, s_43803.length+0-1)-0] == 43)) {
		F.line = 412;
		i_43811 += 1;
		}
		else {
		if ((s_43803[chckIndx(i_43811, 0, s_43803.length+0-1)-0] == 45)) {
		F.line = 414;
		i_43811 += 1;
		F.line = 415;
		sign_43810 = 1;
		}
		}
		}
		
			if (!(i_43811 < (s_43803 != null ? s_43803.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet3[s_43803[chckIndx(i_43811, 0, s_43803.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 417;
		b_43805[b_43805_Idx] = 0;
		L2: do {
			F.line = 418;
				L3: while (true) {
					if (!(i_43811 < (s_43803 != null ? s_43803.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet4[s_43803[chckIndx(i_43811, 0, s_43803.length+0-1)-0]] != undefined);					}				if (!Tmp4) break L3;
					F.line = 419;
					var c_43846 = (s_43803[chckIndx(i_43811, 0, s_43803.length+0-1)-0] - 48);
					if ((Math.trunc((-9223372036854775808 + c_43846) / 10) <= b_43805[b_43805_Idx])) {
					F.line = 421;
					b_43805[b_43805_Idx] = ((b_43805[b_43805_Idx] * 10) - c_43846);
					}
					else {
						F.line = 423;
					integer_out_of_range_error_43414();
					}
					
					F.line = 424;
					i_43811 += 1;
					L5: do {
						F.line = 425;
							L6: while (true) {
							if (!((i_43811 < (s_43803 != null ? s_43803.length : 0)) && (s_43803[chckIndx(i_43811, 0, s_43803.length+0-1)-0] == 95))) break L6;
								F.line = 425;
								i_43811 += 1;
							}
					} while(false);
				}
		} while(false);
			if (!(sign_43810 == -1)) Tmp7 = false; else {				Tmp7 = (b_43805[b_43805_Idx] == -9223372036854775808);			}		if (Tmp7) {
		F.line = 427;
		integer_out_of_range_error_43414();
		}
		else {
			F.line = 429;
			b_43805[b_43805_Idx] = (b_43805[b_43805_Idx] * sign_43810);
			F.line = 430;
			result_43808 = (i_43811 - start_43806);
		}
		
		}
		
	framePtr = F.prev;

	return result_43808;

}

function npuParseBiggestInt(s_44003, number_44005, number_44005_Idx, start_44006) {
	var result_44008 = 0;

	var F={procname:"parseutils.parseBiggestInt",prev:framePtr,filename:"parseutils.nim",line:0};
	framePtr = F;
		F.line = 444;
		var res_44009 = [0];
		F.line = 447;
		result_44008 = raw_parse_int_43801(s_44003, res_44009, 0, start_44006);
		if (!((result_44008 == 0))) {
		F.line = 449;
		number_44005[number_44005_Idx] = res_44009[0];
		}
		
	framePtr = F.prev;

	return result_44008;

}

function npuParseInt(s_44026, number_44028, number_44028_Idx, start_44029) {
			var Tmp1;

	var result_44031 = 0;

	var F={procname:"parseutils.parseInt",prev:framePtr,filename:"parseutils.nim",line:0};
	framePtr = F;
		F.line = 462;
		var res_44032 = [0];
		F.line = 463;
		result_44031 = npuParseBiggestInt(s_44026, res_44032, 0, start_44029);
			if ((res_44032[0] < -2147483648)) Tmp1 = true; else {				Tmp1 = (2147483647 < res_44032[0]);			}		if (Tmp1) {
		F.line = 466;
		integer_out_of_range_error_43414();
		}
		
		if (!((result_44031 == 0))) {
		F.line = 468;
		number_44028[number_44028_Idx] = chckRange(res_44032[0], -2147483648, 2147483647);
		}
		
	framePtr = F.prev;

	return result_44031;

}

function nsuParseInt(s_148442) {
			var Tmp1;

	var result_148443 = [0];

	var F={procname:"strutils.parseInt",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 1094;
		var l_148445 = npuParseInt(s_148442, result_148443, 0, 0);
			if (!((l_148445 == (s_148442 != null ? s_148442.length : 0)))) Tmp1 = true; else {				Tmp1 = (l_148445 == 0);			}		if (Tmp1) {
		F.line = 3463;
		var eHEX60gensym148448_148603 = null;
		F.line = 3466;
		eHEX60gensym148448_148603 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 1096;
		eHEX60gensym148448_148603.message = nimCopy(null, (makeNimstrLit("invalid integer: ") || []).concat(s_148442 || []), NTI138);
		F.line = 3459;
		eHEX60gensym148448_148603.parent = null;
		F.line = 1096;
		raiseException(eHEX60gensym148448_148603, "ValueError");
		}
		
	framePtr = F.prev;

	return result_148443[0];

}

function invalid_format_string_154939() {
	var F={procname:"strutils.invalidFormatString",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 3463;
		var eHEX60gensym154943_155003 = null;
		F.line = 3466;
		eHEX60gensym154943_155003 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 2623;
		eHEX60gensym154943_155003.message = nimCopy(null, makeNimstrLit("invalid format string"), NTI138);
		F.line = 3459;
		eHEX60gensym154943_155003.parent = null;
		F.line = 2623;
		raiseException(eHEX60gensym154943_155003, "ValueError");
	framePtr = F.prev;

	
}

function nsuToLowerAsciiChar(c_146380) {
	var result_146381 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet8[c_146380] != undefined)) {
		F.line = 222;
		result_146381 = chckRange(addInt(c_146380, 32), 0, 255);
		}
		else {
			F.line = 224;
			result_146381 = c_146380;
		}
		
	framePtr = F.prev;

	return result_146381;

}

function nsuCmpIgnoreStyle(a_146649, b_146650) {
					var Tmp7;
					var Tmp8;

	var result_146651 = 0;

	BeforeRet: do {
		var i_146653 = 0;
		var j_146655 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					L3: do {
							L4: while (true) {
							if (!((i_146653 < (a_146649 != null ? a_146649.length : 0)) && (a_146649[i_146653] == 95))) break L4;
								i_146653 += 1;
							}
					} while(false);
					L5: do {
							L6: while (true) {
							if (!((j_146655 < (b_146650 != null ? b_146650.length : 0)) && (b_146650[j_146655] == 95))) break L6;
								j_146655 += 1;
							}
					} while(false);
					if ((i_146653 < (a_146649 != null ? a_146649.length : 0))) {
					Tmp7 = nsuToLowerAsciiChar(a_146649[i_146653]);
					}
					else {
					Tmp7 = 0;
					}
					
					var aa_146668 = Tmp7;
					if ((j_146655 < (b_146650 != null ? b_146650.length : 0))) {
					Tmp8 = nsuToLowerAsciiChar(b_146650[j_146655]);
					}
					else {
					Tmp8 = 0;
					}
					
					var bb_146669 = Tmp8;
					result_146651 = (aa_146668 - bb_146669);
					if (!((result_146651 == 0))) {
					break BeforeRet;
					}
					
					if (((a_146649 != null ? a_146649.length : 0) <= i_146653)) {
					if (((b_146650 != null ? b_146650.length : 0) <= j_146655)) {
					result_146651 = 0;
					break BeforeRet;
					}
					
					result_146651 = -1;
					break BeforeRet;
					}
					else {
					if (((b_146650 != null ? b_146650.length : 0) <= j_146655)) {
					result_146651 = 1;
					break BeforeRet;
					}
					}
					i_146653 += 1;
					j_146655 += 1;
				}
		} while(false);
	} while (false);

	return result_146651;

}

function find_normalized_154906(x_154908, in_array_154910) {
	var result_154911 = 0;

	var F={procname:"strutils.findNormalized",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 2615;
		var i_154913 = 0;
		L1: do {
			F.line = 2616;
				L2: while (true) {
				if (!(i_154913 < (in_array_154910 != null ? (in_array_154910.length-1) : -1))) break L2;
					if ((nsuCmpIgnoreStyle(x_154908, in_array_154910[chckIndx(i_154913, 0, in_array_154910.length+0-1)-0]) == 0)) {
					F.line = 2617;
					result_154911 = i_154913;
					break BeforeRet;
					}
					
					F.line = 2618;
					i_154913 = addInt(i_154913, 2);
				}
		} while(false);
		F.line = 2620;
		result_154911 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_154911;

}

function substr_30222(s_30224, first_30225, last_30226) {
	var result_30227 = null;

	var F={procname:"system.substr",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 4495;
		var first_30228 = nimMax(first_30225, 0);
		F.line = 4496;
		var l_30230 = nimMax(addInt(subInt(nimMin(last_30226, (s_30224 != null ? (s_30224.length-1) : -1)), first_30228), 1), 0);
		F.line = 4497;
		result_30227 = nimCopy(null, mnewString(chckRange(l_30230, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 4498;
			var i_30239 = 0;
			F.line = 2698;
			var colontmp__174351 = 0;
			F.line = 4498;
			colontmp__174351 = subInt(l_30230, 1);
			F.line = 2709;
			var res_174352 = 0;
			L2: do {
				F.line = 2710;
					L3: while (true) {
					if (!(res_174352 <= colontmp__174351)) break L3;
						F.line = 4498;
						i_30239 = res_174352;
						F.line = 4499;
						result_30227[chckIndx(i_30239, 0, result_30227.length+0-1)-0] = s_30224[chckIndx(addInt(i_30239, first_30228), 0, s_30224.length+0-1)-0];
						F.line = 2712;
						res_174352 = addInt(res_174352, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_30227;

}

function nsuAddf(s_155026, s_155026_Idx, formatstr_155027, a_155029) {
									var Tmp5;
						var Tmp6;
							var Tmp7;
						var Tmp10;
							var Tmp11;
								var Tmp12;
									var Tmp15;
							var Tmp16;

	var F={procname:"strutils.addf",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 2629;
		var i_155033 = 0;
		F.line = 2630;
		var num_155035 = 0;
		L1: do {
			F.line = 2631;
				L2: while (true) {
				if (!(i_155033 < (formatstr_155027 != null ? formatstr_155027.length : 0))) break L2;
					if (((formatstr_155027[chckIndx(i_155033, 0, formatstr_155027.length+0-1)-0] == 36) && (addInt(i_155033, 1) < (formatstr_155027 != null ? formatstr_155027.length : 0)))) {
					F.line = 2633;
					switch (formatstr_155027[chckIndx(addInt(i_155033, 1), 0, formatstr_155027.length+0-1)-0]) {
					case 35:
						if (((a_155029 != null ? (a_155029.length-1) : -1) < num_155035)) {
						F.line = 2635;
						invalid_format_string_154939();
						}
						
						F.line = 2636;
						if (s_155026[s_155026_Idx] != null) { s_155026[s_155026_Idx] = (s_155026[s_155026_Idx]).concat(a_155029[chckIndx(num_155035, 0, a_155029.length+0-1)-0]); } else { s_155026[s_155026_Idx] = a_155029[chckIndx(num_155035, 0, a_155029.length+0-1)-0].slice(); };
						F.line = 2637;
						i_155033 = addInt(i_155033, 2);
						F.line = 2638;
						num_155035 = addInt(num_155035, 1);
						break;
					case 36:
						F.line = 2640;
						if (s_155026[s_155026_Idx] != null) { addChar(s_155026[s_155026_Idx], 36); } else { s_155026[s_155026_Idx] = [36]; };
						F.line = 2641;
						i_155033 = addInt(i_155033, 2);
						break;
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
					case 54:
					case 55:
					case 56:
					case 57:
					case 45:
						F.line = 2643;
						var j_155060 = 0;
						F.line = 2644;
						i_155033 = addInt(i_155033, 1);
						F.line = 2645;
						var negative_155067 = (formatstr_155027[chckIndx(i_155033, 0, formatstr_155027.length+0-1)-0] == 45);
						if (negative_155067) {
						F.line = 2646;
						i_155033 = addInt(i_155033, 1);
						}
						
						L3: do {
							F.line = 2647;
								L4: while (true) {
									if (!(i_155033 < (formatstr_155027 != null ? formatstr_155027.length : 0))) Tmp5 = false; else {										Tmp5 = (ConstSet5[formatstr_155027[chckIndx(i_155033, 0, formatstr_155027.length+0-1)-0]] != undefined);									}								if (!Tmp5) break L4;
									F.line = 2648;
									j_155060 = subInt(addInt(mulInt(j_155060, 10), formatstr_155027[chckIndx(i_155033, 0, formatstr_155027.length+0-1)-0]), 48);
									F.line = 2649;
									i_155033 = addInt(i_155033, 1);
								}
						} while(false);
						F.line = 2650;
						if (!(negative_155067)) {
						Tmp6 = subInt(j_155060, 1);
						}
						else {
						Tmp6 = subInt((a_155029 != null ? a_155029.length : 0), j_155060);
						}
						
						var idx_155098 = Tmp6;
							if ((idx_155098 < 0)) Tmp7 = true; else {								Tmp7 = ((a_155029 != null ? (a_155029.length-1) : -1) < idx_155098);							}						if (Tmp7) {
						F.line = 2651;
						invalid_format_string_154939();
						}
						
						F.line = 2652;
						if (s_155026[s_155026_Idx] != null) { s_155026[s_155026_Idx] = (s_155026[s_155026_Idx]).concat(a_155029[chckIndx(idx_155098, 0, a_155029.length+0-1)-0]); } else { s_155026[s_155026_Idx] = a_155029[chckIndx(idx_155098, 0, a_155029.length+0-1)-0].slice(); };
						break;
					case 123:
						F.line = 2654;
						var j_155104 = addInt(i_155033, 2);
						F.line = 2655;
						var k_155106 = 0;
						F.line = 2656;
						var negative_155107 = (formatstr_155027[chckIndx(j_155104, 0, formatstr_155027.length+0-1)-0] == 45);
						if (negative_155107) {
						F.line = 2657;
						j_155104 = addInt(j_155104, 1);
						}
						
						F.line = 2658;
						var is_number_155115 = 0;
						L8: do {
							F.line = 2659;
								L9: while (true) {
								if (!((j_155104 < (formatstr_155027 != null ? formatstr_155027.length : 0)) && !((ConstSet6[formatstr_155027[chckIndx(j_155104, 0, formatstr_155027.length+0-1)-0]] != undefined)))) break L9;
									if ((ConstSet7[formatstr_155027[chckIndx(j_155104, 0, formatstr_155027.length+0-1)-0]] != undefined)) {
									F.line = 2661;
									k_155106 = subInt(addInt(mulInt(k_155106, 10), formatstr_155027[chckIndx(j_155104, 0, formatstr_155027.length+0-1)-0]), 48);
									if ((is_number_155115 == 0)) {
									F.line = 2662;
									is_number_155115 = 1;
									}
									
									}
									else {
										F.line = 2664;
										is_number_155115 = -1;
									}
									
									F.line = 2665;
									j_155104 = addInt(j_155104, 1);
								}
						} while(false);
						if ((is_number_155115 == 1)) {
						F.line = 2667;
						if (!(negative_155107)) {
						Tmp10 = subInt(k_155106, 1);
						}
						else {
						Tmp10 = subInt((a_155029 != null ? a_155029.length : 0), k_155106);
						}
						
						var idx_155148 = Tmp10;
							if ((idx_155148 < 0)) Tmp11 = true; else {								Tmp11 = ((a_155029 != null ? (a_155029.length-1) : -1) < idx_155148);							}						if (Tmp11) {
						F.line = 2668;
						invalid_format_string_154939();
						}
						
						F.line = 2669;
						if (s_155026[s_155026_Idx] != null) { s_155026[s_155026_Idx] = (s_155026[s_155026_Idx]).concat(a_155029[chckIndx(idx_155148, 0, a_155029.length+0-1)-0]); } else { s_155026[s_155026_Idx] = a_155029[chckIndx(idx_155148, 0, a_155029.length+0-1)-0].slice(); };
						}
						else {
							F.line = 2671;
							var x_155154 = find_normalized_154906(substr_30222(formatstr_155027, addInt(i_155033, 2), subInt(j_155104, 1)), a_155029);
								if (!(0 <= x_155154)) Tmp12 = false; else {									Tmp12 = (x_155154 < (a_155029 != null ? (a_155029.length-1) : -1));								}							if (Tmp12) {
							F.line = 2672;
							if (s_155026[s_155026_Idx] != null) { s_155026[s_155026_Idx] = (s_155026[s_155026_Idx]).concat(a_155029[chckIndx(addInt(x_155154, 1), 0, a_155029.length+0-1)-0]); } else { s_155026[s_155026_Idx] = a_155029[chckIndx(addInt(x_155154, 1), 0, a_155029.length+0-1)-0].slice(); };
							}
							else {
								F.line = 2673;
							invalid_format_string_154939();
							}
							
						}
						
						F.line = 2674;
						i_155033 = addInt(j_155104, 1);
						break;
					case 97:
					case 98:
					case 99:
					case 100:
					case 101:
					case 102:
					case 103:
					case 104:
					case 105:
					case 106:
					case 107:
					case 108:
					case 109:
					case 110:
					case 111:
					case 112:
					case 113:
					case 114:
					case 115:
					case 116:
					case 117:
					case 118:
					case 119:
					case 120:
					case 121:
					case 122:
					case 65:
					case 66:
					case 67:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 73:
					case 74:
					case 75:
					case 76:
					case 77:
					case 78:
					case 79:
					case 80:
					case 81:
					case 82:
					case 83:
					case 84:
					case 85:
					case 86:
					case 87:
					case 88:
					case 89:
					case 90:
					case 128:
					case 129:
					case 130:
					case 131:
					case 132:
					case 133:
					case 134:
					case 135:
					case 136:
					case 137:
					case 138:
					case 139:
					case 140:
					case 141:
					case 142:
					case 143:
					case 144:
					case 145:
					case 146:
					case 147:
					case 148:
					case 149:
					case 150:
					case 151:
					case 152:
					case 153:
					case 154:
					case 155:
					case 156:
					case 157:
					case 158:
					case 159:
					case 160:
					case 161:
					case 162:
					case 163:
					case 164:
					case 165:
					case 166:
					case 167:
					case 168:
					case 169:
					case 170:
					case 171:
					case 172:
					case 173:
					case 174:
					case 175:
					case 176:
					case 177:
					case 178:
					case 179:
					case 180:
					case 181:
					case 182:
					case 183:
					case 184:
					case 185:
					case 186:
					case 187:
					case 188:
					case 189:
					case 190:
					case 191:
					case 192:
					case 193:
					case 194:
					case 195:
					case 196:
					case 197:
					case 198:
					case 199:
					case 200:
					case 201:
					case 202:
					case 203:
					case 204:
					case 205:
					case 206:
					case 207:
					case 208:
					case 209:
					case 210:
					case 211:
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 226:
					case 227:
					case 228:
					case 229:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
					case 236:
					case 237:
					case 238:
					case 239:
					case 240:
					case 241:
					case 242:
					case 243:
					case 244:
					case 245:
					case 246:
					case 247:
					case 248:
					case 249:
					case 250:
					case 251:
					case 252:
					case 253:
					case 254:
					case 255:
					case 95:
						F.line = 2676;
						var j_155161 = addInt(i_155033, 1);
						L13: do {
							F.line = 2677;
								L14: while (true) {
									if (!(j_155161 < (formatstr_155027 != null ? formatstr_155027.length : 0))) Tmp15 = false; else {										Tmp15 = (ConstSet9[formatstr_155027[chckIndx(j_155161, 0, formatstr_155027.length+0-1)-0]] != undefined);									}								if (!Tmp15) break L14;
									F.line = 2677;
									j_155161 = addInt(j_155161, 1);
								}
						} while(false);
						F.line = 2678;
						var x_155174 = find_normalized_154906(substr_30222(formatstr_155027, addInt(i_155033, 1), subInt(j_155161, 1)), a_155029);
							if (!(0 <= x_155174)) Tmp16 = false; else {								Tmp16 = (x_155174 < (a_155029 != null ? (a_155029.length-1) : -1));							}						if (Tmp16) {
						F.line = 2679;
						if (s_155026[s_155026_Idx] != null) { s_155026[s_155026_Idx] = (s_155026[s_155026_Idx]).concat(a_155029[chckIndx(addInt(x_155174, 1), 0, a_155029.length+0-1)-0]); } else { s_155026[s_155026_Idx] = a_155029[chckIndx(addInt(x_155174, 1), 0, a_155029.length+0-1)-0].slice(); };
						}
						else {
							F.line = 2680;
						invalid_format_string_154939();
						}
						
						F.line = 2681;
						i_155033 = j_155161;
						break;
					default: 
						F.line = 2683;
						invalid_format_string_154939();
						break;
					}
					}
					else {
						F.line = 2685;
						if (s_155026[s_155026_Idx] != null) { addChar(s_155026[s_155026_Idx], formatstr_155027[chckIndx(i_155033, 0, formatstr_155027.length+0-1)-0]); } else { s_155026[s_155026_Idx] = [formatstr_155027[chckIndx(i_155033, 0, formatstr_155027.length+0-1)-0]]; };
						F.line = 2686;
						i_155033 = addInt(i_155033, 1);
					}
					
				}
		} while(false);
	framePtr = F.prev;

	
}

function nsuFormatVarargs(formatstr_155254, a_155256) {
	var result_155257 = [null];

	var F={procname:"strutils.format",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 2751;
		result_155257[0] = nimCopy(null, mnewString(0), NTI138);
		F.line = 2752;
		nsuAddf(result_155257, 0, formatstr_155254, a_155256);
	framePtr = F.prev;

	return result_155257[0];

}

function on_input_174244(cmsg_174246) {
	var F={procname:"game_of_knights.on_input",prev:framePtr,filename:"game_of_knights.nim",line:0};
	framePtr = F;
		F.line = 68;
		var moves_possible_174248 = [null];
		F.line = 69;
		var move_174249 = null;
		F.line = 70;
		var msg_str_174250 = cstrToNimstr(cmsg_174246);
		F.line = 71;
		var msg_174251 = nsuToUpperAsciiStr(msg_str_174250);
		F.line = 72;
		switch (current_state_174025[0]) {
		case 2:
			F.line = 74;
			set_possible_moves_166093(game_174024[0], moves_possible_174248, 0);
			if (contains_167602(moves_possible_174248[0], msg_174251)) {
			F.line = 76;
			send_171045((makeNimstrLit(">>") || []).concat(make_move_168023(game_174024[0], msg_174251) || []));
			F.line = 77;
			determine_winner_168223(game_174024[0]);
			if (is_over_168043(game_174024[0])) {
			F.line = 79;
			handle_end_174085(game_174024[0]);
			F.line = 80;
			current_state_174025[0] = 4;
			}
			else {
				F.line = 82;
				current_state_174025[0] = 3;
				F.line = 83;
				game_174024[0].current_player_number = next_player_number_167902(game_174024[0]);
				F.line = 84;
				show_turn_start_174101(game_174024[0]);
				F.line = 85;
				move_174249 = nimCopy(null, get_move_167691(current_player_167855(game_174024[0]), game_174024[0]), NTI138);
				F.line = 86;
				send_171045((makeNimstrLit(">>") || []).concat(make_move_168023(game_174024[0], move_174249) || []));
				F.line = 87;
				determine_winner_168223(game_174024[0]);
				if (is_over_168043(game_174024[0])) {
				F.line = 89;
				handle_end_174085(game_174024[0]);
				F.line = 90;
				current_state_174025[0] = 4;
				}
				else {
					F.line = 92;
					game_174024[0].current_player_number = next_player_number_167902(game_174024[0]);
					F.line = 93;
					show_turn_start_174101(game_174024[0]);
					F.line = 94;
					current_state_174025[0] = 2;
				}
				
			}
			
			}
			else {
				F.line = 96;
			send_171045((makeNimstrLit("\"") || []).concat(msg_174251 || [],makeNimstrLit("\" is not a recognized move. Try again.") || []));
			}
			
			break;
		case 1:
			F.line = 98;
++excHandler;
			try {
			F.line = 99;
			var lvl_174260 = nsuParseInt(msg_174251);
			if ((lvl_174260 < 1)) {
			F.line = 101;
			send_171045(makeNimstrLit("Too low. Try again."));
			}
			else {
			if ((10 < lvl_174260)) {
			F.line = 103;
			send_171045(makeNimstrLit("Too high. Try again."));
			}
			else {
				F.line = 105;
				setup_169023(game_174024[0], [{name: makeNimstrLit("White Knight"), m_type: NTI166025}, {name: makeNimstrLit("Black Knight"), depth: lvl_174260, m_type: NTI170151}]);
				F.line = 109;
				show_turn_start_174101(game_174024[0]);
				F.line = 110;
				current_state_174025[0] = 2;
			}
			}
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
			framePtr = F;
			F.line = 112;
			send_171045(nsuFormatVarargs(makeNimstrLit("Don\'t recognize \"$1\" as a number."), [nimCopy(null, msg_174251, NTI138)]));
			lastJSError = prevJSError;
			} finally {
			framePtr = F;
			}
			break;
		default: 
			F.line = 114;
			current_state_174025[0] = 4;
			F.line = 115;
			send_171045(makeNimstrLit("Internal error, reached an impossible state."));
			break;
		}
	framePtr = F.prev;

	
}
establish_terminal_on_input_function(on_input_174244);

function set_possible_moves_166055(self_166057, moves_166084) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 3463;
		var eHEX60gensym167742_167803 = null;
		F.line = 3466;
		eHEX60gensym167742_167803 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 244;
		eHEX60gensym167742_167803.message = nimCopy(null, makeNimstrLit("set_possible_moves(OrderedTable) must be overridden"), NTI138);
		F.line = 3459;
		eHEX60gensym167742_167803.parent = null;
		F.line = 244;
		raiseException(eHEX60gensym167742_167803, "FieldError");
	framePtr = F.prev;

	
}

function set_possible_moves_166085(self_166057, moves_166084) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 176;
		set_possible_moves_166055(self_166057, moves_166084);
	framePtr = F.prev;

	
}

function sys_fatal_24241(message_24245) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_24403 = null;
		F.line = 37;
		e_24403 = {m_type: NTI3686, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_24403.message = nimCopy(null, message_24245, NTI138);
		F.line = 39;
		raiseException(e_24403, "NilAccessError");
	framePtr = F.prev;

	
}

function chckNilDisp(p_24239, p_24239_Idx) {
		if ((p_24239 == null && p_24239_Idx == 0)) {
		sys_fatal_24241(makeNimstrLit("cannot dispatch; dispatcher is nil"));
		}
		

	
}

function convert_coord_to_string_172143(dest_172148) {
	var result_172149 = null;

	var F={procname:"knights.convert_coord_to_string",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 60;
		result_172149 = nimCopy(null, [], NTI138);
		F.line = 61;
		if (result_172149 != null) { addChar(result_172149, makeNimstrLit("ABCDEFGHIJ")[chckIndx(dest_172148[chckIndx(0, 0, dest_172148.length+0-1)-0], 0, makeNimstrLit("ABCDEFGHIJ").length+0-1)-0]); } else { result_172149 = [makeNimstrLit("ABCDEFGHIJ")[chckIndx(dest_172148[chckIndx(0, 0, dest_172148.length+0-1)-0], 0, makeNimstrLit("ABCDEFGHIJ").length+0-1)-0]]; };
		F.line = 62;
		if (result_172149 != null) { result_172149 = (result_172149).concat(cstrToNimstr((dest_172148[chckIndx(1, 0, dest_172148.length+0-1)-0])+"")); } else { result_172149 = cstrToNimstr((dest_172148[chckIndx(1, 0, dest_172148.length+0-1)-0])+"").slice(); };
	framePtr = F.prev;

	return result_172149;

}

function sys_fatal_15062(message_15066) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_15203 = null;
		F.line = 37;
		e_15203 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_15203.message = nimCopy(null, message_15066, NTI138);
		F.line = 39;
		raiseException(e_15203, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_15058(msg_15060) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_15062(msg_15060);
	framePtr = F.prev;

	
}

function failed_assert_impl_15266(msg_15268) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_15058(msg_15268);
	framePtr = F.prev;

	
}

function set_possible_moves_172298(self_172300, moves_172303, moves_172303_Idx) {
	var F={procname:"knights.set_possible_moves",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 103;
		var valid_dest_172323 = [];
		F.line = 104;
		var dest_172327 = new Int32Array(2);
		F.line = 105;
		var cur_172328 = nimCopy(null, self_172300.player_pos[chckIndx(self_172300.current_player_number, 0, self_172300.player_pos.length+0-1)-0], NTI172112);
		L1: do {
			F.line = 106;
			var jump_172389 = new Int32Array(2);
			F.line = 17;
			var i_174377 = 0;
			if ((i_174377 <= 7)) {
			L2: do {
				F.line = 19;
					L3: while (true) {
					if (!true) break L3;
						F.line = 106;
						nimCopy(jump_172389, directions_172090[chckIndx(i_174377, 0, directions_172090.length+0-1)-0], NTI172057);
						F.line = 107;
						nimCopy(dest_172327, [addInt(cur_172328[chckIndx(0, 0, cur_172328.length+0-1)-0], jump_172389[chckIndx(0, 0, jump_172389.length+0-1)-0]), addInt(cur_172328[chckIndx(1, 0, cur_172328.length+0-1)-0], jump_172389[chckIndx(1, 0, jump_172389.length+0-1)-0])], NTI172390);
						if ((dest_172327[chckIndx(0, 0, dest_172327.length+0-1)-0] < 5)) {
						if ((dest_172327[chckIndx(1, 0, dest_172327.length+0-1)-0] < 5)) {
						if ((0 <= dest_172327[chckIndx(0, 0, dest_172327.length+0-1)-0])) {
						if ((0 <= dest_172327[chckIndx(1, 0, dest_172327.length+0-1)-0])) {
						if ((self_172300.board[chckIndx(dest_172327[chckIndx(0, 0, dest_172327.length+0-1)-0], 0, self_172300.board.length+0-1)-0][chckIndx(dest_172327[chckIndx(1, 0, dest_172327.length+0-1)-0], 0, self_172300.board[chckIndx(dest_172327[chckIndx(0, 0, dest_172327.length+0-1)-0], 0, self_172300.board.length+0-1)-0].length+0-1)-0] == 0)) {
						F.line = 113;
						var Tmp4 = nimCopy(null, dest_172327, NTI172326);
						if (valid_dest_172323 != null) { valid_dest_172323.push(Tmp4); } else { valid_dest_172323 = [Tmp4]; };
						}
						
						}
						
						}
						
						}
						
						}
						
						if ((7 <= i_174377)) {
						F.line = 21;
						break L2;
						}
						
						F.line = 22;
						i_174377 = addInt(i_174377, 1);
					}
			} while(false);
			}
			
		} while(false);
		L5: do {
			F.line = 114;
			var dest_172614 = new Int32Array(2);
			F.line = 184;
			var i_174381 = 0;
			F.line = 185;
			var l_174382 = (valid_dest_172323 != null ? valid_dest_172323.length : 0);
			L6: do {
				F.line = 186;
					L7: while (true) {
					if (!(i_174381 < l_174382)) break L7;
						F.line = 114;
						nimCopy(dest_172614, valid_dest_172323[chckIndx(i_174381, 0, valid_dest_172323.length+0-1)-0], NTI172307);
						F.line = 115;
						if (moves_172303[moves_172303_Idx] != null) { moves_172303[moves_172303_Idx].push(convert_coord_to_string_172143(dest_172614)); } else { moves_172303[moves_172303_Idx] = [convert_coord_to_string_172143(dest_172614)]; };
						F.line = 188;
						i_174381 = addInt(i_174381, 1);
						if (!(((valid_dest_172323 != null ? valid_dest_172323.length : 0) == l_174382))) {
						F.line = 189;
						failed_assert_impl_15266(makeNimstrLit("/home/johnd/.choosenim/toolchains/nim-1.0.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function set_possible_moves_166087(self_166089, moves_166092, moves_166092_Idx) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 238;
		moves_166092[moves_166092_Idx] = nimCopy(null, [], NTI167714);
	framePtr = F.prev;

	
}

function set_possible_moves_166093(self_166089, moves_166092, moves_166092_Idx) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 510;
		chckNilDisp(self_166089);
		if (isObj(self_166089.m_type, NTI172102)) {
		F.line = 177;
		set_possible_moves_172298(self_166089, moves_166092, moves_166092_Idx);
		}
		else {
		if (isObj(self_166089.m_type, NTI166018)) {
		F.line = 177;
		set_possible_moves_166087(self_166089, moves_166092, moves_166092_Idx);
		}
		else {
		if (isObj(self_166089.m_type, NTI166018)) {
		F.line = 177;
		set_possible_moves_166087(self_166089, moves_166092, moves_166092_Idx);
		}
		}}
	framePtr = F.prev;

	
}

function status_172747(self_172749) {
	var result_172750 = null;

	var F={procname:"knights.status",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 144;
		result_172750 = nimCopy(null, makeNimstrLit("    "), NTI138);
		L1: do {
			F.line = 145;
			var n_172758 = 0;
			F.line = 2688;
			var res_174391 = 0;
			L2: do {
				F.line = 2689;
					L3: while (true) {
					if (!(res_174391 <= 4)) break L3;
						F.line = 145;
						n_172758 = res_174391;
						F.line = 146;
						if (result_172750 != null) { result_172750 = (result_172750).concat((makeNimstrLit(" ") || []).concat(cstrToNimstr((n_172758)+"") || [])); } else { result_172750 = (makeNimstrLit(" ") || []).concat(cstrToNimstr((n_172758)+"") || []).slice(); };
						F.line = 2691;
						res_174391 = addInt(res_174391, 1);
					}
			} while(false);
		} while(false);
		F.line = 147;
		if (result_172750 != null) { result_172750 = (result_172750).concat(makeNimstrLit("\x0A")); } else { result_172750 = makeNimstrLit("\x0A"); };
		L4: do {
			F.line = 148;
			var x_172766 = 0;
			F.line = 2688;
			var res_174403 = 0;
			L5: do {
				F.line = 2689;
					L6: while (true) {
					if (!(res_174403 <= 4)) break L6;
						F.line = 148;
						x_172766 = res_174403;
						F.line = 149;
						if (result_172750 != null) { result_172750 = (result_172750).concat((makeNimstrLit("  ") || []).concat([makeNimstrLit("ABCDEFGHIJ")[chckIndx(x_172766, 0, makeNimstrLit("ABCDEFGHIJ").length+0-1)-0]],makeNimstrLit(" ") || [])); } else { result_172750 = (makeNimstrLit("  ") || []).concat([makeNimstrLit("ABCDEFGHIJ")[chckIndx(x_172766, 0, makeNimstrLit("ABCDEFGHIJ").length+0-1)-0]],makeNimstrLit(" ") || []).slice(); };
						L7: do {
							F.line = 150;
							var y_172774 = 0;
							F.line = 2688;
							var res_174398 = 0;
							L8: do {
								F.line = 2689;
									L9: while (true) {
									if (!(res_174398 <= 4)) break L9;
										F.line = 150;
										y_172774 = res_174398;
										F.line = 151;
										if (result_172750 != null) { result_172750 = (result_172750).concat((makeNimstrLit(" ") || []).concat([makeNimstrLit(".WBX")[chckIndx(self_172749.board[chckIndx(x_172766, 0, self_172749.board.length+0-1)-0][chckIndx(y_172774, 0, self_172749.board[chckIndx(x_172766, 0, self_172749.board.length+0-1)-0].length+0-1)-0], 0, makeNimstrLit(".WBX").length+0-1)-0]])); } else { result_172750 = (makeNimstrLit(" ") || []).concat([makeNimstrLit(".WBX")[chckIndx(self_172749.board[chckIndx(x_172766, 0, self_172749.board.length+0-1)-0][chckIndx(y_172774, 0, self_172749.board[chckIndx(x_172766, 0, self_172749.board.length+0-1)-0].length+0-1)-0], 0, makeNimstrLit(".WBX").length+0-1)-0]]).slice(); };
										F.line = 2691;
										res_174398 = addInt(res_174398, 1);
									}
							} while(false);
						} while(false);
						F.line = 152;
						if (result_172750 != null) { result_172750 = (result_172750).concat(makeNimstrLit("\x0A")); } else { result_172750 = makeNimstrLit("\x0A"); };
						F.line = 2691;
						res_174403 = addInt(res_174403, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_172750;

}

function is_over_168026(self_168028) {
	var result_168029 = false;

	var F={procname:"turn_based_game.is_over",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 289;
		result_168029 = !((self_168028.winner_player_number == 0));
	framePtr = F.prev;

	return result_168029;

}

function is_over_168043(self_168028) {
	var result_168045 = false;

	var F={procname:"turn_based_game.is_over",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 288;
		result_168045 = is_over_168026(self_168028);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_168045;

}

function status_166095(self_166097) {
	var result_168049 = null;

	var F={procname:"turn_based_game.status",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (is_over_168043(self_166097)) {
		F.line = 298;
		result_168049 = nimCopy(null, makeNimstrLit("game is over"), NTI138);
		break BeforeRet;
		}
		else {
			F.line = 300;
			result_168049 = nimCopy(null, makeNimstrLit("game is active"), NTI138);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_168049;

}

function status_166098(self_166097) {
	var result_168049 = null;

	var F={procname:"turn_based_game.status",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 510;
		chckNilDisp(self_166097);
		if (isObj(self_166097.m_type, NTI172102)) {
		F.line = 178;
		result_168049 = status_172747(self_166097);
		break BeforeRet;
		}
		else {
		if (isObj(self_166097.m_type, NTI166018)) {
		F.line = 178;
		result_168049 = status_166095(self_166097);
		break BeforeRet;
		}
		else {
		if (isObj(self_166097.m_type, NTI166018)) {
		F.line = 178;
		result_168049 = status_166095(self_166097);
		break BeforeRet;
		}
		}}
	} while (false);
	framePtr = F.prev;

	return result_168049;

}

function display_166100(self_166102, msg_166103) {
	var F={procname:"turn_based_game.display",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 188;
		rawEcho(msg_166103);
	framePtr = F.prev;

	
}

function display_166121(self_166102, msg_166103) {
	var F={procname:"turn_based_game.display",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 187;
		display_166100(self_166102, msg_166103);
	framePtr = F.prev;

	
}

function move_counter_172687(self_172689, player_number_172690) {
	var result_172691 = 0;

	var F={procname:"knights.move_counter",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 125;
		var save_player_172692 = self_172689.current_player_number;
		F.line = 126;
		var poss_moves_172709 = [[]];
		F.line = 127;
		self_172689.current_player_number = player_number_172690;
		F.line = 128;
		set_possible_moves_166093(self_172689, poss_moves_172709, 0);
		F.line = 129;
		result_172691 = (poss_moves_172709[0] != null ? poss_moves_172709[0].length : 0);
		F.line = 130;
		self_172689.current_player_number = save_player_172692;
	framePtr = F.prev;

	return result_172691;

}

function next_player_number_167880(self_167882) {
	var result_167883 = 0;

	var F={procname:"turn_based_game.next_player_number",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 265;
		result_167883 = addInt((self_167882.current_player_number % self_167882.player_count), 1);
	framePtr = F.prev;

	return result_167883;

}

function next_player_number_167902(self_167882) {
	var result_167904 = 0;

	var F={procname:"turn_based_game.next_player_number",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 264;
		result_167904 = next_player_number_167880(self_167882);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_167904;

}

function scoring_172801(self_172803) {
	var result_172804 = 0.0;

	var F={procname:"knights.scoring",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((move_counter_172687(self_172803, self_172803.current_player_number) == 0)) {
		F.line = 167;
		result_172804 = -1.0000000000000000e+03;
		break BeforeRet;
		}
		
		if ((move_counter_172687(self_172803, next_player_number_167902(self_172803)) == 0)) {
		F.line = 169;
		result_172804 = 1.0000000000000000e+03;
		break BeforeRet;
		}
		
		F.line = 171;
		var my_move_score_172805 = (move_counter_172687(self_172803, self_172803.current_player_number) * 1.0000000000000000e+02);
		F.line = 172;
		var opp_move_score_172806 = (move_counter_172687(self_172803, next_player_number_167902(self_172803)) * 1.0000000000000000e+02);
		F.line = 173;
		result_172804 = (my_move_score_172805 - opp_move_score_172806);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_172804;

}

function scoring_168225(self_168227) {
	var result_168228 = 0.0;

	var F={procname:"turn_based_game.scoring",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 3463;
		var eHEX60gensym168231_168403 = null;
		F.line = 3466;
		eHEX60gensym168231_168403 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 321;
		eHEX60gensym168231_168403.message = nimCopy(null, makeNimstrLit("scoring() must be overridden (if used)"), NTI138);
		F.line = 3459;
		eHEX60gensym168231_168403.parent = null;
		F.line = 321;
		raiseException(eHEX60gensym168231_168403, "FieldError");
	framePtr = F.prev;

	return result_168228;

}

function scoring_168423(self_168227) {
	var result_168425 = 0.0;

	var F={procname:"turn_based_game.scoring",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 510;
		chckNilDisp(self_168227);
		if (isObj(self_168227.m_type, NTI172102)) {
		F.line = 316;
		result_168425 = scoring_172801(self_168227);
		break BeforeRet;
		}
		else {
		if (isObj(self_168227.m_type, NTI166018)) {
		F.line = 316;
		result_168425 = scoring_168225(self_168227);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_168425;

}

function abs_12649(x_12651) {
		var Tmp1;

	var result_12652 = 0.0;

		if ((x_12651 < 0.0)) {
		Tmp1 = -(x_12651);
		}
		else {
		Tmp1 = x_12651;
		}
		
		result_12652 = Tmp1;

	return result_12652;

}

function get_state_172820(self_172822) {
	var result_172823 = null;

	var F={procname:"knights.get_state",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		if ((self_172822.current_player_number == 1)) {
		F.line = 178;
		result_172823 = nimCopy(null, makeNimstrLit("1"), NTI138);
		}
		else {
			F.line = 180;
			result_172823 = nimCopy(null, makeNimstrLit("2"), NTI138);
		}
		
		L1: do {
			F.line = 181;
			var row_172884 = new Int32Array(5);
			F.line = 15;
			var colontmp__174424 = [new Int32Array(5), new Int32Array(5), new Int32Array(5), new Int32Array(5), new Int32Array(5)];
			F.line = 181;
			nimCopy(colontmp__174424, self_172822.board, NTI172106);
			F.line = 17;
			var i_174429 = 0;
			if ((i_174429 <= 4)) {
			L2: do {
				F.line = 19;
					L3: while (true) {
					if (!true) break L3;
						F.line = 181;
						nimCopy(row_172884, colontmp__174424[chckIndx(i_174429, 0, colontmp__174424.length+0-1)-0], NTI172105);
						L4: do {
							F.line = 182;
							var column_172930 = 0;
							F.line = 17;
							var i_174422 = 0;
							if ((i_174422 <= 4)) {
							L5: do {
								F.line = 19;
									L6: while (true) {
									if (!true) break L6;
										F.line = 182;
										column_172930 = row_172884[chckIndx(i_174422, 0, row_172884.length+0-1)-0];
										F.line = 183;
										if (result_172823 != null) { addChar(result_172823, makeNimstrLit(".WBX")[chckIndx(column_172930, 0, makeNimstrLit(".WBX").length+0-1)-0]); } else { result_172823 = [makeNimstrLit(".WBX")[chckIndx(column_172930, 0, makeNimstrLit(".WBX").length+0-1)-0]]; };
										if ((4 <= i_174422)) {
										F.line = 21;
										break L5;
										}
										
										F.line = 22;
										i_174422 = addInt(i_174422, 1);
									}
							} while(false);
							}
							
						} while(false);
						if ((4 <= i_174429)) {
						F.line = 21;
						break L2;
						}
						
						F.line = 22;
						i_174429 = addInt(i_174429, 1);
					}
			} while(false);
			}
			
		} while(false);
	framePtr = F.prev;

	return result_172823;

}

function get_state_168426(self_168428) {
	var result_168429 = null;

	var F={procname:"turn_based_game.get_state",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 3463;
		var eHEX60gensym168432_168603 = null;
		F.line = 3466;
		eHEX60gensym168432_168603 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 330;
		eHEX60gensym168432_168603.message = nimCopy(null, makeNimstrLit("get_state() must be overridden (if used)"), NTI138);
		F.line = 3459;
		eHEX60gensym168432_168603.parent = null;
		F.line = 330;
		raiseException(eHEX60gensym168432_168603, "FieldError");
	framePtr = F.prev;

	return result_168429;

}

function get_state_168623(self_168428) {
	var result_168625 = null;

	var F={procname:"turn_based_game.get_state",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 510;
		chckNilDisp(self_168428);
		if (isObj(self_168428.m_type, NTI172102)) {
		F.line = 324;
		result_168625 = get_state_172820(self_168428);
		break BeforeRet;
		}
		else {
		if (isObj(self_168428.m_type, NTI166018)) {
		F.line = 324;
		result_168625 = get_state_168426(self_168428);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_168625;

}

function convert_string_to_coord_172163(dest_172165) {
	var result_172169 = new Int32Array(2);

	var F={procname:"knights.convert_string_to_coord",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 68;
		var x_172170 = subInt(((dest_172165[chckIndx(0, 0, dest_172165.length+0-1)-0])|0), 65);
		F.line = 69;
		var y_172171 = nsuParseInt(nimCharToStr(dest_172165[chckIndx(1, 0, dest_172165.length+0-1)-0]));
		F.line = 70;
		nimCopy(result_172169, [x_172170, y_172171], NTI172172);
	framePtr = F.prev;

	return result_172169;

}

function place_player_172202(self_172204, knight_172205, coord_172209) {
	var F={procname:"knights.place_player",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 75;
		var src_172210 = nimCopy(null, self_172204.player_pos[chckIndx(knight_172205, 0, self_172204.player_pos.length+0-1)-0], NTI172112);
		F.line = 76;
		self_172204.board[chckIndx(src_172210[chckIndx(0, 0, src_172210.length+0-1)-0], 0, self_172204.board.length+0-1)-0][chckIndx(src_172210[chckIndx(1, 0, src_172210.length+0-1)-0], 0, self_172204.board[chckIndx(src_172210[chckIndx(0, 0, src_172210.length+0-1)-0], 0, self_172204.board.length+0-1)-0].length+0-1)-0] = 3;
		F.line = 77;
		self_172204.board[chckIndx(coord_172209[chckIndx(0, 0, coord_172209.length+0-1)-0], 0, self_172204.board.length+0-1)-0][chckIndx(coord_172209[chckIndx(1, 0, coord_172209.length+0-1)-0], 0, self_172204.board[chckIndx(coord_172209[chckIndx(0, 0, coord_172209.length+0-1)-0], 0, self_172204.board.length+0-1)-0].length+0-1)-0] = knight_172205;
		F.line = 78;
		nimCopy(self_172204.player_pos[chckIndx(knight_172205, 0, self_172204.player_pos.length+0-1)-0], coord_172209, NTI172208);
	framePtr = F.prev;

	
}

function place_player_172224(self_172204, knight_172205, coord_172209) {
	var F={procname:"knights.place_player",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 74;
		place_player_172202(self_172204, knight_172205, coord_172209);
	framePtr = F.prev;

	
}

function make_move_172665(self_172667, move_172668) {
	var result_172669 = null;

	var F={procname:"knights.make_move",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 119;
		var dest_172670 = convert_string_to_coord_172163(move_172668);
		F.line = 120;
		place_player_172224(self_172667, self_172667.current_player_number, dest_172670);
		F.line = 121;
		result_172669 = nimCopy(null, nsuFormatVarargs(makeNimstrLit("Jumped to $#."), [nimCopy(null, move_172668, NTI138)]), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_172669;

}

function make_move_167923(self_167925, move_167926) {
	var result_167927 = null;

	var F={procname:"turn_based_game.make_move",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 3463;
		var eHEX60gensym167930_168003 = null;
		F.line = 3466;
		eHEX60gensym167930_168003 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 285;
		eHEX60gensym167930_168003.message = nimCopy(null, makeNimstrLit("make_move() must be overridden"), NTI138);
		F.line = 3459;
		eHEX60gensym167930_168003.parent = null;
		F.line = 285;
		raiseException(eHEX60gensym167930_168003, "FieldError");
	framePtr = F.prev;

	return result_167927;

}

function make_move_168023(self_167925, move_167926) {
	var result_168025 = null;

	var F={procname:"turn_based_game.make_move",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 510;
		chckNilDisp(self_167925);
		if (isObj(self_167925.m_type, NTI172102)) {
		F.line = 277;
		result_168025 = make_move_172665(self_167925, move_167926);
		break BeforeRet;
		}
		else {
		if (isObj(self_167925.m_type, NTI166018)) {
		F.line = 277;
		result_168025 = make_move_167923(self_167925, move_167926);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_168025;

}

function finish_turn_167905(self_167907) {
	var F={procname:"turn_based_game.finish_turn",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 274;
		self_167907.current_player_number = next_player_number_167902(self_167907);
	framePtr = F.prev;

	
}

function finish_turn_167921(self_167907) {
	var F={procname:"turn_based_game.finish_turn",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 269;
		finish_turn_167905(self_167907);
	framePtr = F.prev;

	
}

function nsuStartsWith(s_151326, prefix_151327) {
						var Tmp3;

	var result_151328 = false;

	var F={procname:"strutils.startsWith",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1537;
		var i_151330 = 0;
		L1: do {
			F.line = 1538;
				L2: while (true) {
				if (!true) break L2;
					if (((prefix_151327 != null ? prefix_151327.length : 0) <= i_151330)) {
					F.line = 1539;
					result_151328 = true;
					break BeforeRet;
					}
					
						if (((s_151326 != null ? s_151326.length : 0) <= i_151330)) Tmp3 = true; else {							Tmp3 = !((s_151326[chckIndx(i_151330, 0, s_151326.length+0-1)-0] == prefix_151327[chckIndx(i_151330, 0, prefix_151327.length+0-1)-0]));						}					if (Tmp3) {
					F.line = 1540;
					result_151328 = false;
					break BeforeRet;
					}
					
					F.line = 1541;
					i_151330 = addInt(i_151330, 1);
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_151328;

}

function nsuFindChar(s_152016, sub_152017, start_152018, last_152019) {
		var Tmp1;

	var result_152021 = 0;

	var F={procname:"strutils.find",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1862;
		if ((last_152019 == 0)) {
		Tmp1 = (s_152016 != null ? (s_152016.length-1) : -1);
		}
		else {
		Tmp1 = last_152019;
		}
		
		var last_152023 = Tmp1;
		L2: do {
			F.line = 1874;
			var i_152406 = 0;
			F.line = 2698;
			var colontmp__174456 = 0;
			F.line = 1874;
			colontmp__174456 = start_152018;
			F.line = 2709;
			var res_174457 = colontmp__174456;
			L3: do {
				F.line = 2710;
					L4: while (true) {
					if (!(res_174457 <= last_152023)) break L4;
						F.line = 1874;
						i_152406 = res_174457;
						if ((sub_152017 == s_152016[chckIndx(i_152406, 0, s_152016.length+0-1)-0])) {
						F.line = 1875;
						result_152021 = i_152406;
						break BeforeRet;
						}
						
						F.line = 2712;
						res_174457 = addInt(res_174457, 1);
					}
			} while(false);
		} while(false);
		F.line = 1876;
		result_152021 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_152021;

}

function find_172998(a_173002, item_173003) {
	var result_173004 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 3156;
			var i_173035 = 0;
			F.line = 3;
			var i_174464 = 0;
			L2: do {
				F.line = 4;
					L3: while (true) {
					if (!(i_174464 < (a_173002 != null ? a_173002.length : 0))) break L3;
						F.line = 3156;
						i_173035 = a_173002[chckIndx(i_174464, 0, a_173002.length+0-1)-0];
						if ((i_173035 == item_173003)) {
						F.line = 3157;
						break BeforeRet;
						}
						
						F.line = 3158;
						result_173004 = addInt(result_173004, 1);
						F.line = 6;
						i_174464 = addInt(i_174464, 1);
					}
			} while(false);
		} while(false);
		F.line = 3159;
		result_173004 = -1;
	} while (false);
	framePtr = F.prev;

	return result_173004;

}

function contains_172991(a_172995, item_172996) {
	var result_172997 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 3173;
		result_172997 = (0 <= find_172998(a_172995, item_172996));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_172997;

}

function restore_state_172959(self_172961, state_172962) {
	var F={procname:"knights.restore_state",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 187;
		var i_172963 = 0;
		F.line = 188;
		var e_172964 = 0;
		if (nsuStartsWith(state_172962, makeNimstrLit("1"))) {
		F.line = 190;
		self_172961.current_player_number = 1;
		}
		else {
			F.line = 192;
			self_172961.current_player_number = 2;
		}
		
		L1: do {
			F.line = 193;
			var x_172972 = 0;
			F.line = 2688;
			var res_174440 = 0;
			L2: do {
				F.line = 2689;
					L3: while (true) {
					if (!(res_174440 <= 4)) break L3;
						F.line = 193;
						x_172972 = res_174440;
						L4: do {
							F.line = 194;
							var y_172980 = 0;
							F.line = 2688;
							var res_174435 = 0;
							L5: do {
								F.line = 2689;
									L6: while (true) {
									if (!(res_174435 <= 4)) break L6;
										F.line = 194;
										y_172980 = res_174435;
										F.line = 195;
										i_172963 = addInt(addInt(mulInt(x_172972, 5), y_172980), 1);
										F.line = 196;
										e_172964 = nsuFindChar(makeNimstrLit(".WBX"), state_172962[chckIndx(i_172963, 0, state_172962.length+0-1)-0], 0, 0);
										F.line = 197;
										self_172961.board[chckIndx(x_172972, 0, self_172961.board.length+0-1)-0][chckIndx(y_172980, 0, self_172961.board[chckIndx(x_172972, 0, self_172961.board.length+0-1)-0].length+0-1)-0] = e_172964;
										if (contains_172991([1, 2], e_172964)) {
										F.line = 199;
										self_172961.player_pos[chckIndx(e_172964, 0, self_172961.player_pos.length+0-1)-0][chckIndx(0, 0, self_172961.player_pos[chckIndx(e_172964, 0, self_172961.player_pos.length+0-1)-0].length+0-1)-0] = x_172972;
										F.line = 200;
										self_172961.player_pos[chckIndx(e_172964, 0, self_172961.player_pos.length+0-1)-0][chckIndx(1, 0, self_172961.player_pos[chckIndx(e_172964, 0, self_172961.player_pos.length+0-1)-0].length+0-1)-0] = y_172980;
										}
										
										F.line = 2691;
										res_174435 = addInt(res_174435, 1);
									}
							} while(false);
						} while(false);
						F.line = 2691;
						res_174440 = addInt(res_174440, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function restore_state_168626(self_168628, state_168629) {
	var F={procname:"turn_based_game.restore_state",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 3463;
		var eHEX60gensym168632_168803 = null;
		F.line = 3466;
		eHEX60gensym168632_168803 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 338;
		eHEX60gensym168632_168803.message = nimCopy(null, makeNimstrLit("restore_state() must be overridden (if used)"), NTI138);
		F.line = 3459;
		eHEX60gensym168632_168803.parent = null;
		F.line = 338;
		raiseException(eHEX60gensym168632_168803, "FieldError");
	framePtr = F.prev;

	
}

function restore_state_168823(self_168628, state_168629) {
	var F={procname:"turn_based_game.restore_state",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 510;
		chckNilDisp(self_168628);
		if (isObj(self_168628.m_type, NTI172102)) {
		F.line = 333;
		restore_state_172959(self_168628, state_168629);
		}
		else {
		if (isObj(self_168628.m_type, NTI166018)) {
		F.line = 333;
		restore_state_168626(self_168628, state_168629);
		}
		}
	framePtr = F.prev;

	
}

function negamax_core_170042(game_170045, game_170045_Idx, ai_choice_170047, ai_choice_170047_Idx, depth_170048, orig_depth_170049, alpha_in_170050, beta_in_170051) {
			var Tmp1;
			var Tmp2;

	var result_170052 = 0.0;

	var F={procname:"negamax.negamax_core",prev:framePtr,filename:"negamax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 112;
		var possible_moves_170069 = [[]];
		F.line = 113;
		var starting_state_170070 = null;
		F.line = 114;
		var move_alpha_170071 = 0.0;
		F.line = 115;
		var alpha_170072 = alpha_in_170050;
		F.line = 116;
		var beta_170073 = beta_in_170051;
		F.line = 119;
		set_possible_moves_166093(game_170045[game_170045_Idx], possible_moves_170069, 0);
			if ((depth_170048 == 0)) Tmp2 = true; else {				Tmp2 = is_over_168043(game_170045[game_170045_Idx]);			}			if (Tmp2) Tmp1 = true; else {				Tmp1 = ((possible_moves_170069[0] != null ? possible_moves_170069[0].length : 0) == 0);			}		if (Tmp1) {
		F.line = 124;
		var score_170080 = scoring_168423(game_170045[game_170045_Idx]);
		if ((score_170080 == 0.0)) {
		F.line = 127;
		result_170052 = score_170080;
		break BeforeRet;
		}
		else {
			F.line = 129;
			result_170052 = (score_170080 - (((1.0000000000000000e-02 * depth_170048) * abs_12649(score_170080)) / score_170080));
			break BeforeRet;
		}
		
		}
		
		F.line = 133;
		starting_state_170070 = nimCopy(null, get_state_168623(game_170045[game_170045_Idx]), NTI138);
		F.line = 138;
		var best_move_170081 = nimCopy(null, possible_moves_170069[0][chckIndx(0, 0, possible_moves_170069[0].length+0-1)-0], NTI138);
		F.line = 139;
		var best_value_170082 = -Infinity;
		L3: do {
			F.line = 141;
			var move_170089 = null;
			F.line = 184;
			var i_174411 = 0;
			F.line = 185;
			var l_174412 = (possible_moves_170069[0] != null ? possible_moves_170069[0].length : 0);
			L4: do {
				F.line = 186;
					L5: while (true) {
					if (!(i_174411 < l_174412)) break L5;
						F.line = 141;
						move_170089 = possible_moves_170069[0][chckIndx(i_174411, 0, possible_moves_170069[0].length+0-1)-0];
						F.line = 145;
						make_move_168023(game_170045[game_170045_Idx], move_170089);
						F.line = 146;
						finish_turn_167921(game_170045[game_170045_Idx]);
						F.line = 150;
						move_alpha_170071 = -(negamax_core_170042(game_170045, game_170045_Idx, ai_choice_170047, ai_choice_170047_Idx, subInt(depth_170048, 1), orig_depth_170049, -(beta_170073), -(alpha_170072)));
						F.line = 159;
						restore_state_168823(game_170045[game_170045_Idx], starting_state_170070);
						if ((best_value_170082 < move_alpha_170071)) {
						F.line = 164;
						best_value_170082 = move_alpha_170071;
						F.line = 165;
						best_move_170081 = nimCopy(null, move_170089, NTI138);
						}
						
						if ((alpha_170072 < move_alpha_170071)) {
						F.line = 167;
						alpha_170072 = move_alpha_170071;
						if ((depth_170048 == orig_depth_170049)) {
						F.line = 169;
						ai_choice_170047[ai_choice_170047_Idx] = nimCopy(null, best_move_170081, NTI138);
						}
						
						if ((beta_170073 <= alpha_170072)) {
						F.line = 171;
						break L3;
						}
						
						}
						
						F.line = 188;
						i_174411 = addInt(i_174411, 1);
						if (!(((possible_moves_170069[0] != null ? possible_moves_170069[0].length : 0) == l_174412))) {
						F.line = 189;
						failed_assert_impl_15266(makeNimstrLit("/home/johnd/.choosenim/toolchains/nim-1.0.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 173;
		result_170052 = best_value_170082;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_170052;

}

function negamax_170103(game_170106, game_170106_Idx, depth_170107) {
	var result_170108 = null;

	var F={procname:"negamax.negamax",prev:framePtr,filename:"negamax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 188;
		var alpha_170109 = 0.0;
		F.line = 189;
		var beta_170110 = 0.0;
		F.line = 190;
		var ai_choice_170111 = [null];
		F.line = 191;
		var possible_moves_170128 = [[]];
		F.line = 193;
		alpha_170109 = -Infinity;
		F.line = 194;
		beta_170110 = Infinity;
		F.line = 198;
		set_possible_moves_166093(game_170106[game_170106_Idx], possible_moves_170128, 0);
		if (((possible_moves_170128[0] != null ? possible_moves_170128[0].length : 0) == 0)) {
		F.line = 200;
		result_170108 = nimCopy(null, [], NTI138);
		break BeforeRet;
		}
		
		F.line = 201;
		ai_choice_170111[0] = nimCopy(null, possible_moves_170128[0][chckIndx(0, 0, possible_moves_170128[0].length+0-1)-0], NTI138);
		F.line = 203;
		alpha_170109 = negamax_core_170042(game_170106, game_170106_Idx, ai_choice_170111, 0, depth_170107, depth_170107, alpha_170109, beta_170110);
		F.line = 211;
		result_170108 = nimCopy(null, ai_choice_170111[0], NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_170108;

}

function get_move_170157(self_170159, game_170160) {
	var result_170161 = null;

	var F={procname:"negamax.get_move",prev:framePtr,filename:"negamax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 224;
		var new_game_170162 = [null];
		F.line = 226;
		new_game_170162[0] = game_170160;
		F.line = 229;
		var choice_170202 = negamax_170103(new_game_170162, 0, self_170159.depth);
		F.line = 230;
		result_170161 = nimCopy(null, choice_170202, NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_170161;

}

function nsuIndent(s_151107, count_151108, padding_151109) {
						var Tmp6;

	var result_151110 = null;

	var F={procname:"strutils.indent",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 1425;
		result_151110 = nimCopy(null, [], NTI138);
		F.line = 1426;
		var i_151112 = 0;
		L1: do {
			F.line = 1427;
			var line_151113 = null;
			F.line = 659;
			var first_174492 = 0;
			F.line = 660;
			var last_174493 = 0;
			F.line = 661;
			var eolpos_174494 = 0;
			L2: do {
				F.line = 662;
					L3: while (true) {
					if (!true) break L3;
						L4: do {
							F.line = 663;
								L5: while (true) {
								if (!((last_174493 < (s_151107 != null ? s_151107.length : 0)) && !((ConstSet10[s_151107[chckIndx(last_174493, 0, s_151107.length+0-1)-0]] != undefined)))) break L5;
									F.line = 663;
									last_174493 = addInt(last_174493, 1);
								}
						} while(false);
						F.line = 665;
						eolpos_174494 = last_174493;
						if ((last_174493 < (s_151107 != null ? s_151107.length : 0))) {
						if ((s_151107[chckIndx(last_174493, 0, s_151107.length+0-1)-0] == 10)) {
						F.line = 667;
						last_174493 = addInt(last_174493, 1);
						}
						else {
						if ((s_151107[chckIndx(last_174493, 0, s_151107.length+0-1)-0] == 13)) {
						F.line = 669;
						last_174493 = addInt(last_174493, 1);
						if (((last_174493 < (s_151107 != null ? s_151107.length : 0)) && (s_151107[chckIndx(last_174493, 0, s_151107.length+0-1)-0] == 10))) {
						F.line = 670;
						last_174493 = addInt(last_174493, 1);
						}
						
						}
						}
						}
						
						F.line = 1427;
						if (false) {
						Tmp6 = subInt(last_174493, 1);
						}
						else {
						Tmp6 = subInt(eolpos_174494, 1);
						}
						
						line_151113 = substr_30222(s_151107, first_174492, Tmp6);
						if (!((i_151112 == 0))) {
						F.line = 1429;
						if (result_151110 != null) { result_151110 = (result_151110).concat(makeNimstrLit("\x0A")); } else { result_151110 = makeNimstrLit("\x0A"); };
						}
						
						L7: do {
							F.line = 1430;
							var j_151122 = 0;
							F.line = 2698;
							var colontmp__174484 = 0;
							F.line = 1430;
							colontmp__174484 = count_151108;
							F.line = 2709;
							var res_174485 = 1;
							L8: do {
								F.line = 2710;
									L9: while (true) {
									if (!(res_174485 <= colontmp__174484)) break L9;
										F.line = 1430;
										j_151122 = res_174485;
										F.line = 1431;
										if (result_151110 != null) { result_151110 = (result_151110).concat(padding_151109); } else { result_151110 = padding_151109.slice(); };
										F.line = 2712;
										res_174485 = addInt(res_174485, 1);
									}
							} while(false);
						} while(false);
						F.line = 1432;
						if (result_151110 != null) { result_151110 = (result_151110).concat(line_151113); } else { result_151110 = line_151113.slice(); };
						F.line = 1433;
						i_151112 = addInt(i_151112, 1);
						if ((eolpos_174494 == last_174493)) {
						F.line = 676;
						break L2;
						}
						
						F.line = 678;
						first_174492 = last_174493;
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_151110;

}

function len_166305(t_166310) {
	var result_166311 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
		F.line = 1473;
		result_166311 = t_166310.counter;
	framePtr = F.prev;

	return result_166311;

}

function is_filled_162018(hcode_162020) {
	var result_162021 = false;

	var F={procname:"tables.isFilled",prev:framePtr,filename:"hashcommon.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_162021 = !((hcode_162020 == 0));
	framePtr = F.prev;

	return result_162021;

}

function get_move_166123(self_166125, game_166126) {
	var result_166127 = null;

	var F={procname:"turn_based_game.get_move",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 192;
		var move_list_166144 = [[]];
		F.line = 193;
		var descriptive_move_list_166152 = [{data: null, counter: 0, first: 0, last: 0}];
		F.line = 194;
		var compact_description_166153 = false;
		F.line = 195;
		rawEcho([]);
		F.line = 196;
		rawEcho(makeNimstrLit("   Status:"));
		F.line = 197;
		rawEcho(nsuIndent(status_166098(game_166126), 2, makeNimstrLit("   ")));
		F.line = 198;
		set_possible_moves_166093(game_166126, move_list_166144, 0);
		if ((0 < (move_list_166144[0] != null ? move_list_166144[0].length : 0))) {
		F.line = 200;
		compact_description_166153 = true;
		}
		else {
			F.line = 202;
			set_possible_moves_166085(game_166126, descriptive_move_list_166152[0]);
			L1: do {
				F.line = 203;
				var key_167214 = null;
				F.line = 203;
				var value_167215 = null;
				F.line = 1645;
				var l_174468 = len_166305(descriptive_move_list_166152[0]);
				if ((0 < descriptive_move_list_166152[0].counter)) {
				F.line = 1257;
				var h_174469 = descriptive_move_list_166152[0].first;
				L2: do {
					F.line = 1258;
						L3: while (true) {
						if (!(0 <= h_174469)) break L3;
							F.line = 1259;
							var nxt_174471 = descriptive_move_list_166152[0].data[chckIndx(h_174469, 0, descriptive_move_list_166152[0].data.length+0-1)-0].Field1;
							if (is_filled_162018(descriptive_move_list_166152[0].data[chckIndx(h_174469, 0, descriptive_move_list_166152[0].data.length+0-1)-0].Field0)) {
							F.line = 203;
							key_167214 = descriptive_move_list_166152[0].data[chckIndx(h_174469, 0, descriptive_move_list_166152[0].data.length+0-1)-0].Field2;
							F.line = 1647;
							value_167215 = descriptive_move_list_166152[0].data[chckIndx(h_174469, 0, descriptive_move_list_166152[0].data.length+0-1)-0].Field3;
							F.line = 204;
							var Tmp4 = nimCopy(null, key_167214, NTI138);
							if (move_list_166144[0] != null) { move_list_166144[0].push(Tmp4); } else { move_list_166144[0] = [Tmp4]; };
							if (!((len_166305(descriptive_move_list_166152[0]) == l_174468))) {
							F.line = 1648;
							failed_assert_impl_15266(makeNimstrLit("/home/johnd/.choosenim/toolchains/nim-1.0.0/lib/pure/collections/tables.nim(1648, 11) `len(t) ==\x0A    L` the length of the table changed while iterating over it"));
							}
							
							}
							
							F.line = 1262;
							h_174469 = nxt_174471;
						}
				} while(false);
				}
				
			} while(false);
		}
		
		L5: do {
			F.line = 205;
				L6: while (true) {
				if (!true) break L6;
					F.line = 206;
					rawEcho(makeNimstrLit("   Possible moves:"));
					if (compact_description_166153) {
					F.line = 208;
					var disp_167226 = makeNimstrLit("      ");
					L7: do {
						F.line = 209;
						var key_167414 = null;
						F.line = 184;
						var i_174474 = 0;
						F.line = 185;
						var l_174475 = (move_list_166144[0] != null ? move_list_166144[0].length : 0);
						L8: do {
							F.line = 186;
								L9: while (true) {
								if (!(i_174474 < l_174475)) break L9;
									F.line = 209;
									key_167414 = move_list_166144[0][chckIndx(i_174474, 0, move_list_166144[0].length+0-1)-0];
									F.line = 210;
									if (disp_167226 != null) { disp_167226 = (disp_167226).concat(nsuFormatVarargs(makeNimstrLit("[$#] "), [nimCopy(null, key_167414, NTI138)])); } else { disp_167226 = nsuFormatVarargs(makeNimstrLit("[$#] "), [nimCopy(null, key_167414, NTI138)]).slice(); };
									F.line = 188;
									i_174474 = addInt(i_174474, 1);
									if (!(((move_list_166144[0] != null ? move_list_166144[0].length : 0) == l_174475))) {
									F.line = 189;
									failed_assert_impl_15266(makeNimstrLit("/home/johnd/.choosenim/toolchains/nim-1.0.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					F.line = 211;
					rawEcho(disp_167226);
					}
					else {
						L10: do {
							F.line = 213;
							var key_167428 = null;
							F.line = 213;
							var value_167429 = null;
							F.line = 1645;
							var l_174478 = len_166305(descriptive_move_list_166152[0]);
							if ((0 < descriptive_move_list_166152[0].counter)) {
							F.line = 1257;
							var h_174479 = descriptive_move_list_166152[0].first;
							L11: do {
								F.line = 1258;
									L12: while (true) {
									if (!(0 <= h_174479)) break L12;
										F.line = 1259;
										var nxt_174481 = descriptive_move_list_166152[0].data[chckIndx(h_174479, 0, descriptive_move_list_166152[0].data.length+0-1)-0].Field1;
										if (is_filled_162018(descriptive_move_list_166152[0].data[chckIndx(h_174479, 0, descriptive_move_list_166152[0].data.length+0-1)-0].Field0)) {
										F.line = 213;
										key_167428 = descriptive_move_list_166152[0].data[chckIndx(h_174479, 0, descriptive_move_list_166152[0].data.length+0-1)-0].Field2;
										F.line = 1647;
										value_167429 = descriptive_move_list_166152[0].data[chckIndx(h_174479, 0, descriptive_move_list_166152[0].data.length+0-1)-0].Field3;
										F.line = 214;
										rawEcho((makeNimstrLit("      ") || []).concat(nsuFormatVarargs(makeNimstrLit("[$key]: $value"), [makeNimstrLit("key"), nimCopy(null, key_167428, NTI138), makeNimstrLit("value"), nimCopy(null, value_167429, NTI138)]) || []));
										if (!((len_166305(descriptive_move_list_166152[0]) == l_174478))) {
										F.line = 1648;
										failed_assert_impl_15266(makeNimstrLit("/home/johnd/.choosenim/toolchains/nim-1.0.0/lib/pure/collections/tables.nim(1648, 11) `len(t) ==\x0A    L` the length of the table changed while iterating over it"));
										}
										
										}
										
										F.line = 1262;
										h_174479 = nxt_174481;
									}
							} while(false);
							}
							
						} while(false);
					}
					
					F.line = 215;
					rawEcho(makeNimstrLit("   Enter move (or \'quit\'): "));
					F.line = 216;
					var response_167442 = null;
					F.line = 219;
					response_167442 = nimCopy(null, makeNimstrLit("When compiling for Javascript, you cannot use this procedure."), NTI138);
					if (contains_167602(move_list_166144[0], response_167442)) {
					F.line = 223;
					result_166127 = nimCopy(null, response_167442, NTI138);
					break BeforeRet;
					}
					
					if (eqStrings(response_167442, makeNimstrLit("quit"))) {
					F.line = 225;
					result_166127 = nimCopy(null, [], NTI138);
					break BeforeRet;
					}
					
					F.line = 226;
					rawEcho(makeNimstrLit("   BAD ENTRY. Try again."));
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_166127;

}

function get_move_167691(self_166125, game_166126) {
	var result_167693 = null;

	var F={procname:"turn_based_game.get_move",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 510;
		chckNilDisp(self_166125);
		if (isObj(self_166125.m_type, NTI170151)) {
		F.line = 191;
		result_167693 = get_move_170157(self_166125, game_166126);
		break BeforeRet;
		}
		else {
		if (isObj(self_166125.m_type, NTI166025)) {
		F.line = 191;
		result_167693 = get_move_166123(self_166125, game_166126);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_167693;

}

function current_player_167823(self_167825) {
	var result_167826 = null;

	var F={procname:"turn_based_game.current_player",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 248;
		result_167826 = self_167825.players[chckIndx(subInt(self_167825.current_player_number, 1), 0, self_167825.players.length+0-1)-0];
	framePtr = F.prev;

	return result_167826;

}

function current_player_167855(self_167825) {
	var result_167857 = null;

	var F={procname:"turn_based_game.current_player",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 247;
		result_167857 = current_player_167823(self_167825);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_167857;

}

function winning_player_167858(self_167860) {
	var result_167861 = null;

	var F={procname:"turn_based_game.winning_player",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((0 < self_167860.winner_player_number)) {
		F.line = 257;
		result_167861 = self_167860.players[chckIndx(subInt(self_167860.winner_player_number, 1), 0, self_167860.players.length+0-1)-0];
		break BeforeRet;
		}
		else {
		if ((self_167860.winner_player_number == 0)) {
		F.line = 259;
		result_167861 = {name: makeNimstrLit("NO WINNER YET"), m_type: NTI166025};
		break BeforeRet;
		}
		else {
			F.line = 261;
			result_167861 = {name: makeNimstrLit("STALEMATE OR TIE"), m_type: NTI166025};
			break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_167861;

}

function winning_player_167877(self_167860) {
	var result_167879 = null;

	var F={procname:"turn_based_game.winning_player",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 252;
		result_167879 = winning_player_167858(self_167860);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_167879;

}

function determine_winner_172729(self_172731) {
	var F={procname:"knights.determine_winner",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((0 < self_172731.winner_player_number)) {
		F.line = 135;
		break BeforeRet;
		}
		
		if ((move_counter_172687(self_172731, 1) == 0)) {
		F.line = 137;
		self_172731.winner_player_number = 2;
		}
		
		if ((move_counter_172687(self_172731, 2) == 0)) {
		F.line = 139;
		self_172731.winner_player_number = 1;
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function determine_winner_168063(self_168065) {
	var F={procname:"turn_based_game.determine_winner",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 3463;
		var eHEX60gensym168068_168203 = null;
		F.line = 3466;
		eHEX60gensym168068_168203 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 313;
		eHEX60gensym168068_168203.message = nimCopy(null, makeNimstrLit("determine_winner() must be overridden"), NTI138);
		F.line = 3459;
		eHEX60gensym168068_168203.parent = null;
		F.line = 313;
		raiseException(eHEX60gensym168068_168203, "FieldError");
	framePtr = F.prev;

	
}

function determine_winner_168223(self_168065) {
	var F={procname:"turn_based_game.determine_winner",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 510;
		chckNilDisp(self_168065);
		if (isObj(self_168065.m_type, NTI172102)) {
		F.line = 303;
		determine_winner_172729(self_168065);
		}
		else {
		if (isObj(self_168065.m_type, NTI166018)) {
		F.line = 303;
		determine_winner_168063(self_168065);
		}
		}
	framePtr = F.prev;

	
}

function default_setup_169025(self_169027, players_169029) {
	var F={procname:"turn_based_game.default_setup",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 361;
		self_169027.players = nimCopy(null, players_169029, NTI169028);
		F.line = 362;
		self_169027.player_count = (self_169027.players != null ? self_169027.players.length : 0);
		F.line = 363;
		self_169027.current_player_number = 1;
		F.line = 364;
		self_169027.winner_player_number = 0;
	framePtr = F.prev;

	
}

function default_setup_169063(self_169027, players_169029) {
	var F={procname:"turn_based_game.default_setup",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 348;
		default_setup_169025(self_169027, players_169029);
	framePtr = F.prev;

	
}

function setup_172239(self_172241, players_172243) {
	var F={procname:"knights.setup",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 88;
		default_setup_169063(self_172241, players_172243);
		F.line = 89;
		nimCopy(self_172241.board, [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], NTI172244);
		F.line = 96;
		place_player_172224(self_172241, 1, [0, 0]);
		F.line = 97;
		nimCopy(self_172241.player_pos[chckIndx(2, 0, self_172241.player_pos.length+0-1)-0], [4, 4], NTI172264);
		F.line = 98;
		place_player_172224(self_172241, 2, [4, 4]);
	framePtr = F.prev;

	
}

function setup_168825(self_168827, players_168829) {
	var F={procname:"turn_based_game.setup",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 3463;
		var eHEX60gensym168832_169003 = null;
		F.line = 3466;
		eHEX60gensym168832_169003 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 345;
		eHEX60gensym168832_169003.message = nimCopy(null, makeNimstrLit("setup() must be overridden"), NTI138);
		F.line = 3459;
		eHEX60gensym168832_169003.parent = null;
		F.line = 345;
		raiseException(eHEX60gensym168832_169003, "FieldError");
	framePtr = F.prev;

	
}

function setup_169023(self_168827, players_168829) {
	var F={procname:"turn_based_game.setup",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 510;
		chckNilDisp(self_168827);
		if (isObj(self_168827.m_type, NTI172102)) {
		F.line = 341;
		setup_172239(self_168827, players_168829);
		}
		else {
		if (isObj(self_168827.m_type, NTI166018)) {
		F.line = 341;
		setup_168825(self_168827, players_168829);
		}
		}
	framePtr = F.prev;

	
}

function play_169065(self_169067) {
	var result_169069 = null;

	var F={procname:"turn_based_game.play",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 370;
		result_169069 = nimCopy(null, [], NTI169084);
		F.line = 371;
		var move_169085 = [];
		L1: do {
			F.line = 372;
				L2: while (true) {
				if (!!(is_over_168043(self_169067))) break L2;
					F.line = 373;
					display_166121(current_player_167855(self_169067), makeNimstrLit("-----------------"));
					F.line = 374;
					display_166121(current_player_167855(self_169067), nsuFormatVarargs(makeNimstrLit("$1\'s Turn"), [nimCopy(null, current_player_167855(self_169067).name, NTI138)]));
					F.line = 375;
					move_169085 = nimCopy(null, get_move_167691(current_player_167855(self_169067), self_169067), NTI138);
					if (eqStrings(move_169085, [])) {
					F.line = 377;
					break L1;
					}
					
					F.line = 378;
					display_166121(current_player_167855(self_169067), []);
					F.line = 379;
					display_166121(current_player_167855(self_169067), nsuFormatVarargs(makeNimstrLit("$1 chose \"$2\""), [nimCopy(null, current_player_167855(self_169067).name, NTI138), nimCopy(null, move_169085, NTI138)]));
					F.line = 380;
					var Tmp3 = nimCopy(null, move_169085, NTI138);
					if (result_169069 != null) { result_169069.push(Tmp3); } else { result_169069 = [Tmp3]; };
					F.line = 381;
					display_166121(current_player_167855(self_169067), []);
					F.line = 382;
					display_166121(current_player_167855(self_169067), (makeNimstrLit("   ") || []).concat(make_move_168023(self_169067, move_169085) || []));
					F.line = 383;
					determine_winner_168223(self_169067);
					if (is_over_168043(self_169067)) {
					F.line = 385;
					display_166121(current_player_167855(self_169067), []);
					if ((self_169067.winner_player_number == -1)) {
					F.line = 387;
					display_166121(current_player_167855(self_169067), makeNimstrLit("STALEMATE."));
					}
					else {
						F.line = 389;
					display_166121(current_player_167855(self_169067), nsuFormatVarargs(makeNimstrLit("WINNER IS $#"), [nimCopy(null, winning_player_167877(self_169067).name, NTI138)]));
					}
					
					F.line = 390;
					break L1;
					}
					
					F.line = 391;
					self_169067.current_player_number = next_player_number_167902(self_169067);
				}
		} while(false);
	framePtr = F.prev;

	return result_169069;

}

function play_169117(self_169067) {
	var result_169119 = null;

	var F={procname:"turn_based_game.play",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 367;
		result_169119 = play_169065(self_169067);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_169119;

}
