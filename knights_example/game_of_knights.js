/* Generated by the Nim Compiler v1.0.6 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI170084 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI173265 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI173264 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI173246 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI173245 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI173244 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI170028 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI173208 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI173172 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI168714 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI173307 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI173326 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI173390 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI173058 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI173057 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3686 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3660 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI171151 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3630 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3652 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3662 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3646 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI21156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3628 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3658 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI167025 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI167017 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI167020 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI167018 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI173112 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI173113 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI173105 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI173106 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI173102 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
NTI173105.base = NTI104;
NTI173106.base = NTI173105;
NTI173112.base = NTI104;
NTI173113.base = NTI173112;
var NNI173102 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "board", len: 0, typ: NTI173106, name: "board", sons: null}, 
{kind: 1, offset: "player_pos", len: 0, typ: NTI173113, name: "player_pos", sons: null}]};
NTI173102.node = NNI173102;
var NNI167025 = {kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null};
NTI167025.node = NNI167025;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI167025.base = NTI3608;
NTI167017.base = NTI167025;
NTI167020.base = NTI167017;
var NNI167018 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "player_count", len: 0, typ: NTI104, name: "player_count", sons: null}, 
{kind: 1, offset: "players", len: 0, typ: NTI167020, name: "players", sons: null}, 
{kind: 1, offset: "current_player_number", len: 0, typ: NTI104, name: "current_player_number", sons: null}, 
{kind: 1, offset: "winner_player_number", len: 0, typ: NTI104, name: "winner_player_number", sons: null}]};
NTI167018.node = NNI167018;
NTI167018.base = NTI3608;
NTI173102.base = NTI167018;
var NNI3658 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3658.node = NNI3658;
var NNI3628 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3628.node = NNI3628;
NTI3708.base = NTI3626;
NTI3714.base = NTI3626;
var NNI3626 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3708, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI114, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3714, name: "up", sons: null}]};
NTI3626.node = NNI3626;
NTI3626.base = NTI3608;
NTI3628.base = NTI3626;
NTI3658.base = NTI3628;
var NNI21156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI21156.node = NNI21156;
var NNI3646 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3646.node = NNI3646;
var NNI3642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3642.node = NNI3642;
NTI3642.base = NTI3628;
NTI3646.base = NTI3642;
var NNI3662 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3662.node = NNI3662;
NTI3662.base = NTI3628;
var NNI3652 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3652.node = NNI3652;
var NNI3630 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3630.node = NNI3630;
NTI3630.base = NTI3626;
NTI3652.base = NTI3630;
var NNI171151 = {kind: 1, offset: "depth", len: 0, typ: NTI104, name: "depth", sons: null};
NTI171151.node = NNI171151;
NTI171151.base = NTI167025;
var NNI3660 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3660.node = NNI3660;
NTI3660.base = NTI3628;
var NNI3686 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3686.node = NNI3686;
NTI3686.base = NTI3628;
NTI173057.base = NTI173058;
NTI173390.base = NTI104;
NTI173326.base = NTI104;
NTI173307.base = NTI104;
var NNI3650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3650.node = NNI3650;
NTI3650.base = NTI3628;
NTI168714.base = NTI138;
NTI173172.base = NTI104;
NTI173208.base = NTI104;
NTI170028.base = NTI167017;
NTI173245.base = NTI173246;
NTI173244.base = NTI173245;
NTI173264.base = NTI173265;
NTI170084.base = NTI138;

function makeNimstrLit(c_23270) {
		  var ln = c_23270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_23270.charCodeAt(i);
  }
  return result;
  

	
}

function toJSStr(s_23304) {
										var Tmp5;
						var Tmp7;

	var result_23305 = null;

		var res_23363 = new_seq_23336((s_23304 != null ? s_23304.length : 0));
		var i_23365 = 0;
		var j_23367 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_23365 < (s_23304 != null ? s_23304.length : 0))) break L2;
					var c_23368 = s_23304[i_23365];
					if ((c_23368 < 128)) {
					res_23363[j_23367] = String.fromCharCode(c_23368);
					i_23365 += 1;
					}
					else {
						var helper_23391 = new_seq_23336(0);
						L3: do {
								L4: while (true) {
								if (!true) break L4;
									var code_23392 = c_23368.toString(16);
									if (((code_23392 != null ? code_23392.length : 0) == 1)) {
									if (helper_23391 != null) { helper_23391.push("%0"); } else { helper_23391 = ["%0"]; };
									}
									else {
									if (helper_23391 != null) { helper_23391.push("%"); } else { helper_23391 = ["%"]; };
									}
									
									if (helper_23391 != null) { helper_23391.push(code_23392); } else { helper_23391 = [code_23392]; };
									i_23365 += 1;
										if (((s_23304 != null ? s_23304.length : 0) <= i_23365)) Tmp5 = true; else {											Tmp5 = (s_23304[i_23365] < 128);										}									if (Tmp5) {
									break L3;
									}
									
									c_23368 = s_23304[i_23365];
								}
						} while(false);
++excHandler;
						Tmp7 = framePtr;
						try {
						res_23363[j_23367] = decodeURIComponent(helper_23391.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
						framePtr = Tmp7;
						res_23363[j_23367] = helper_23391.join("");
						lastJSError = prevJSError;
						} finally {
						framePtr = Tmp7;
						}
					}
					
					j_23367 += 1;
				}
		} while(false);
		if (res_23363 === null) res_23363 = [];
               if (res_23363.length < j_23367) { for (var i=res_23363.length;i<j_23367;++i) res_23363.push(null); }
               else { res_23363.length = j_23367; };
		result_23305 = res_23363.join("");

	return result_23305;

}

function cstrToNimstr(c_23287) {
		  var ln = c_23287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_23287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_23287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_24827, src_24828, ti_24829) {
	var result_25019 = null;

		switch (ti_24829.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_24801(ti_24829))) {
			result_25019 = src_24828;
			}
			else {
				result_25019 = [src_24828[0], src_24828[1]];
			}
			
			break;
		case 19:
			      if (dest_24827 === null || dest_24827 === undefined) {
        dest_24827 = {};
      }
      else {
        for (var key in dest_24827) { delete dest_24827[key]; }
      }
      for (var key in src_24828) { dest_24827[key] = src_24828[key]; }
      result_25019 = dest_24827;
    
			break;
		case 18:
		case 17:
			if (!((ti_24829.base == null))) {
			result_25019 = nimCopy(dest_24827, src_24828, ti_24829.base);
			}
			else {
			if ((ti_24829.kind == 17)) {
			result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {m_type: ti_24829} : dest_24827;
			}
			else {
				result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {} : dest_24827;
			}
			}
			nimCopyAux(result_25019, src_24828, ti_24829.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_24828 === null) {
        result_25019 = null;
      }
      else {
        if (dest_24827 === null || dest_24827 === undefined) {
          dest_24827 = new Array(src_24828.length);
        }
        else {
          dest_24827.length = src_24828.length;
        }
        result_25019 = dest_24827;
        for (var i = 0; i < src_24828.length; ++i) {
          result_25019[i] = nimCopy(result_25019[i], src_24828[i], ti_24829.base);
        }
      }
    
			break;
		case 28:
			      if (src_24828 !== null) {
        result_25019 = src_24828.slice(0);
      }
    
			break;
		default: 
			result_25019 = src_24828;
			break;
		}

	return result_25019;

}

function arrayConstr(len_25086, value_25087, typ_25088) {
		    var result = new Array(len_25086);
    for (var i = 0; i < len_25086; ++i) result[i] = nimCopy(null, value_25087, typ_25088);
    return result;
  

	
}

function raiseException(e_21618, ename_21619) {
		e_21618.name = ename_21619;
		if ((excHandler == 0)) {
		unhandledException(e_21618);
		}
		
		e_21618.trace = nimCopy(null, raw_write_stack_trace_21468(), NTI138);
		throw e_21618;

	
}

function chckIndx(i_25105, a_25106, b_25107) {
			var Tmp1;

	var result_25108 = 0;

	BeforeRet: do {
			if (!(a_25106 <= i_25105)) Tmp1 = false; else {				Tmp1 = (i_25105 <= b_25107);			}		if (Tmp1) {
		result_25108 = i_25105;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_25105, a_25106, b_25107);
		}
		
	} while (false);

	return result_25108;

}

function addInt(a_23803, b_23804) {
		    var result = a_23803 + b_23804;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function mnewString(len_23463) {
		    return new Array(len_23463);
  

	
}

function chckRange(i_25124, a_25125, b_25126) {
			var Tmp1;

	var result_25127 = 0;

	BeforeRet: do {
			if (!(a_25125 <= i_25124)) Tmp1 = false; else {				Tmp1 = (i_25124 <= b_25126);			}		if (Tmp1) {
		result_25127 = i_25124;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_25127;

}

function subInt(a_23821, b_23822) {
		    var result = a_23821 - b_23822;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr([97, 122]);

function eqStrings(a_23641, b_23642) {
		    if (a_23641 == b_23642) return true;
    if (a_23641 === null && b_23642.length == 0) return true;
    if (b_23642 === null && a_23641.length == 0) return true;
    if ((!a_23641) || (!b_23642)) return false;
    var alen = a_23641.length;
    if (alen != b_23642.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_23641[i] != b_23642[i]) return false;
    return true;
  

	
}

function mulInt(a_23839, b_23840) {
		    var result = a_23839 * b_23840;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet3 = setConstr([48, 57]);
var ConstSet4 = setConstr([48, 57]);

function addChar(x_25311, c_25312) {
		x_25311.push(c_25312);

	
}
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr(0, 125);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90]);

function nimMax(a_24221, b_24222) {
		var Tmp1;

	var result_24223 = 0;

	BeforeRet: do {
		if ((b_24222 <= a_24221)) {
		Tmp1 = a_24221;
		}
		else {
		Tmp1 = b_24222;
		}
		
		result_24223 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24223;

}

function nimMin(a_24203, b_24204) {
		var Tmp1;

	var result_24205 = 0;

	BeforeRet: do {
		if ((a_24203 <= b_24204)) {
		Tmp1 = a_24203;
		}
		else {
		Tmp1 = b_24204;
		}
		
		result_24205 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24205;

}
var ConstSet9 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);

function isObj(obj_25270, subclass_25271) {
	var result_25272 = false;

	BeforeRet: do {
		var x_25273 = obj_25270;
		if ((x_25273 == subclass_25271)) {
		result_25272 = true;
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!!((x_25273 == subclass_25271))) break L2;
					if ((x_25273 == null)) {
					result_25272 = false;
					break BeforeRet;
					}
					
					x_25273 = x_25273.base;
				}
		} while(false);
		result_25272 = true;
		break BeforeRet;
	} while (false);

	return result_25272;

}
						var directions_173090 = [[1, 2], [-1, 2], [1, -2], [-1, -2], [2, 1], [2, -1], [-2, 1], [-2, -1]];

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function nimCharToStr(x_21062) {
	var result_21063 = null;

		result_21063 = nimCopy(null, mnewString(1), NTI138);
		result_21063[0] = x_21062;

	return result_21063;

}
var ConstSet10 = setConstr(13, 10);
var nim_program_result = 0;
var global_raise_hook_18618 = [null];
var local_raise_hook_18623 = [null];
var out_of_mem_hook_18626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_158237 = [0];
var instructions_175016 = [makeNimstrLit("Each player has one chess knight in the corners of a 5x5 chessboard. Just"), makeNimstrLit("like in regular chess, a Knight can jump in an \"L\" pattern. Each turn,"), makeNimstrLit("move your knight to any tile that hasn\'t been occupied by a knight before."), makeNimstrLit("The first player that cannot move loses."), makeNimstrLit(" "), makeNimstrLit("Please choose how many moves ahead your opponent can look (1 to 10):")];
var game_175025 = [{m_type: NTI173102, board: [new Int32Array(5), new Int32Array(5), new Int32Array(5), new Int32Array(5), new Int32Array(5)], player_pos: [new Int32Array(2), new Int32Array(2), new Int32Array(2)], player_count: 0, players: null, current_player_number: 0, winner_player_number: 0}];
var current_state_175026 = [0];
var our_score_175027 = [0];
var ai_score_175028 = [0];

function new_seq_23336(len_23339) {
	var result_23341 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 997;
		result_23341 = new Array(len_23339); for (var i=0;i<len_23339;++i) {result_23341[i]=null;}	framePtr = F.prev;

	return result_23341;

}

function send_172045(msg_172047) {
	var F={procname:"webterminal.send",prev:framePtr,filename:"webterminal.nim",line:0};
	framePtr = F;
		F.line = 136;
		send(toJSStr(msg_172047));
	framePtr = F.prev;

	
}

function is_fat_pointer_24801(ti_24803) {
	var result_24804 = false;

	BeforeRet: do {
		result_24804 = !((ConstSet1[ti_24803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_24804;

}

function nimCopyAux(dest_24832, src_24833, n_24835) {
		switch (n_24835.kind) {
		case 0:
			break;
		case 1:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_24835.sons.length; i++) {
      nimCopyAux(dest_24832, src_24833, n_24835.sons[i]);
    }
    
			break;
		case 3:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
      for (var i = 0; i < n_24835.sons.length; ++i) {
        nimCopyAux(dest_24832, src_24833, n_24835.sons[i][1]);
      }
    
			break;
		}

	
}

function add_18638(x_18641, x_18641_Idx, y_18642) {
		      if (x_18641[x_18641_Idx] === null) { x_18641[x_18641_Idx] = []; }
      var off = x_18641[x_18641_Idx].length;
      x_18641[x_18641_Idx].length += y_18642.length;
      for (var i = 0; i < y_18642.length; ++i) {
        x_18641[x_18641_Idx][off+i] = y_18642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_21151(f_21153) {
					var Tmp3;

	var result_21154 = [null];

		var it_21162 = f_21153;
		var i_21164 = 0;
		var total_21166 = 0;
		var temp_frames_21173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI21156);
		L1: do {
				L2: while (true) {
					if (!!((it_21162 == null))) Tmp3 = false; else {						Tmp3 = (i_21164 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_21173[i_21164].Field0 = it_21162.procname;
					temp_frames_21173[i_21164].Field1 = it_21162.line;
					i_21164 += 1;
					total_21166 += 1;
					it_21162 = it_21162.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_21162 == null))) break L5;
					total_21166 += 1;
					it_21162 = it_21162.prev;
				}
		} while(false);
		result_21154[0] = nimCopy(null, [], NTI138);
		if (!((total_21166 == i_21164))) {
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit("(")); } else { result_21154[0] = makeNimstrLit("("); };
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(cstrToNimstr(((total_21166 - i_21164))+"")); } else { result_21154[0] = cstrToNimstr(((total_21166 - i_21164))+"").slice(); };
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_21154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_21421 = 0;
			var colontmp__175249 = 0;
			colontmp__175249 = (i_21164 - 1);
			var res_175254 = colontmp__175249;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_175254)) break L8;
						j_21421 = res_175254;
						add_18638(result_21154, 0, temp_frames_21173[j_21421].Field0);
						if ((0 < temp_frames_21173[j_21421].Field1)) {
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit(", line: ")); } else { result_21154[0] = makeNimstrLit(", line: "); };
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(cstrToNimstr((temp_frames_21173[j_21421].Field1)+"")); } else { result_21154[0] = cstrToNimstr((temp_frames_21173[j_21421].Field1)+"").slice(); };
						}
						
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit("\x0A")); } else { result_21154[0] = makeNimstrLit("\x0A"); };
						res_175254 -= 1;
					}
			} while(false);
		} while(false);

	return result_21154[0];

}

function raw_write_stack_trace_21468() {
	var result_21470 = null;

		if (!((framePtr == null))) {
		result_21470 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_21151(framePtr) || []), NTI138);
		}
		else {
			result_21470 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_21470;

}

function unhandledException(e_21529) {
		var buf_21530 = [[]];
		if (!(((e_21529.message != null ? e_21529.message.length : 0) == 0))) {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(e_21529.message); } else { buf_21530[0] = e_21529.message.slice(); };
		}
		else {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit(" [")); } else { buf_21530[0] = makeNimstrLit(" ["); };
		add_18638(buf_21530, 0, e_21529.name);
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_21530[0] = makeNimstrLit("]\x0A"); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(raw_write_stack_trace_21468()); } else { buf_21530[0] = raw_write_stack_trace_21468().slice(); };
		var cbuf_21601 = toJSStr(buf_21530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_21601);
  }
  else {
    throw cbuf_21601;
  }
  

	
}

function raiseIndexError(i_22655, a_22656, b_22657) {
		var Tmp1;

		var eHEX60gensym22802_23003 = null;
		eHEX60gensym22802_23003 = {m_type: NTI3658, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		if ((b_22657 < a_22656)) {
		Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
		}
		else {
		Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_22655)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_22656)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_22657)+"") || []);
		}
		
		eHEX60gensym22802_23003.message = nimCopy(null, Tmp1, NTI138);
		eHEX60gensym22802_23003.parent = null;
		raiseException(eHEX60gensym22802_23003, "IndexError");

	
}

function raiseOverflow() {
		var eHEX60gensym22058_22203 = null;
		eHEX60gensym22058_22203 = {m_type: NTI3646, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22058_22203.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		eHEX60gensym22058_22203.parent = null;
		raiseException(eHEX60gensym22058_22203, "OverflowError");

	
}

function on_load_175136() {
	var F={procname:"game_of_knights.on_load",prev:framePtr,filename:"game_of_knights.nim",line:0};
	framePtr = F;
		F.line = 69;
		current_state_175026[0] = 1;
		F.line = 70;
		send_172045(makeNimstrLit("Game of Knights"));
		F.line = 71;
		send_172045(makeNimstrLit(" "));
		L1: do {
			F.line = 72;
			var line_175198 = null;
			F.line = 17;
			var i_175234 = 0;
			if ((i_175234 <= 5)) {
			L2: do {
				F.line = 19;
					L3: while (true) {
					if (!true) break L3;
						F.line = 72;
						line_175198 = instructions_175016[chckIndx(i_175234, 0, (instructions_175016 != null ? instructions_175016.length : 0)+0-1)-0];
						F.line = 73;
						send_172045(line_175198);
						if ((5 <= i_175234)) {
						F.line = 21;
						break L2;
						}
						
						F.line = 22;
						i_175234 = addInt(i_175234, 1);
					}
			} while(false);
			}
			
		} while(false);
	framePtr = F.prev;

	
}
establish_terminal_on_start_function(on_load_175136);

function raiseRangeError() {
		var eHEX60gensym22457_22603 = null;
		eHEX60gensym22457_22603 = {m_type: NTI3662, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22457_22603.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		eHEX60gensym22457_22603.parent = null;
		raiseException(eHEX60gensym22457_22603, "RangeError");

	
}

function nsuToUpperAsciiChar(c_147463) {
	var result_147464 = 0;

	var F={procname:"strutils.toUpperAscii",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet2[c_147463] != undefined)) {
		F.line = 261;
		result_147464 = chckRange(subInt(c_147463, 32), 0, 255);
		}
		else {
			F.line = 263;
			result_147464 = c_147463;
		}
		
	framePtr = F.prev;

	return result_147464;

}

function nsuToUpperAsciiStr(s_147502) {
	var result_147503 = null;

	var F={procname:"strutils.toUpperAscii",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 227;
		result_147503 = nimCopy(null, mnewString(chckRange((s_147502 != null ? s_147502.length : 0), 0, 2147483647)), NTI138);
		L1: do {
			F.line = 228;
			var iHEX60gensym147504_147513 = 0;
			F.line = 2699;
			var colontmp__175330 = 0;
			F.line = 228;
			colontmp__175330 = subInt((s_147502 != null ? s_147502.length : 0), 1);
			F.line = 2710;
			var res_175331 = 0;
			L2: do {
				F.line = 2711;
					L3: while (true) {
					if (!(res_175331 <= colontmp__175330)) break L3;
						F.line = 277;
						iHEX60gensym147504_147513 = res_175331;
						F.line = 229;
						result_147503[chckIndx(iHEX60gensym147504_147513, 0, (result_147503 != null ? result_147503.length : 0)+0-1)-0] = nsuToUpperAsciiChar(s_147502[chckIndx(iHEX60gensym147504_147513, 0, (s_147502 != null ? s_147502.length : 0)+0-1)-0]);
						F.line = 2713;
						res_175331 = addInt(res_175331, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_147503;

}

function find_168609(a_168613, item_168614) {
	var result_168615 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 3169;
			var i_168621 = null;
			F.line = 3;
			var i_175338 = 0;
			L2: do {
				F.line = 4;
					L3: while (true) {
					if (!(i_175338 < (a_168613 != null ? a_168613.length : 0))) break L3;
						F.line = 3169;
						i_168621 = a_168613[chckIndx(i_175338, 0, (a_168613 != null ? a_168613.length : 0)+0-1)-0];
						if (eqStrings(i_168621, item_168614)) {
						F.line = 3170;
						break BeforeRet;
						}
						
						F.line = 3171;
						result_168615 = addInt(result_168615, 1);
						F.line = 6;
						i_175338 = addInt(i_175338, 1);
					}
			} while(false);
		} while(false);
		F.line = 3172;
		result_168615 = -1;
	} while (false);
	framePtr = F.prev;

	return result_168615;

}

function contains_168602(a_168606, item_168607) {
	var result_168608 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 3186;
		result_168608 = (0 <= find_168609(a_168606, item_168607));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_168608;

}

function handle_end_175088(game_175090) {
	var F={procname:"game_of_knights.handle_end",prev:framePtr,filename:"game_of_knights.nim",line:0};
	framePtr = F;
		F.line = 29;
		send_172045(makeNimstrLit(" "));
		F.line = 30;
		send_172045(makeNimstrLit("-----------------"));
		F.line = 31;
		send_172045(makeNimstrLit("GAME OVER"));
		F.line = 32;
		send_172045(status_167098(game_175090));
		F.line = 33;
		send_172045(makeNimstrLit(" "));
		if ((game_175090.winner_player_number == 1)) {
		F.line = 35;
		our_score_175027[0] = addInt(our_score_175027[0], 1);
		F.line = 36;
		send_172045(makeNimstrLit("YOU WON! The AI is out of moves."));
		}
		else {
			F.line = 38;
			ai_score_175028[0] = addInt(ai_score_175028[0], 1);
			F.line = 39;
			send_172045(makeNimstrLit("The AI won. You ran out of moves but the AI has a move remaining."));
		}
		
		F.line = 41;
		current_state_175026[0] = 4;
		F.line = 42;
		send_172045(makeNimstrLit("\x0A"));
		F.line = 43;
		send_172045(makeNimstrLit("-------------------------------------------\x0A"));
		F.line = 44;
		send_172045((makeNimstrLit("Your score: ") || []).concat(cstrToNimstr((our_score_175027[0])+"") || []));
		F.line = 45;
		send_172045((makeNimstrLit("AI score: ") || []).concat(cstrToNimstr((ai_score_175028[0])+"") || []));
		F.line = 46;
		send_172045(makeNimstrLit("-------------------------------------------\x0A"));
		F.line = 47;
		send_172045(makeNimstrLit("Do you want to play again? (y/n)\x0A"));
	framePtr = F.prev;

	
}

function nsuJoinSep(a_152664, sep_152665) {
	var result_152666 = null;

	var F={procname:"strutils.join",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		if ((0 < (a_152664 != null ? a_152664.length : 0))) {
		F.line = 1774;
		var l_152677 = mulInt((sep_152665 != null ? sep_152665.length : 0), subInt((a_152664 != null ? a_152664.length : 0), 1));
		L1: do {
			F.line = 1775;
			var i_152691 = 0;
			F.line = 2699;
			var colontmp__175341 = 0;
			F.line = 1775;
			colontmp__175341 = (a_152664 != null ? (a_152664.length-1) : -1);
			F.line = 2710;
			var res_175342 = 0;
			L2: do {
				F.line = 2711;
					L3: while (true) {
					if (!(res_175342 <= colontmp__175341)) break L3;
						F.line = 1775;
						i_152691 = res_175342;
						F.line = 1775;
						l_152677 = addInt(l_152677, (a_152664[chckIndx(i_152691, 0, (a_152664 != null ? a_152664.length : 0)+0-1)-0] != null ? a_152664[chckIndx(i_152691, 0, (a_152664 != null ? a_152664.length : 0)+0-1)-0].length : 0));
						F.line = 2713;
						res_175342 = addInt(res_175342, 1);
					}
			} while(false);
		} while(false);
		F.line = 1776;
		result_152666 = nimCopy(null, mnewString(0), NTI138);
		F.line = 1777;
		if (result_152666 != null) { result_152666 = (result_152666).concat(a_152664[chckIndx(0, 0, (a_152664 != null ? a_152664.length : 0)+0-1)-0]); } else { result_152666 = a_152664[chckIndx(0, 0, (a_152664 != null ? a_152664.length : 0)+0-1)-0].slice(); };
		L4: do {
			F.line = 1778;
			var i_152711 = 0;
			F.line = 2699;
			var colontmp__175348 = 0;
			F.line = 1778;
			colontmp__175348 = (a_152664 != null ? (a_152664.length-1) : -1);
			F.line = 2710;
			var res_175349 = 1;
			L5: do {
				F.line = 2711;
					L6: while (true) {
					if (!(res_175349 <= colontmp__175348)) break L6;
						F.line = 1778;
						i_152711 = res_175349;
						F.line = 1779;
						if (result_152666 != null) { result_152666 = (result_152666).concat(sep_152665); } else { result_152666 = sep_152665.slice(); };
						F.line = 1780;
						if (result_152666 != null) { result_152666 = (result_152666).concat(a_152664[chckIndx(i_152711, 0, (a_152664 != null ? a_152664.length : 0)+0-1)-0]); } else { result_152666 = a_152664[chckIndx(i_152711, 0, (a_152664 != null ? a_152664.length : 0)+0-1)-0].slice(); };
						F.line = 2713;
						res_175349 = addInt(res_175349, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 1782;
			result_152666 = nimCopy(null, [], NTI138);
		}
		
	framePtr = F.prev;

	return result_152666;

}

function show_turn_start_175116(game_175118) {
	var F={procname:"game_of_knights.show_turn_start",prev:framePtr,filename:"game_of_knights.nim",line:0};
	framePtr = F;
		F.line = 52;
		var moves_possible_175120 = [null];
		F.line = 53;
		set_possible_moves_167093(game_175118, moves_possible_175120, 0);
		F.line = 54;
		send_172045(makeNimstrLit(" "));
		F.line = 55;
		send_172045(makeNimstrLit("-----------------"));
		if ((game_175118.current_player_number == 1)) {
		F.line = 57;
		send_172045(makeNimstrLit("Your turn (White Knight)"));
		}
		else {
			F.line = 59;
		send_172045(makeNimstrLit("AI\'s turn (Black Knight)"));
		}
		
		F.line = 60;
		send_172045(status_167098(game_175118));
		if ((game_175118.current_player_number == 1)) {
		F.line = 62;
		var move_display_175122 = nsuJoinSep(moves_possible_175120[0], makeNimstrLit(", "));
		F.line = 63;
		send_172045((makeNimstrLit("Possible moves: ") || []).concat(move_display_175122 || []));
		F.line = 64;
		send_172045(makeNimstrLit("Send move:"));
		}
		else {
			F.line = 66;
		send_172045(makeNimstrLit("Thinking..."));
		}
		
	framePtr = F.prev;

	
}

function integer_out_of_range_error_44418() {
	var F={procname:"parseutils.integerOutOfRangeError",prev:framePtr,filename:"parseutils.nim",line:0};
	framePtr = F;
		F.line = 3478;
		var eHEX60gensym44422_44603 = null;
		F.line = 3481;
		eHEX60gensym44422_44603 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 402;
		eHEX60gensym44422_44603.message = nimCopy(null, makeNimstrLit("Parsed integer outside of valid range"), NTI138);
		F.line = 3474;
		eHEX60gensym44422_44603.parent = null;
		F.line = 402;
		raiseException(eHEX60gensym44422_44603, "ValueError");
	framePtr = F.prev;

	
}

function raw_parse_int_44801(s_44803, b_44805, b_44805_Idx, start_44806) {
			var Tmp1;
					var Tmp4;
			var Tmp7;

	var result_44808 = 0;

	var F={procname:"parseutils.rawParseInt",prev:framePtr,filename:"parseutils.nim",line:0};
	framePtr = F;
		F.line = 410;
		var sign_44810 = -1;
		F.line = 411;
		var i_44811 = start_44806;
		if ((i_44811 < (s_44803 != null ? s_44803.length : 0))) {
		if ((s_44803[chckIndx(i_44811, 0, (s_44803 != null ? s_44803.length : 0)+0-1)-0] == 43)) {
		F.line = 413;
		i_44811 += 1;
		}
		else {
		if ((s_44803[chckIndx(i_44811, 0, (s_44803 != null ? s_44803.length : 0)+0-1)-0] == 45)) {
		F.line = 415;
		i_44811 += 1;
		F.line = 416;
		sign_44810 = 1;
		}
		}
		}
		
			if (!(i_44811 < (s_44803 != null ? s_44803.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet3[s_44803[chckIndx(i_44811, 0, (s_44803 != null ? s_44803.length : 0)+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 418;
		b_44805[b_44805_Idx] = 0;
		L2: do {
			F.line = 419;
				L3: while (true) {
					if (!(i_44811 < (s_44803 != null ? s_44803.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet4[s_44803[chckIndx(i_44811, 0, (s_44803 != null ? s_44803.length : 0)+0-1)-0]] != undefined);					}				if (!Tmp4) break L3;
					F.line = 420;
					var c_44846 = (s_44803[chckIndx(i_44811, 0, (s_44803 != null ? s_44803.length : 0)+0-1)-0] - 48);
					if ((Math.trunc((-9223372036854775808 + c_44846) / 10) <= b_44805[b_44805_Idx])) {
					F.line = 422;
					b_44805[b_44805_Idx] = ((b_44805[b_44805_Idx] * 10) - c_44846);
					}
					else {
						F.line = 424;
					integer_out_of_range_error_44418();
					}
					
					F.line = 425;
					i_44811 += 1;
					L5: do {
						F.line = 426;
							L6: while (true) {
							if (!((i_44811 < (s_44803 != null ? s_44803.length : 0)) && (s_44803[chckIndx(i_44811, 0, (s_44803 != null ? s_44803.length : 0)+0-1)-0] == 95))) break L6;
								F.line = 426;
								i_44811 += 1;
							}
					} while(false);
				}
		} while(false);
			if (!(sign_44810 == -1)) Tmp7 = false; else {				Tmp7 = (b_44805[b_44805_Idx] == -9223372036854775808);			}		if (Tmp7) {
		F.line = 428;
		integer_out_of_range_error_44418();
		}
		else {
			F.line = 430;
			b_44805[b_44805_Idx] = (b_44805[b_44805_Idx] * sign_44810);
			F.line = 431;
			result_44808 = (i_44811 - start_44806);
		}
		
		}
		
	framePtr = F.prev;

	return result_44808;

}

function npuParseBiggestInt(s_45003, number_45005, number_45005_Idx, start_45006) {
	var result_45008 = 0;

	var F={procname:"parseutils.parseBiggestInt",prev:framePtr,filename:"parseutils.nim",line:0};
	framePtr = F;
		F.line = 445;
		var res_45009 = [0];
		F.line = 448;
		result_45008 = raw_parse_int_44801(s_45003, res_45009, 0, start_45006);
		if (!((result_45008 == 0))) {
		F.line = 450;
		number_45005[number_45005_Idx] = res_45009[0];
		}
		
	framePtr = F.prev;

	return result_45008;

}

function npuParseInt(s_45026, number_45028, number_45028_Idx, start_45029) {
			var Tmp1;

	var result_45031 = 0;

	var F={procname:"parseutils.parseInt",prev:framePtr,filename:"parseutils.nim",line:0};
	framePtr = F;
		F.line = 463;
		var res_45032 = [0];
		F.line = 464;
		result_45031 = npuParseBiggestInt(s_45026, res_45032, 0, start_45029);
			if ((res_45032[0] < -2147483648)) Tmp1 = true; else {				Tmp1 = (2147483647 < res_45032[0]);			}		if (Tmp1) {
		F.line = 467;
		integer_out_of_range_error_44418();
		}
		
		if (!((result_45031 == 0))) {
		F.line = 469;
		number_45028[number_45028_Idx] = chckRange(res_45032[0], -2147483648, 2147483647);
		}
		
	framePtr = F.prev;

	return result_45031;

}

function nsuParseInt(s_149442) {
			var Tmp1;

	var result_149443 = [0];

	var F={procname:"strutils.parseInt",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 1098;
		var l_149445 = npuParseInt(s_149442, result_149443, 0, 0);
			if (!((l_149445 == (s_149442 != null ? s_149442.length : 0)))) Tmp1 = true; else {				Tmp1 = (l_149445 == 0);			}		if (Tmp1) {
		F.line = 3478;
		var eHEX60gensym149448_149603 = null;
		F.line = 3481;
		eHEX60gensym149448_149603 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 1100;
		eHEX60gensym149448_149603.message = nimCopy(null, (makeNimstrLit("invalid integer: ") || []).concat(s_149442 || []), NTI138);
		F.line = 3474;
		eHEX60gensym149448_149603.parent = null;
		F.line = 1100;
		raiseException(eHEX60gensym149448_149603, "ValueError");
		}
		
	framePtr = F.prev;

	return result_149443[0];

}

function invalid_format_string_155939() {
	var F={procname:"strutils.invalidFormatString",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 3478;
		var eHEX60gensym155943_156003 = null;
		F.line = 3481;
		eHEX60gensym155943_156003 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 2634;
		eHEX60gensym155943_156003.message = nimCopy(null, makeNimstrLit("invalid format string"), NTI138);
		F.line = 3474;
		eHEX60gensym155943_156003.parent = null;
		F.line = 2634;
		raiseException(eHEX60gensym155943_156003, "ValueError");
	framePtr = F.prev;

	
}

function nsuToLowerAsciiChar(c_147380) {
	var result_147381 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet8[c_147380] != undefined)) {
		F.line = 222;
		result_147381 = chckRange(addInt(c_147380, 32), 0, 255);
		}
		else {
			F.line = 224;
			result_147381 = c_147380;
		}
		
	framePtr = F.prev;

	return result_147381;

}

function nsuCmpIgnoreStyle(a_147649, b_147650) {
					var Tmp7;
					var Tmp8;

	var result_147651 = 0;

	BeforeRet: do {
		var i_147653 = 0;
		var j_147655 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					L3: do {
							L4: while (true) {
							if (!((i_147653 < (a_147649 != null ? a_147649.length : 0)) && (a_147649[i_147653] == 95))) break L4;
								i_147653 += 1;
							}
					} while(false);
					L5: do {
							L6: while (true) {
							if (!((j_147655 < (b_147650 != null ? b_147650.length : 0)) && (b_147650[j_147655] == 95))) break L6;
								j_147655 += 1;
							}
					} while(false);
					if ((i_147653 < (a_147649 != null ? a_147649.length : 0))) {
					Tmp7 = nsuToLowerAsciiChar(a_147649[i_147653]);
					}
					else {
					Tmp7 = 0;
					}
					
					var aa_147668 = Tmp7;
					if ((j_147655 < (b_147650 != null ? b_147650.length : 0))) {
					Tmp8 = nsuToLowerAsciiChar(b_147650[j_147655]);
					}
					else {
					Tmp8 = 0;
					}
					
					var bb_147669 = Tmp8;
					result_147651 = (aa_147668 - bb_147669);
					if (!((result_147651 == 0))) {
					break BeforeRet;
					}
					
					if (((a_147649 != null ? a_147649.length : 0) <= i_147653)) {
					if (((b_147650 != null ? b_147650.length : 0) <= j_147655)) {
					result_147651 = 0;
					break BeforeRet;
					}
					
					result_147651 = -1;
					break BeforeRet;
					}
					else {
					if (((b_147650 != null ? b_147650.length : 0) <= j_147655)) {
					result_147651 = 1;
					break BeforeRet;
					}
					}
					i_147653 += 1;
					j_147655 += 1;
				}
		} while(false);
	} while (false);

	return result_147651;

}

function find_normalized_155906(x_155908, in_array_155910) {
	var result_155911 = 0;

	var F={procname:"strutils.findNormalized",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 2626;
		var i_155913 = 0;
		L1: do {
			F.line = 2627;
				L2: while (true) {
				if (!(i_155913 < (in_array_155910 != null ? (in_array_155910.length-1) : -1))) break L2;
					if ((nsuCmpIgnoreStyle(x_155908, in_array_155910[chckIndx(i_155913, 0, (in_array_155910 != null ? in_array_155910.length : 0)+0-1)-0]) == 0)) {
					F.line = 2628;
					result_155911 = i_155913;
					break BeforeRet;
					}
					
					F.line = 2629;
					i_155913 = addInt(i_155913, 2);
				}
		} while(false);
		F.line = 2631;
		result_155911 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_155911;

}

function substr_30422(s_30424, first_30425, last_30426) {
	var result_30427 = null;

	var F={procname:"system.substr",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 4529;
		var first_30428 = nimMax(first_30425, 0);
		F.line = 4530;
		var l_30430 = nimMax(addInt(subInt(nimMin(last_30426, (s_30424 != null ? (s_30424.length-1) : -1)), first_30428), 1), 0);
		F.line = 4531;
		result_30427 = nimCopy(null, mnewString(chckRange(l_30430, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 4532;
			var i_30439 = 0;
			F.line = 2699;
			var colontmp__175371 = 0;
			F.line = 4532;
			colontmp__175371 = subInt(l_30430, 1);
			F.line = 2710;
			var res_175372 = 0;
			L2: do {
				F.line = 2711;
					L3: while (true) {
					if (!(res_175372 <= colontmp__175371)) break L3;
						F.line = 4532;
						i_30439 = res_175372;
						F.line = 4533;
						result_30427[chckIndx(i_30439, 0, (result_30427 != null ? result_30427.length : 0)+0-1)-0] = s_30424[chckIndx(addInt(i_30439, first_30428), 0, (s_30424 != null ? s_30424.length : 0)+0-1)-0];
						F.line = 2713;
						res_175372 = addInt(res_175372, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_30427;

}

function nsuAddf(s_156026, s_156026_Idx, formatstr_156027, a_156029) {
									var Tmp5;
						var Tmp6;
							var Tmp7;
						var Tmp10;
							var Tmp11;
								var Tmp12;
									var Tmp15;
							var Tmp16;

	var F={procname:"strutils.addf",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 2640;
		var i_156033 = 0;
		F.line = 2641;
		var num_156035 = 0;
		L1: do {
			F.line = 2642;
				L2: while (true) {
				if (!(i_156033 < (formatstr_156027 != null ? formatstr_156027.length : 0))) break L2;
					if (((formatstr_156027[chckIndx(i_156033, 0, (formatstr_156027 != null ? formatstr_156027.length : 0)+0-1)-0] == 36) && (addInt(i_156033, 1) < (formatstr_156027 != null ? formatstr_156027.length : 0)))) {
					F.line = 2644;
					switch (formatstr_156027[chckIndx(addInt(i_156033, 1), 0, (formatstr_156027 != null ? formatstr_156027.length : 0)+0-1)-0]) {
					case 35:
						if (((a_156029 != null ? (a_156029.length-1) : -1) < num_156035)) {
						F.line = 2646;
						invalid_format_string_155939();
						}
						
						F.line = 2647;
						if (s_156026[s_156026_Idx] != null) { s_156026[s_156026_Idx] = (s_156026[s_156026_Idx]).concat(a_156029[chckIndx(num_156035, 0, (a_156029 != null ? a_156029.length : 0)+0-1)-0]); } else { s_156026[s_156026_Idx] = a_156029[chckIndx(num_156035, 0, (a_156029 != null ? a_156029.length : 0)+0-1)-0].slice(); };
						F.line = 2648;
						i_156033 = addInt(i_156033, 2);
						F.line = 2649;
						num_156035 = addInt(num_156035, 1);
						break;
					case 36:
						F.line = 2651;
						if (s_156026[s_156026_Idx] != null) { addChar(s_156026[s_156026_Idx], 36); } else { s_156026[s_156026_Idx] = [36]; };
						F.line = 2652;
						i_156033 = addInt(i_156033, 2);
						break;
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
					case 54:
					case 55:
					case 56:
					case 57:
					case 45:
						F.line = 2654;
						var j_156060 = 0;
						F.line = 2655;
						i_156033 = addInt(i_156033, 1);
						F.line = 2656;
						var negative_156067 = (formatstr_156027[chckIndx(i_156033, 0, (formatstr_156027 != null ? formatstr_156027.length : 0)+0-1)-0] == 45);
						if (negative_156067) {
						F.line = 2657;
						i_156033 = addInt(i_156033, 1);
						}
						
						L3: do {
							F.line = 2658;
								L4: while (true) {
									if (!(i_156033 < (formatstr_156027 != null ? formatstr_156027.length : 0))) Tmp5 = false; else {										Tmp5 = (ConstSet5[formatstr_156027[chckIndx(i_156033, 0, (formatstr_156027 != null ? formatstr_156027.length : 0)+0-1)-0]] != undefined);									}								if (!Tmp5) break L4;
									F.line = 2659;
									j_156060 = subInt(addInt(mulInt(j_156060, 10), formatstr_156027[chckIndx(i_156033, 0, (formatstr_156027 != null ? formatstr_156027.length : 0)+0-1)-0]), 48);
									F.line = 2660;
									i_156033 = addInt(i_156033, 1);
								}
						} while(false);
						F.line = 2661;
						if (!(negative_156067)) {
						Tmp6 = subInt(j_156060, 1);
						}
						else {
						Tmp6 = subInt((a_156029 != null ? a_156029.length : 0), j_156060);
						}
						
						var idx_156098 = Tmp6;
							if ((idx_156098 < 0)) Tmp7 = true; else {								Tmp7 = ((a_156029 != null ? (a_156029.length-1) : -1) < idx_156098);							}						if (Tmp7) {
						F.line = 2662;
						invalid_format_string_155939();
						}
						
						F.line = 2663;
						if (s_156026[s_156026_Idx] != null) { s_156026[s_156026_Idx] = (s_156026[s_156026_Idx]).concat(a_156029[chckIndx(idx_156098, 0, (a_156029 != null ? a_156029.length : 0)+0-1)-0]); } else { s_156026[s_156026_Idx] = a_156029[chckIndx(idx_156098, 0, (a_156029 != null ? a_156029.length : 0)+0-1)-0].slice(); };
						break;
					case 123:
						F.line = 2665;
						var j_156104 = addInt(i_156033, 2);
						F.line = 2666;
						var k_156106 = 0;
						F.line = 2667;
						var negative_156107 = (formatstr_156027[chckIndx(j_156104, 0, (formatstr_156027 != null ? formatstr_156027.length : 0)+0-1)-0] == 45);
						if (negative_156107) {
						F.line = 2668;
						j_156104 = addInt(j_156104, 1);
						}
						
						F.line = 2669;
						var is_number_156115 = 0;
						L8: do {
							F.line = 2670;
								L9: while (true) {
								if (!((j_156104 < (formatstr_156027 != null ? formatstr_156027.length : 0)) && !((ConstSet6[formatstr_156027[chckIndx(j_156104, 0, (formatstr_156027 != null ? formatstr_156027.length : 0)+0-1)-0]] != undefined)))) break L9;
									if ((ConstSet7[formatstr_156027[chckIndx(j_156104, 0, (formatstr_156027 != null ? formatstr_156027.length : 0)+0-1)-0]] != undefined)) {
									F.line = 2672;
									k_156106 = subInt(addInt(mulInt(k_156106, 10), formatstr_156027[chckIndx(j_156104, 0, (formatstr_156027 != null ? formatstr_156027.length : 0)+0-1)-0]), 48);
									if ((is_number_156115 == 0)) {
									F.line = 2673;
									is_number_156115 = 1;
									}
									
									}
									else {
										F.line = 2675;
										is_number_156115 = -1;
									}
									
									F.line = 2676;
									j_156104 = addInt(j_156104, 1);
								}
						} while(false);
						if ((is_number_156115 == 1)) {
						F.line = 2678;
						if (!(negative_156107)) {
						Tmp10 = subInt(k_156106, 1);
						}
						else {
						Tmp10 = subInt((a_156029 != null ? a_156029.length : 0), k_156106);
						}
						
						var idx_156148 = Tmp10;
							if ((idx_156148 < 0)) Tmp11 = true; else {								Tmp11 = ((a_156029 != null ? (a_156029.length-1) : -1) < idx_156148);							}						if (Tmp11) {
						F.line = 2679;
						invalid_format_string_155939();
						}
						
						F.line = 2680;
						if (s_156026[s_156026_Idx] != null) { s_156026[s_156026_Idx] = (s_156026[s_156026_Idx]).concat(a_156029[chckIndx(idx_156148, 0, (a_156029 != null ? a_156029.length : 0)+0-1)-0]); } else { s_156026[s_156026_Idx] = a_156029[chckIndx(idx_156148, 0, (a_156029 != null ? a_156029.length : 0)+0-1)-0].slice(); };
						}
						else {
							F.line = 2682;
							var x_156154 = find_normalized_155906(substr_30422(formatstr_156027, addInt(i_156033, 2), subInt(j_156104, 1)), a_156029);
								if (!(0 <= x_156154)) Tmp12 = false; else {									Tmp12 = (x_156154 < (a_156029 != null ? (a_156029.length-1) : -1));								}							if (Tmp12) {
							F.line = 2683;
							if (s_156026[s_156026_Idx] != null) { s_156026[s_156026_Idx] = (s_156026[s_156026_Idx]).concat(a_156029[chckIndx(addInt(x_156154, 1), 0, (a_156029 != null ? a_156029.length : 0)+0-1)-0]); } else { s_156026[s_156026_Idx] = a_156029[chckIndx(addInt(x_156154, 1), 0, (a_156029 != null ? a_156029.length : 0)+0-1)-0].slice(); };
							}
							else {
								F.line = 2684;
							invalid_format_string_155939();
							}
							
						}
						
						F.line = 2685;
						i_156033 = addInt(j_156104, 1);
						break;
					case 97:
					case 98:
					case 99:
					case 100:
					case 101:
					case 102:
					case 103:
					case 104:
					case 105:
					case 106:
					case 107:
					case 108:
					case 109:
					case 110:
					case 111:
					case 112:
					case 113:
					case 114:
					case 115:
					case 116:
					case 117:
					case 118:
					case 119:
					case 120:
					case 121:
					case 122:
					case 65:
					case 66:
					case 67:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 73:
					case 74:
					case 75:
					case 76:
					case 77:
					case 78:
					case 79:
					case 80:
					case 81:
					case 82:
					case 83:
					case 84:
					case 85:
					case 86:
					case 87:
					case 88:
					case 89:
					case 90:
					case 128:
					case 129:
					case 130:
					case 131:
					case 132:
					case 133:
					case 134:
					case 135:
					case 136:
					case 137:
					case 138:
					case 139:
					case 140:
					case 141:
					case 142:
					case 143:
					case 144:
					case 145:
					case 146:
					case 147:
					case 148:
					case 149:
					case 150:
					case 151:
					case 152:
					case 153:
					case 154:
					case 155:
					case 156:
					case 157:
					case 158:
					case 159:
					case 160:
					case 161:
					case 162:
					case 163:
					case 164:
					case 165:
					case 166:
					case 167:
					case 168:
					case 169:
					case 170:
					case 171:
					case 172:
					case 173:
					case 174:
					case 175:
					case 176:
					case 177:
					case 178:
					case 179:
					case 180:
					case 181:
					case 182:
					case 183:
					case 184:
					case 185:
					case 186:
					case 187:
					case 188:
					case 189:
					case 190:
					case 191:
					case 192:
					case 193:
					case 194:
					case 195:
					case 196:
					case 197:
					case 198:
					case 199:
					case 200:
					case 201:
					case 202:
					case 203:
					case 204:
					case 205:
					case 206:
					case 207:
					case 208:
					case 209:
					case 210:
					case 211:
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 226:
					case 227:
					case 228:
					case 229:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
					case 236:
					case 237:
					case 238:
					case 239:
					case 240:
					case 241:
					case 242:
					case 243:
					case 244:
					case 245:
					case 246:
					case 247:
					case 248:
					case 249:
					case 250:
					case 251:
					case 252:
					case 253:
					case 254:
					case 255:
					case 95:
						F.line = 2687;
						var j_156161 = addInt(i_156033, 1);
						L13: do {
							F.line = 2688;
								L14: while (true) {
									if (!(j_156161 < (formatstr_156027 != null ? formatstr_156027.length : 0))) Tmp15 = false; else {										Tmp15 = (ConstSet9[formatstr_156027[chckIndx(j_156161, 0, (formatstr_156027 != null ? formatstr_156027.length : 0)+0-1)-0]] != undefined);									}								if (!Tmp15) break L14;
									F.line = 2688;
									j_156161 = addInt(j_156161, 1);
								}
						} while(false);
						F.line = 2689;
						var x_156174 = find_normalized_155906(substr_30422(formatstr_156027, addInt(i_156033, 1), subInt(j_156161, 1)), a_156029);
							if (!(0 <= x_156174)) Tmp16 = false; else {								Tmp16 = (x_156174 < (a_156029 != null ? (a_156029.length-1) : -1));							}						if (Tmp16) {
						F.line = 2690;
						if (s_156026[s_156026_Idx] != null) { s_156026[s_156026_Idx] = (s_156026[s_156026_Idx]).concat(a_156029[chckIndx(addInt(x_156174, 1), 0, (a_156029 != null ? a_156029.length : 0)+0-1)-0]); } else { s_156026[s_156026_Idx] = a_156029[chckIndx(addInt(x_156174, 1), 0, (a_156029 != null ? a_156029.length : 0)+0-1)-0].slice(); };
						}
						else {
							F.line = 2691;
						invalid_format_string_155939();
						}
						
						F.line = 2692;
						i_156033 = j_156161;
						break;
					default: 
						F.line = 2694;
						invalid_format_string_155939();
						break;
					}
					}
					else {
						F.line = 2696;
						if (s_156026[s_156026_Idx] != null) { addChar(s_156026[s_156026_Idx], formatstr_156027[chckIndx(i_156033, 0, (formatstr_156027 != null ? formatstr_156027.length : 0)+0-1)-0]); } else { s_156026[s_156026_Idx] = [formatstr_156027[chckIndx(i_156033, 0, (formatstr_156027 != null ? formatstr_156027.length : 0)+0-1)-0]]; };
						F.line = 2697;
						i_156033 = addInt(i_156033, 1);
					}
					
				}
		} while(false);
	framePtr = F.prev;

	
}

function nsuFormatVarargs(formatstr_156254, a_156256) {
	var result_156257 = [null];

	var F={procname:"strutils.format",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 2762;
		result_156257[0] = nimCopy(null, mnewString(0), NTI138);
		F.line = 2763;
		nsuAddf(result_156257, 0, formatstr_156254, a_156256);
	framePtr = F.prev;

	return result_156257[0];

}

function on_input_175259(cmsg_175261) {
	var F={procname:"game_of_knights.on_input",prev:framePtr,filename:"game_of_knights.nim",line:0};
	framePtr = F;
		F.line = 78;
		var moves_possible_175263 = [null];
		F.line = 79;
		var move_175264 = null;
		F.line = 80;
		var msg_str_175265 = cstrToNimstr(cmsg_175261);
		F.line = 81;
		var msg_175266 = nsuToUpperAsciiStr(msg_str_175265);
		F.line = 82;
		switch (current_state_175026[0]) {
		case 4:
			if (eqStrings(msg_175266, makeNimstrLit("Y"))) {
			F.line = 86;
			game_175025[0] = {m_type: NTI173102, board: [new Int32Array(5), new Int32Array(5), new Int32Array(5), new Int32Array(5), new Int32Array(5)], player_pos: [new Int32Array(2), new Int32Array(2), new Int32Array(2)], player_count: 0, players: null, current_player_number: 0, winner_player_number: 0};
			F.line = 87;
			on_load_175136();
			}
			else {
			if (eqStrings(msg_175266, makeNimstrLit("N"))) {
			F.line = 90;
			current_state_175026[0] = 5;
			}
			else {
				F.line = 92;
			send_172045((makeNimstrLit("\"") || []).concat(msg_175266 || [],makeNimstrLit("\" is not a recognized move. Try again.") || []));
			}
			}
			break;
		case 2:
			F.line = 94;
			set_possible_moves_167093(game_175025[0], moves_possible_175263, 0);
			if (contains_168602(moves_possible_175263[0], msg_175266)) {
			F.line = 96;
			send_172045((makeNimstrLit(">>") || []).concat(make_move_169023(game_175025[0], msg_175266) || []));
			F.line = 97;
			determine_winner_169223(game_175025[0]);
			if (is_over_169043(game_175025[0])) {
			F.line = 99;
			handle_end_175088(game_175025[0]);
			F.line = 100;
			current_state_175026[0] = 4;
			}
			else {
				F.line = 102;
				current_state_175026[0] = 3;
				F.line = 103;
				game_175025[0].current_player_number = next_player_number_168902(game_175025[0]);
				F.line = 104;
				show_turn_start_175116(game_175025[0]);
				F.line = 105;
				move_175264 = nimCopy(null, get_move_168691(current_player_168855(game_175025[0]), game_175025[0]), NTI138);
				F.line = 106;
				send_172045((makeNimstrLit(">>") || []).concat(make_move_169023(game_175025[0], move_175264) || []));
				F.line = 107;
				determine_winner_169223(game_175025[0]);
				if (is_over_169043(game_175025[0])) {
				F.line = 109;
				handle_end_175088(game_175025[0]);
				F.line = 110;
				current_state_175026[0] = 4;
				}
				else {
					F.line = 112;
					game_175025[0].current_player_number = next_player_number_168902(game_175025[0]);
					F.line = 113;
					show_turn_start_175116(game_175025[0]);
					F.line = 114;
					current_state_175026[0] = 2;
				}
				
			}
			
			}
			else {
				F.line = 116;
			send_172045((makeNimstrLit("\"") || []).concat(msg_175266 || [],makeNimstrLit("\" is not a recognized move. Try again.") || []));
			}
			
			break;
		case 1:
			F.line = 118;
++excHandler;
			try {
			F.line = 119;
			var lvl_175279 = nsuParseInt(msg_175266);
			if ((lvl_175279 < 1)) {
			F.line = 121;
			send_172045(makeNimstrLit("Too low. Try again."));
			}
			else {
			if ((10 < lvl_175279)) {
			F.line = 123;
			send_172045(makeNimstrLit("Too high. Try again."));
			}
			else {
				F.line = 125;
				setup_170023(game_175025[0], [{name: makeNimstrLit("White Knight"), m_type: NTI167025}, {name: makeNimstrLit("Black Knight"), depth: lvl_175279, m_type: NTI171151}]);
				F.line = 129;
				show_turn_start_175116(game_175025[0]);
				F.line = 130;
				current_state_175026[0] = 2;
			}
			}
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
			framePtr = F;
			F.line = 132;
			send_172045(nsuFormatVarargs(makeNimstrLit("Don\'t recognize \"$1\" as a number."), [nimCopy(null, msg_175266, NTI138)]));
			lastJSError = prevJSError;
			} finally {
			framePtr = F;
			}
			break;
		default: 
			F.line = 134;
			send_172045(makeNimstrLit("Internal error, reached an impossible state."));
			break;
		}
	framePtr = F.prev;

	
}
establish_terminal_on_input_function(on_input_175259);

function set_possible_moves_167055(self_167057, moves_167084) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 3478;
		var eHEX60gensym168742_168803 = null;
		F.line = 3481;
		eHEX60gensym168742_168803 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 244;
		eHEX60gensym168742_168803.message = nimCopy(null, makeNimstrLit("set_possible_moves(OrderedTable) must be overridden"), NTI138);
		F.line = 3474;
		eHEX60gensym168742_168803.parent = null;
		F.line = 244;
		raiseException(eHEX60gensym168742_168803, "FieldError");
	framePtr = F.prev;

	
}

function set_possible_moves_167085(self_167057, moves_167084) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 176;
		set_possible_moves_167055(self_167057, moves_167084);
	framePtr = F.prev;

	
}

function sys_fatal_24241(message_24245) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_24403 = null;
		F.line = 37;
		e_24403 = {m_type: NTI3686, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_24403.message = nimCopy(null, message_24245, NTI138);
		F.line = 39;
		raiseException(e_24403, "NilAccessError");
	framePtr = F.prev;

	
}

function chckNilDisp(p_24239, p_24239_Idx) {
		if ((p_24239 == null && p_24239_Idx == 0)) {
		sys_fatal_24241(makeNimstrLit("cannot dispatch; dispatcher is nil"));
		}
		

	
}

function convert_coord_to_string_173143(dest_173148) {
	var result_173149 = null;

	var F={procname:"knights.convert_coord_to_string",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 60;
		result_173149 = nimCopy(null, [], NTI138);
		F.line = 61;
		if (result_173149 != null) { addChar(result_173149, makeNimstrLit("ABCDEFGHIJ")[chckIndx(dest_173148[chckIndx(0, 0, (dest_173148 != null ? dest_173148.length : 0)+0-1)-0], 0, (makeNimstrLit("ABCDEFGHIJ") != null ? makeNimstrLit("ABCDEFGHIJ").length : 0)+0-1)-0]); } else { result_173149 = [makeNimstrLit("ABCDEFGHIJ")[chckIndx(dest_173148[chckIndx(0, 0, (dest_173148 != null ? dest_173148.length : 0)+0-1)-0], 0, (makeNimstrLit("ABCDEFGHIJ") != null ? makeNimstrLit("ABCDEFGHIJ").length : 0)+0-1)-0]]; };
		F.line = 62;
		if (result_173149 != null) { result_173149 = (result_173149).concat(cstrToNimstr((dest_173148[chckIndx(1, 0, (dest_173148 != null ? dest_173148.length : 0)+0-1)-0])+"")); } else { result_173149 = cstrToNimstr((dest_173148[chckIndx(1, 0, (dest_173148 != null ? dest_173148.length : 0)+0-1)-0])+"").slice(); };
	framePtr = F.prev;

	return result_173149;

}

function sys_fatal_15062(message_15066) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_15203 = null;
		F.line = 37;
		e_15203 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_15203.message = nimCopy(null, message_15066, NTI138);
		F.line = 39;
		raiseException(e_15203, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_15058(msg_15060) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_15062(msg_15060);
	framePtr = F.prev;

	
}

function failed_assert_impl_15266(msg_15268) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_15058(msg_15268);
	framePtr = F.prev;

	
}

function set_possible_moves_173298(self_173300, moves_173303, moves_173303_Idx) {
	var F={procname:"knights.set_possible_moves",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 103;
		var valid_dest_173323 = [];
		F.line = 104;
		var dest_173327 = new Int32Array(2);
		F.line = 105;
		var cur_173328 = nimCopy(null, self_173300.player_pos[chckIndx(self_173300.current_player_number, 0, (self_173300.player_pos != null ? self_173300.player_pos.length : 0)+0-1)-0], NTI173112);
		L1: do {
			F.line = 106;
			var jump_173389 = new Int32Array(2);
			F.line = 17;
			var i_175397 = 0;
			if ((i_175397 <= 7)) {
			L2: do {
				F.line = 19;
					L3: while (true) {
					if (!true) break L3;
						F.line = 106;
						nimCopy(jump_173389, directions_173090[chckIndx(i_175397, 0, (directions_173090 != null ? directions_173090.length : 0)+0-1)-0], NTI173057);
						F.line = 107;
						nimCopy(dest_173327, [addInt(cur_173328[chckIndx(0, 0, (cur_173328 != null ? cur_173328.length : 0)+0-1)-0], jump_173389[chckIndx(0, 0, (jump_173389 != null ? jump_173389.length : 0)+0-1)-0]), addInt(cur_173328[chckIndx(1, 0, (cur_173328 != null ? cur_173328.length : 0)+0-1)-0], jump_173389[chckIndx(1, 0, (jump_173389 != null ? jump_173389.length : 0)+0-1)-0])], NTI173390);
						if ((dest_173327[chckIndx(0, 0, (dest_173327 != null ? dest_173327.length : 0)+0-1)-0] < 5)) {
						if ((dest_173327[chckIndx(1, 0, (dest_173327 != null ? dest_173327.length : 0)+0-1)-0] < 5)) {
						if ((0 <= dest_173327[chckIndx(0, 0, (dest_173327 != null ? dest_173327.length : 0)+0-1)-0])) {
						if ((0 <= dest_173327[chckIndx(1, 0, (dest_173327 != null ? dest_173327.length : 0)+0-1)-0])) {
						if ((self_173300.board[chckIndx(dest_173327[chckIndx(0, 0, (dest_173327 != null ? dest_173327.length : 0)+0-1)-0], 0, (self_173300.board != null ? self_173300.board.length : 0)+0-1)-0][chckIndx(dest_173327[chckIndx(1, 0, (dest_173327 != null ? dest_173327.length : 0)+0-1)-0], 0, (self_173300.board[chckIndx(dest_173327[chckIndx(0, 0, (dest_173327 != null ? dest_173327.length : 0)+0-1)-0], 0, (self_173300.board != null ? self_173300.board.length : 0)+0-1)-0] != null ? self_173300.board[chckIndx(dest_173327[chckIndx(0, 0, (dest_173327 != null ? dest_173327.length : 0)+0-1)-0], 0, (self_173300.board != null ? self_173300.board.length : 0)+0-1)-0].length : 0)+0-1)-0] == 0)) {
						F.line = 113;
						var Tmp4 = nimCopy(null, dest_173327, NTI173326);
						if (valid_dest_173323 != null) { valid_dest_173323.push(Tmp4); } else { valid_dest_173323 = [Tmp4]; };
						}
						
						}
						
						}
						
						}
						
						}
						
						if ((7 <= i_175397)) {
						F.line = 21;
						break L2;
						}
						
						F.line = 22;
						i_175397 = addInt(i_175397, 1);
					}
			} while(false);
			}
			
		} while(false);
		L5: do {
			F.line = 114;
			var dest_173614 = new Int32Array(2);
			F.line = 184;
			var i_175401 = 0;
			F.line = 185;
			var l_175402 = (valid_dest_173323 != null ? valid_dest_173323.length : 0);
			L6: do {
				F.line = 186;
					L7: while (true) {
					if (!(i_175401 < l_175402)) break L7;
						F.line = 114;
						nimCopy(dest_173614, valid_dest_173323[chckIndx(i_175401, 0, (valid_dest_173323 != null ? valid_dest_173323.length : 0)+0-1)-0], NTI173307);
						F.line = 115;
						if (moves_173303[moves_173303_Idx] != null) { moves_173303[moves_173303_Idx].push(convert_coord_to_string_173143(dest_173614)); } else { moves_173303[moves_173303_Idx] = [convert_coord_to_string_173143(dest_173614)]; };
						F.line = 188;
						i_175401 = addInt(i_175401, 1);
						if (!(((valid_dest_173323 != null ? valid_dest_173323.length : 0) == l_175402))) {
						F.line = 189;
						failed_assert_impl_15266(makeNimstrLit("C:\\Users\\Peter\\scoop\\apps\\nim\\current\\lib\\system\\iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function set_possible_moves_167087(self_167089, moves_167092, moves_167092_Idx) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 238;
		moves_167092[moves_167092_Idx] = nimCopy(null, [], NTI168714);
	framePtr = F.prev;

	
}

function set_possible_moves_167093(self_167089, moves_167092, moves_167092_Idx) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 510;
		chckNilDisp(self_167089);
		if (isObj(self_167089.m_type, NTI173102)) {
		F.line = 177;
		set_possible_moves_173298(self_167089, moves_167092, moves_167092_Idx);
		}
		else {
		if (isObj(self_167089.m_type, NTI167018)) {
		F.line = 177;
		set_possible_moves_167087(self_167089, moves_167092, moves_167092_Idx);
		}
		else {
		if (isObj(self_167089.m_type, NTI167018)) {
		F.line = 177;
		set_possible_moves_167087(self_167089, moves_167092, moves_167092_Idx);
		}
		}}
	framePtr = F.prev;

	
}

function status_173747(self_173749) {
	var result_173750 = null;

	var F={procname:"knights.status",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 144;
		result_173750 = nimCopy(null, makeNimstrLit("    "), NTI138);
		L1: do {
			F.line = 145;
			var n_173758 = 0;
			F.line = 2689;
			var res_175411 = 0;
			L2: do {
				F.line = 2690;
					L3: while (true) {
					if (!(res_175411 <= 4)) break L3;
						F.line = 145;
						n_173758 = res_175411;
						F.line = 146;
						if (result_173750 != null) { result_173750 = (result_173750).concat((makeNimstrLit(" ") || []).concat(cstrToNimstr((n_173758)+"") || [])); } else { result_173750 = (makeNimstrLit(" ") || []).concat(cstrToNimstr((n_173758)+"") || []).slice(); };
						F.line = 2692;
						res_175411 = addInt(res_175411, 1);
					}
			} while(false);
		} while(false);
		F.line = 147;
		if (result_173750 != null) { result_173750 = (result_173750).concat(makeNimstrLit("\x0A")); } else { result_173750 = makeNimstrLit("\x0A"); };
		L4: do {
			F.line = 148;
			var x_173766 = 0;
			F.line = 2689;
			var res_175423 = 0;
			L5: do {
				F.line = 2690;
					L6: while (true) {
					if (!(res_175423 <= 4)) break L6;
						F.line = 148;
						x_173766 = res_175423;
						F.line = 149;
						if (result_173750 != null) { result_173750 = (result_173750).concat((makeNimstrLit("  ") || []).concat([makeNimstrLit("ABCDEFGHIJ")[chckIndx(x_173766, 0, (makeNimstrLit("ABCDEFGHIJ") != null ? makeNimstrLit("ABCDEFGHIJ").length : 0)+0-1)-0]],makeNimstrLit(" ") || [])); } else { result_173750 = (makeNimstrLit("  ") || []).concat([makeNimstrLit("ABCDEFGHIJ")[chckIndx(x_173766, 0, (makeNimstrLit("ABCDEFGHIJ") != null ? makeNimstrLit("ABCDEFGHIJ").length : 0)+0-1)-0]],makeNimstrLit(" ") || []).slice(); };
						L7: do {
							F.line = 150;
							var y_173774 = 0;
							F.line = 2689;
							var res_175418 = 0;
							L8: do {
								F.line = 2690;
									L9: while (true) {
									if (!(res_175418 <= 4)) break L9;
										F.line = 150;
										y_173774 = res_175418;
										F.line = 151;
										if (result_173750 != null) { result_173750 = (result_173750).concat((makeNimstrLit(" ") || []).concat([makeNimstrLit(".WBX")[chckIndx(self_173749.board[chckIndx(x_173766, 0, (self_173749.board != null ? self_173749.board.length : 0)+0-1)-0][chckIndx(y_173774, 0, (self_173749.board[chckIndx(x_173766, 0, (self_173749.board != null ? self_173749.board.length : 0)+0-1)-0] != null ? self_173749.board[chckIndx(x_173766, 0, (self_173749.board != null ? self_173749.board.length : 0)+0-1)-0].length : 0)+0-1)-0], 0, (makeNimstrLit(".WBX") != null ? makeNimstrLit(".WBX").length : 0)+0-1)-0]])); } else { result_173750 = (makeNimstrLit(" ") || []).concat([makeNimstrLit(".WBX")[chckIndx(self_173749.board[chckIndx(x_173766, 0, (self_173749.board != null ? self_173749.board.length : 0)+0-1)-0][chckIndx(y_173774, 0, (self_173749.board[chckIndx(x_173766, 0, (self_173749.board != null ? self_173749.board.length : 0)+0-1)-0] != null ? self_173749.board[chckIndx(x_173766, 0, (self_173749.board != null ? self_173749.board.length : 0)+0-1)-0].length : 0)+0-1)-0], 0, (makeNimstrLit(".WBX") != null ? makeNimstrLit(".WBX").length : 0)+0-1)-0]]).slice(); };
										F.line = 2692;
										res_175418 = addInt(res_175418, 1);
									}
							} while(false);
						} while(false);
						F.line = 152;
						if (result_173750 != null) { result_173750 = (result_173750).concat(makeNimstrLit("\x0A")); } else { result_173750 = makeNimstrLit("\x0A"); };
						F.line = 2692;
						res_175423 = addInt(res_175423, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_173750;

}

function is_over_169026(self_169028) {
	var result_169029 = false;

	var F={procname:"turn_based_game.is_over",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 289;
		result_169029 = !((self_169028.winner_player_number == 0));
	framePtr = F.prev;

	return result_169029;

}

function is_over_169043(self_169028) {
	var result_169045 = false;

	var F={procname:"turn_based_game.is_over",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 288;
		result_169045 = is_over_169026(self_169028);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_169045;

}

function status_167095(self_167097) {
	var result_169049 = null;

	var F={procname:"turn_based_game.status",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (is_over_169043(self_167097)) {
		F.line = 298;
		result_169049 = nimCopy(null, makeNimstrLit("game is over"), NTI138);
		break BeforeRet;
		}
		else {
			F.line = 300;
			result_169049 = nimCopy(null, makeNimstrLit("game is active"), NTI138);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_169049;

}

function status_167098(self_167097) {
	var result_169049 = null;

	var F={procname:"turn_based_game.status",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 510;
		chckNilDisp(self_167097);
		if (isObj(self_167097.m_type, NTI173102)) {
		F.line = 178;
		result_169049 = status_173747(self_167097);
		break BeforeRet;
		}
		else {
		if (isObj(self_167097.m_type, NTI167018)) {
		F.line = 178;
		result_169049 = status_167095(self_167097);
		break BeforeRet;
		}
		else {
		if (isObj(self_167097.m_type, NTI167018)) {
		F.line = 178;
		result_169049 = status_167095(self_167097);
		break BeforeRet;
		}
		}}
	} while (false);
	framePtr = F.prev;

	return result_169049;

}

function display_167100(self_167102, msg_167103) {
	var F={procname:"turn_based_game.display",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 188;
		rawEcho(msg_167103);
	framePtr = F.prev;

	
}

function display_167121(self_167102, msg_167103) {
	var F={procname:"turn_based_game.display",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 187;
		display_167100(self_167102, msg_167103);
	framePtr = F.prev;

	
}

function move_counter_173687(self_173689, player_number_173690) {
	var result_173691 = 0;

	var F={procname:"knights.move_counter",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 125;
		var save_player_173692 = self_173689.current_player_number;
		F.line = 126;
		var poss_moves_173709 = [[]];
		F.line = 127;
		self_173689.current_player_number = player_number_173690;
		F.line = 128;
		set_possible_moves_167093(self_173689, poss_moves_173709, 0);
		F.line = 129;
		result_173691 = (poss_moves_173709[0] != null ? poss_moves_173709[0].length : 0);
		F.line = 130;
		self_173689.current_player_number = save_player_173692;
	framePtr = F.prev;

	return result_173691;

}

function next_player_number_168880(self_168882) {
	var result_168883 = 0;

	var F={procname:"turn_based_game.next_player_number",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 265;
		result_168883 = addInt((self_168882.current_player_number % self_168882.player_count), 1);
	framePtr = F.prev;

	return result_168883;

}

function next_player_number_168902(self_168882) {
	var result_168904 = 0;

	var F={procname:"turn_based_game.next_player_number",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 264;
		result_168904 = next_player_number_168880(self_168882);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_168904;

}

function scoring_173801(self_173803) {
	var result_173804 = 0.0;

	var F={procname:"knights.scoring",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((move_counter_173687(self_173803, self_173803.current_player_number) == 0)) {
		F.line = 167;
		result_173804 = -1.0000000000000000e+003;
		break BeforeRet;
		}
		
		if ((move_counter_173687(self_173803, next_player_number_168902(self_173803)) == 0)) {
		F.line = 169;
		result_173804 = 1.0000000000000000e+003;
		break BeforeRet;
		}
		
		F.line = 171;
		var my_move_score_173805 = (move_counter_173687(self_173803, self_173803.current_player_number) * 1.0000000000000000e+002);
		F.line = 172;
		var opp_move_score_173806 = (move_counter_173687(self_173803, next_player_number_168902(self_173803)) * 1.0000000000000000e+002);
		F.line = 173;
		result_173804 = (my_move_score_173805 - opp_move_score_173806);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_173804;

}

function scoring_169225(self_169227) {
	var result_169228 = 0.0;

	var F={procname:"turn_based_game.scoring",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 3478;
		var eHEX60gensym169231_169403 = null;
		F.line = 3481;
		eHEX60gensym169231_169403 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 321;
		eHEX60gensym169231_169403.message = nimCopy(null, makeNimstrLit("scoring() must be overridden (if used)"), NTI138);
		F.line = 3474;
		eHEX60gensym169231_169403.parent = null;
		F.line = 321;
		raiseException(eHEX60gensym169231_169403, "FieldError");
	framePtr = F.prev;

	return result_169228;

}

function scoring_169423(self_169227) {
	var result_169425 = 0.0;

	var F={procname:"turn_based_game.scoring",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 510;
		chckNilDisp(self_169227);
		if (isObj(self_169227.m_type, NTI173102)) {
		F.line = 316;
		result_169425 = scoring_173801(self_169227);
		break BeforeRet;
		}
		else {
		if (isObj(self_169227.m_type, NTI167018)) {
		F.line = 316;
		result_169425 = scoring_169225(self_169227);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_169425;

}

function abs_12649(x_12651) {
		var Tmp1;

	var result_12652 = 0.0;

		if ((x_12651 < 0.0)) {
		Tmp1 = -(x_12651);
		}
		else {
		Tmp1 = x_12651;
		}
		
		result_12652 = Tmp1;

	return result_12652;

}

function get_state_173820(self_173822) {
	var result_173823 = null;

	var F={procname:"knights.get_state",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		if ((self_173822.current_player_number == 1)) {
		F.line = 178;
		result_173823 = nimCopy(null, makeNimstrLit("1"), NTI138);
		}
		else {
			F.line = 180;
			result_173823 = nimCopy(null, makeNimstrLit("2"), NTI138);
		}
		
		L1: do {
			F.line = 181;
			var row_173884 = new Int32Array(5);
			F.line = 15;
			var colontmp__175444 = [new Int32Array(5), new Int32Array(5), new Int32Array(5), new Int32Array(5), new Int32Array(5)];
			F.line = 181;
			nimCopy(colontmp__175444, self_173822.board, NTI173106);
			F.line = 17;
			var i_175449 = 0;
			if ((i_175449 <= 4)) {
			L2: do {
				F.line = 19;
					L3: while (true) {
					if (!true) break L3;
						F.line = 181;
						nimCopy(row_173884, colontmp__175444[chckIndx(i_175449, 0, (colontmp__175444 != null ? colontmp__175444.length : 0)+0-1)-0], NTI173105);
						L4: do {
							F.line = 182;
							var column_173930 = 0;
							F.line = 17;
							var i_175442 = 0;
							if ((i_175442 <= 4)) {
							L5: do {
								F.line = 19;
									L6: while (true) {
									if (!true) break L6;
										F.line = 182;
										column_173930 = row_173884[chckIndx(i_175442, 0, (row_173884 != null ? row_173884.length : 0)+0-1)-0];
										F.line = 183;
										if (result_173823 != null) { addChar(result_173823, makeNimstrLit(".WBX")[chckIndx(column_173930, 0, (makeNimstrLit(".WBX") != null ? makeNimstrLit(".WBX").length : 0)+0-1)-0]); } else { result_173823 = [makeNimstrLit(".WBX")[chckIndx(column_173930, 0, (makeNimstrLit(".WBX") != null ? makeNimstrLit(".WBX").length : 0)+0-1)-0]]; };
										if ((4 <= i_175442)) {
										F.line = 21;
										break L5;
										}
										
										F.line = 22;
										i_175442 = addInt(i_175442, 1);
									}
							} while(false);
							}
							
						} while(false);
						if ((4 <= i_175449)) {
						F.line = 21;
						break L2;
						}
						
						F.line = 22;
						i_175449 = addInt(i_175449, 1);
					}
			} while(false);
			}
			
		} while(false);
	framePtr = F.prev;

	return result_173823;

}

function get_state_169426(self_169428) {
	var result_169429 = null;

	var F={procname:"turn_based_game.get_state",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 3478;
		var eHEX60gensym169432_169603 = null;
		F.line = 3481;
		eHEX60gensym169432_169603 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 330;
		eHEX60gensym169432_169603.message = nimCopy(null, makeNimstrLit("get_state() must be overridden (if used)"), NTI138);
		F.line = 3474;
		eHEX60gensym169432_169603.parent = null;
		F.line = 330;
		raiseException(eHEX60gensym169432_169603, "FieldError");
	framePtr = F.prev;

	return result_169429;

}

function get_state_169623(self_169428) {
	var result_169625 = null;

	var F={procname:"turn_based_game.get_state",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 510;
		chckNilDisp(self_169428);
		if (isObj(self_169428.m_type, NTI173102)) {
		F.line = 324;
		result_169625 = get_state_173820(self_169428);
		break BeforeRet;
		}
		else {
		if (isObj(self_169428.m_type, NTI167018)) {
		F.line = 324;
		result_169625 = get_state_169426(self_169428);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_169625;

}

function convert_string_to_coord_173163(dest_173165) {
	var result_173169 = new Int32Array(2);

	var F={procname:"knights.convert_string_to_coord",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 68;
		var x_173170 = subInt(((dest_173165[chckIndx(0, 0, (dest_173165 != null ? dest_173165.length : 0)+0-1)-0])|0), 65);
		F.line = 69;
		var y_173171 = nsuParseInt(nimCharToStr(dest_173165[chckIndx(1, 0, (dest_173165 != null ? dest_173165.length : 0)+0-1)-0]));
		F.line = 70;
		nimCopy(result_173169, [x_173170, y_173171], NTI173172);
	framePtr = F.prev;

	return result_173169;

}

function place_player_173202(self_173204, knight_173205, coord_173209) {
	var F={procname:"knights.place_player",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 75;
		var src_173210 = nimCopy(null, self_173204.player_pos[chckIndx(knight_173205, 0, (self_173204.player_pos != null ? self_173204.player_pos.length : 0)+0-1)-0], NTI173112);
		F.line = 76;
		self_173204.board[chckIndx(src_173210[chckIndx(0, 0, (src_173210 != null ? src_173210.length : 0)+0-1)-0], 0, (self_173204.board != null ? self_173204.board.length : 0)+0-1)-0][chckIndx(src_173210[chckIndx(1, 0, (src_173210 != null ? src_173210.length : 0)+0-1)-0], 0, (self_173204.board[chckIndx(src_173210[chckIndx(0, 0, (src_173210 != null ? src_173210.length : 0)+0-1)-0], 0, (self_173204.board != null ? self_173204.board.length : 0)+0-1)-0] != null ? self_173204.board[chckIndx(src_173210[chckIndx(0, 0, (src_173210 != null ? src_173210.length : 0)+0-1)-0], 0, (self_173204.board != null ? self_173204.board.length : 0)+0-1)-0].length : 0)+0-1)-0] = 3;
		F.line = 77;
		self_173204.board[chckIndx(coord_173209[chckIndx(0, 0, (coord_173209 != null ? coord_173209.length : 0)+0-1)-0], 0, (self_173204.board != null ? self_173204.board.length : 0)+0-1)-0][chckIndx(coord_173209[chckIndx(1, 0, (coord_173209 != null ? coord_173209.length : 0)+0-1)-0], 0, (self_173204.board[chckIndx(coord_173209[chckIndx(0, 0, (coord_173209 != null ? coord_173209.length : 0)+0-1)-0], 0, (self_173204.board != null ? self_173204.board.length : 0)+0-1)-0] != null ? self_173204.board[chckIndx(coord_173209[chckIndx(0, 0, (coord_173209 != null ? coord_173209.length : 0)+0-1)-0], 0, (self_173204.board != null ? self_173204.board.length : 0)+0-1)-0].length : 0)+0-1)-0] = knight_173205;
		F.line = 78;
		nimCopy(self_173204.player_pos[chckIndx(knight_173205, 0, (self_173204.player_pos != null ? self_173204.player_pos.length : 0)+0-1)-0], coord_173209, NTI173208);
	framePtr = F.prev;

	
}

function place_player_173224(self_173204, knight_173205, coord_173209) {
	var F={procname:"knights.place_player",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 74;
		place_player_173202(self_173204, knight_173205, coord_173209);
	framePtr = F.prev;

	
}

function make_move_173665(self_173667, move_173668) {
	var result_173669 = null;

	var F={procname:"knights.make_move",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 119;
		var dest_173670 = convert_string_to_coord_173163(move_173668);
		F.line = 120;
		place_player_173224(self_173667, self_173667.current_player_number, dest_173670);
		F.line = 121;
		result_173669 = nimCopy(null, nsuFormatVarargs(makeNimstrLit("Jumped to $#."), [nimCopy(null, move_173668, NTI138)]), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_173669;

}

function make_move_168923(self_168925, move_168926) {
	var result_168927 = null;

	var F={procname:"turn_based_game.make_move",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 3478;
		var eHEX60gensym168930_169003 = null;
		F.line = 3481;
		eHEX60gensym168930_169003 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 285;
		eHEX60gensym168930_169003.message = nimCopy(null, makeNimstrLit("make_move() must be overridden"), NTI138);
		F.line = 3474;
		eHEX60gensym168930_169003.parent = null;
		F.line = 285;
		raiseException(eHEX60gensym168930_169003, "FieldError");
	framePtr = F.prev;

	return result_168927;

}

function make_move_169023(self_168925, move_168926) {
	var result_169025 = null;

	var F={procname:"turn_based_game.make_move",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 510;
		chckNilDisp(self_168925);
		if (isObj(self_168925.m_type, NTI173102)) {
		F.line = 277;
		result_169025 = make_move_173665(self_168925, move_168926);
		break BeforeRet;
		}
		else {
		if (isObj(self_168925.m_type, NTI167018)) {
		F.line = 277;
		result_169025 = make_move_168923(self_168925, move_168926);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_169025;

}

function finish_turn_168905(self_168907) {
	var F={procname:"turn_based_game.finish_turn",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 274;
		self_168907.current_player_number = next_player_number_168902(self_168907);
	framePtr = F.prev;

	
}

function finish_turn_168921(self_168907) {
	var F={procname:"turn_based_game.finish_turn",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 269;
		finish_turn_168905(self_168907);
	framePtr = F.prev;

	
}

function nsuStartsWith(s_152326, prefix_152327) {
						var Tmp3;

	var result_152328 = false;

	var F={procname:"strutils.startsWith",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1542;
		var i_152330 = 0;
		L1: do {
			F.line = 1543;
				L2: while (true) {
				if (!true) break L2;
					if (((prefix_152327 != null ? prefix_152327.length : 0) <= i_152330)) {
					F.line = 1544;
					result_152328 = true;
					break BeforeRet;
					}
					
						if (((s_152326 != null ? s_152326.length : 0) <= i_152330)) Tmp3 = true; else {							Tmp3 = !((s_152326[chckIndx(i_152330, 0, (s_152326 != null ? s_152326.length : 0)+0-1)-0] == prefix_152327[chckIndx(i_152330, 0, (prefix_152327 != null ? prefix_152327.length : 0)+0-1)-0]));						}					if (Tmp3) {
					F.line = 1545;
					result_152328 = false;
					break BeforeRet;
					}
					
					F.line = 1546;
					i_152330 = addInt(i_152330, 1);
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_152328;

}

function nsuFindChar(s_153016, sub_153017, start_153018, last_153019) {
		var Tmp1;

	var result_153021 = 0;

	var F={procname:"strutils.find",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1867;
		if ((last_153019 == 0)) {
		Tmp1 = (s_153016 != null ? (s_153016.length-1) : -1);
		}
		else {
		Tmp1 = last_153019;
		}
		
		var last_153023 = Tmp1;
		L2: do {
			F.line = 1879;
			var i_153406 = 0;
			F.line = 2699;
			var colontmp__175476 = 0;
			F.line = 1879;
			colontmp__175476 = start_153018;
			F.line = 2710;
			var res_175477 = colontmp__175476;
			L3: do {
				F.line = 2711;
					L4: while (true) {
					if (!(res_175477 <= last_153023)) break L4;
						F.line = 1879;
						i_153406 = res_175477;
						if ((sub_153017 == s_153016[chckIndx(i_153406, 0, (s_153016 != null ? s_153016.length : 0)+0-1)-0])) {
						F.line = 1880;
						result_153021 = i_153406;
						break BeforeRet;
						}
						
						F.line = 2713;
						res_175477 = addInt(res_175477, 1);
					}
			} while(false);
		} while(false);
		F.line = 1881;
		result_153021 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_153021;

}

function find_173998(a_174002, item_174003) {
	var result_174004 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 3169;
			var i_174035 = 0;
			F.line = 3;
			var i_175484 = 0;
			L2: do {
				F.line = 4;
					L3: while (true) {
					if (!(i_175484 < (a_174002 != null ? a_174002.length : 0))) break L3;
						F.line = 3169;
						i_174035 = a_174002[chckIndx(i_175484, 0, (a_174002 != null ? a_174002.length : 0)+0-1)-0];
						if ((i_174035 == item_174003)) {
						F.line = 3170;
						break BeforeRet;
						}
						
						F.line = 3171;
						result_174004 = addInt(result_174004, 1);
						F.line = 6;
						i_175484 = addInt(i_175484, 1);
					}
			} while(false);
		} while(false);
		F.line = 3172;
		result_174004 = -1;
	} while (false);
	framePtr = F.prev;

	return result_174004;

}

function contains_173991(a_173995, item_173996) {
	var result_173997 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 3186;
		result_173997 = (0 <= find_173998(a_173995, item_173996));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_173997;

}

function restore_state_173959(self_173961, state_173962) {
	var F={procname:"knights.restore_state",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 187;
		var i_173963 = 0;
		F.line = 188;
		var e_173964 = 0;
		if (nsuStartsWith(state_173962, makeNimstrLit("1"))) {
		F.line = 190;
		self_173961.current_player_number = 1;
		}
		else {
			F.line = 192;
			self_173961.current_player_number = 2;
		}
		
		L1: do {
			F.line = 193;
			var x_173972 = 0;
			F.line = 2689;
			var res_175460 = 0;
			L2: do {
				F.line = 2690;
					L3: while (true) {
					if (!(res_175460 <= 4)) break L3;
						F.line = 193;
						x_173972 = res_175460;
						L4: do {
							F.line = 194;
							var y_173980 = 0;
							F.line = 2689;
							var res_175455 = 0;
							L5: do {
								F.line = 2690;
									L6: while (true) {
									if (!(res_175455 <= 4)) break L6;
										F.line = 194;
										y_173980 = res_175455;
										F.line = 195;
										i_173963 = addInt(addInt(mulInt(x_173972, 5), y_173980), 1);
										F.line = 196;
										e_173964 = nsuFindChar(makeNimstrLit(".WBX"), state_173962[chckIndx(i_173963, 0, (state_173962 != null ? state_173962.length : 0)+0-1)-0], 0, 0);
										F.line = 197;
										self_173961.board[chckIndx(x_173972, 0, (self_173961.board != null ? self_173961.board.length : 0)+0-1)-0][chckIndx(y_173980, 0, (self_173961.board[chckIndx(x_173972, 0, (self_173961.board != null ? self_173961.board.length : 0)+0-1)-0] != null ? self_173961.board[chckIndx(x_173972, 0, (self_173961.board != null ? self_173961.board.length : 0)+0-1)-0].length : 0)+0-1)-0] = e_173964;
										if (contains_173991([1, 2], e_173964)) {
										F.line = 199;
										self_173961.player_pos[chckIndx(e_173964, 0, (self_173961.player_pos != null ? self_173961.player_pos.length : 0)+0-1)-0][chckIndx(0, 0, (self_173961.player_pos[chckIndx(e_173964, 0, (self_173961.player_pos != null ? self_173961.player_pos.length : 0)+0-1)-0] != null ? self_173961.player_pos[chckIndx(e_173964, 0, (self_173961.player_pos != null ? self_173961.player_pos.length : 0)+0-1)-0].length : 0)+0-1)-0] = x_173972;
										F.line = 200;
										self_173961.player_pos[chckIndx(e_173964, 0, (self_173961.player_pos != null ? self_173961.player_pos.length : 0)+0-1)-0][chckIndx(1, 0, (self_173961.player_pos[chckIndx(e_173964, 0, (self_173961.player_pos != null ? self_173961.player_pos.length : 0)+0-1)-0] != null ? self_173961.player_pos[chckIndx(e_173964, 0, (self_173961.player_pos != null ? self_173961.player_pos.length : 0)+0-1)-0].length : 0)+0-1)-0] = y_173980;
										}
										
										F.line = 2692;
										res_175455 = addInt(res_175455, 1);
									}
							} while(false);
						} while(false);
						F.line = 2692;
						res_175460 = addInt(res_175460, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function restore_state_169626(self_169628, state_169629) {
	var F={procname:"turn_based_game.restore_state",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 3478;
		var eHEX60gensym169632_169803 = null;
		F.line = 3481;
		eHEX60gensym169632_169803 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 338;
		eHEX60gensym169632_169803.message = nimCopy(null, makeNimstrLit("restore_state() must be overridden (if used)"), NTI138);
		F.line = 3474;
		eHEX60gensym169632_169803.parent = null;
		F.line = 338;
		raiseException(eHEX60gensym169632_169803, "FieldError");
	framePtr = F.prev;

	
}

function restore_state_169823(self_169628, state_169629) {
	var F={procname:"turn_based_game.restore_state",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 510;
		chckNilDisp(self_169628);
		if (isObj(self_169628.m_type, NTI173102)) {
		F.line = 333;
		restore_state_173959(self_169628, state_169629);
		}
		else {
		if (isObj(self_169628.m_type, NTI167018)) {
		F.line = 333;
		restore_state_169626(self_169628, state_169629);
		}
		}
	framePtr = F.prev;

	
}

function negamax_core_171042(game_171045, game_171045_Idx, ai_choice_171047, ai_choice_171047_Idx, depth_171048, orig_depth_171049, alpha_in_171050, beta_in_171051) {
			var Tmp1;
			var Tmp2;

	var result_171052 = 0.0;

	var F={procname:"negamax.negamax_core",prev:framePtr,filename:"negamax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 112;
		var possible_moves_171069 = [[]];
		F.line = 113;
		var starting_state_171070 = null;
		F.line = 114;
		var move_alpha_171071 = 0.0;
		F.line = 115;
		var alpha_171072 = alpha_in_171050;
		F.line = 116;
		var beta_171073 = beta_in_171051;
		F.line = 119;
		set_possible_moves_167093(game_171045[game_171045_Idx], possible_moves_171069, 0);
			if ((depth_171048 == 0)) Tmp2 = true; else {				Tmp2 = is_over_169043(game_171045[game_171045_Idx]);			}			if (Tmp2) Tmp1 = true; else {				Tmp1 = ((possible_moves_171069[0] != null ? possible_moves_171069[0].length : 0) == 0);			}		if (Tmp1) {
		F.line = 124;
		var score_171080 = scoring_169423(game_171045[game_171045_Idx]);
		if ((score_171080 == 0.0)) {
		F.line = 127;
		result_171052 = score_171080;
		break BeforeRet;
		}
		else {
			F.line = 129;
			result_171052 = (score_171080 - (((1.0000000000000000e-002 * depth_171048) * abs_12649(score_171080)) / score_171080));
			break BeforeRet;
		}
		
		}
		
		F.line = 133;
		starting_state_171070 = nimCopy(null, get_state_169623(game_171045[game_171045_Idx]), NTI138);
		F.line = 138;
		var best_move_171081 = nimCopy(null, possible_moves_171069[0][chckIndx(0, 0, (possible_moves_171069[0] != null ? possible_moves_171069[0].length : 0)+0-1)-0], NTI138);
		F.line = 139;
		var best_value_171082 = -Infinity;
		L3: do {
			F.line = 141;
			var move_171089 = null;
			F.line = 184;
			var i_175431 = 0;
			F.line = 185;
			var l_175432 = (possible_moves_171069[0] != null ? possible_moves_171069[0].length : 0);
			L4: do {
				F.line = 186;
					L5: while (true) {
					if (!(i_175431 < l_175432)) break L5;
						F.line = 141;
						move_171089 = possible_moves_171069[0][chckIndx(i_175431, 0, (possible_moves_171069[0] != null ? possible_moves_171069[0].length : 0)+0-1)-0];
						F.line = 145;
						make_move_169023(game_171045[game_171045_Idx], move_171089);
						F.line = 146;
						finish_turn_168921(game_171045[game_171045_Idx]);
						F.line = 150;
						move_alpha_171071 = -(negamax_core_171042(game_171045, game_171045_Idx, ai_choice_171047, ai_choice_171047_Idx, subInt(depth_171048, 1), orig_depth_171049, -(beta_171073), -(alpha_171072)));
						F.line = 159;
						restore_state_169823(game_171045[game_171045_Idx], starting_state_171070);
						if ((best_value_171082 < move_alpha_171071)) {
						F.line = 164;
						best_value_171082 = move_alpha_171071;
						F.line = 165;
						best_move_171081 = nimCopy(null, move_171089, NTI138);
						}
						
						if ((alpha_171072 < move_alpha_171071)) {
						F.line = 167;
						alpha_171072 = move_alpha_171071;
						if ((depth_171048 == orig_depth_171049)) {
						F.line = 169;
						ai_choice_171047[ai_choice_171047_Idx] = nimCopy(null, best_move_171081, NTI138);
						}
						
						if ((beta_171073 <= alpha_171072)) {
						F.line = 171;
						break L3;
						}
						
						}
						
						F.line = 188;
						i_175431 = addInt(i_175431, 1);
						if (!(((possible_moves_171069[0] != null ? possible_moves_171069[0].length : 0) == l_175432))) {
						F.line = 189;
						failed_assert_impl_15266(makeNimstrLit("C:\\Users\\Peter\\scoop\\apps\\nim\\current\\lib\\system\\iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 173;
		result_171052 = best_value_171082;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_171052;

}

function negamax_171103(game_171106, game_171106_Idx, depth_171107) {
	var result_171108 = null;

	var F={procname:"negamax.negamax",prev:framePtr,filename:"negamax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 188;
		var alpha_171109 = 0.0;
		F.line = 189;
		var beta_171110 = 0.0;
		F.line = 190;
		var ai_choice_171111 = [null];
		F.line = 191;
		var possible_moves_171128 = [[]];
		F.line = 193;
		alpha_171109 = -Infinity;
		F.line = 194;
		beta_171110 = Infinity;
		F.line = 198;
		set_possible_moves_167093(game_171106[game_171106_Idx], possible_moves_171128, 0);
		if (((possible_moves_171128[0] != null ? possible_moves_171128[0].length : 0) == 0)) {
		F.line = 200;
		result_171108 = nimCopy(null, [], NTI138);
		break BeforeRet;
		}
		
		F.line = 201;
		ai_choice_171111[0] = nimCopy(null, possible_moves_171128[0][chckIndx(0, 0, (possible_moves_171128[0] != null ? possible_moves_171128[0].length : 0)+0-1)-0], NTI138);
		F.line = 203;
		alpha_171109 = negamax_core_171042(game_171106, game_171106_Idx, ai_choice_171111, 0, depth_171107, depth_171107, alpha_171109, beta_171110);
		F.line = 211;
		result_171108 = nimCopy(null, ai_choice_171111[0], NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_171108;

}

function get_move_171157(self_171159, game_171160) {
	var result_171161 = null;

	var F={procname:"negamax.get_move",prev:framePtr,filename:"negamax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 224;
		var new_game_171162 = [null];
		F.line = 226;
		new_game_171162[0] = game_171160;
		F.line = 229;
		var choice_171202 = negamax_171103(new_game_171162, 0, self_171159.depth);
		F.line = 230;
		result_171161 = nimCopy(null, choice_171202, NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_171161;

}

function nsuIndent(s_152107, count_152108, padding_152109) {
						var Tmp6;

	var result_152110 = null;

	var F={procname:"strutils.indent",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 1430;
		result_152110 = nimCopy(null, [], NTI138);
		F.line = 1431;
		var i_152112 = 0;
		L1: do {
			F.line = 1432;
			var line_152113 = null;
			F.line = 659;
			var first_175512 = 0;
			F.line = 660;
			var last_175513 = 0;
			F.line = 661;
			var eolpos_175514 = 0;
			L2: do {
				F.line = 662;
					L3: while (true) {
					if (!true) break L3;
						L4: do {
							F.line = 663;
								L5: while (true) {
								if (!((last_175513 < (s_152107 != null ? s_152107.length : 0)) && !((ConstSet10[s_152107[chckIndx(last_175513, 0, (s_152107 != null ? s_152107.length : 0)+0-1)-0]] != undefined)))) break L5;
									F.line = 663;
									last_175513 = addInt(last_175513, 1);
								}
						} while(false);
						F.line = 665;
						eolpos_175514 = last_175513;
						if ((last_175513 < (s_152107 != null ? s_152107.length : 0))) {
						if ((s_152107[chckIndx(last_175513, 0, (s_152107 != null ? s_152107.length : 0)+0-1)-0] == 10)) {
						F.line = 667;
						last_175513 = addInt(last_175513, 1);
						}
						else {
						if ((s_152107[chckIndx(last_175513, 0, (s_152107 != null ? s_152107.length : 0)+0-1)-0] == 13)) {
						F.line = 669;
						last_175513 = addInt(last_175513, 1);
						if (((last_175513 < (s_152107 != null ? s_152107.length : 0)) && (s_152107[chckIndx(last_175513, 0, (s_152107 != null ? s_152107.length : 0)+0-1)-0] == 10))) {
						F.line = 670;
						last_175513 = addInt(last_175513, 1);
						}
						
						}
						}
						}
						
						F.line = 1432;
						if (false) {
						Tmp6 = subInt(last_175513, 1);
						}
						else {
						Tmp6 = subInt(eolpos_175514, 1);
						}
						
						line_152113 = substr_30422(s_152107, first_175512, Tmp6);
						if (!((i_152112 == 0))) {
						F.line = 1434;
						if (result_152110 != null) { result_152110 = (result_152110).concat(makeNimstrLit("\x0A")); } else { result_152110 = makeNimstrLit("\x0A"); };
						}
						
						L7: do {
							F.line = 1435;
							var j_152122 = 0;
							F.line = 2699;
							var colontmp__175504 = 0;
							F.line = 1435;
							colontmp__175504 = count_152108;
							F.line = 2710;
							var res_175505 = 1;
							L8: do {
								F.line = 2711;
									L9: while (true) {
									if (!(res_175505 <= colontmp__175504)) break L9;
										F.line = 1435;
										j_152122 = res_175505;
										F.line = 1436;
										if (result_152110 != null) { result_152110 = (result_152110).concat(padding_152109); } else { result_152110 = padding_152109.slice(); };
										F.line = 2713;
										res_175505 = addInt(res_175505, 1);
									}
							} while(false);
						} while(false);
						F.line = 1437;
						if (result_152110 != null) { result_152110 = (result_152110).concat(line_152113); } else { result_152110 = line_152113.slice(); };
						F.line = 1438;
						i_152112 = addInt(i_152112, 1);
						if ((eolpos_175514 == last_175513)) {
						F.line = 676;
						break L2;
						}
						
						F.line = 678;
						first_175512 = last_175513;
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_152110;

}

function len_167305(t_167310) {
	var result_167311 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
		F.line = 1474;
		result_167311 = t_167310.counter;
	framePtr = F.prev;

	return result_167311;

}

function is_filled_163018(hcode_163020) {
	var result_163021 = false;

	var F={procname:"tables.isFilled",prev:framePtr,filename:"hashcommon.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_163021 = !((hcode_163020 == 0));
	framePtr = F.prev;

	return result_163021;

}

function get_move_167123(self_167125, game_167126) {
	var result_167127 = null;

	var F={procname:"turn_based_game.get_move",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 192;
		var move_list_167144 = [[]];
		F.line = 193;
		var descriptive_move_list_167152 = [{data: null, counter: 0, first: 0, last: 0}];
		F.line = 194;
		var compact_description_167153 = false;
		F.line = 195;
		rawEcho([]);
		F.line = 196;
		rawEcho(makeNimstrLit("   Status:"));
		F.line = 197;
		rawEcho(nsuIndent(status_167098(game_167126), 2, makeNimstrLit("   ")));
		F.line = 198;
		set_possible_moves_167093(game_167126, move_list_167144, 0);
		if ((0 < (move_list_167144[0] != null ? move_list_167144[0].length : 0))) {
		F.line = 200;
		compact_description_167153 = true;
		}
		else {
			F.line = 202;
			set_possible_moves_167085(game_167126, descriptive_move_list_167152[0]);
			L1: do {
				F.line = 203;
				var key_168214 = null;
				F.line = 203;
				var value_168215 = null;
				F.line = 1647;
				var l_175488 = len_167305(descriptive_move_list_167152[0]);
				if ((0 < descriptive_move_list_167152[0].counter)) {
				F.line = 1258;
				var h_175489 = descriptive_move_list_167152[0].first;
				L2: do {
					F.line = 1259;
						L3: while (true) {
						if (!(0 <= h_175489)) break L3;
							F.line = 1260;
							var nxt_175491 = descriptive_move_list_167152[0].data[chckIndx(h_175489, 0, (descriptive_move_list_167152[0].data != null ? descriptive_move_list_167152[0].data.length : 0)+0-1)-0].Field1;
							if (is_filled_163018(descriptive_move_list_167152[0].data[chckIndx(h_175489, 0, (descriptive_move_list_167152[0].data != null ? descriptive_move_list_167152[0].data.length : 0)+0-1)-0].Field0)) {
							F.line = 203;
							key_168214 = descriptive_move_list_167152[0].data[chckIndx(h_175489, 0, (descriptive_move_list_167152[0].data != null ? descriptive_move_list_167152[0].data.length : 0)+0-1)-0].Field2;
							F.line = 1649;
							value_168215 = descriptive_move_list_167152[0].data[chckIndx(h_175489, 0, (descriptive_move_list_167152[0].data != null ? descriptive_move_list_167152[0].data.length : 0)+0-1)-0].Field3;
							F.line = 204;
							var Tmp4 = nimCopy(null, key_168214, NTI138);
							if (move_list_167144[0] != null) { move_list_167144[0].push(Tmp4); } else { move_list_167144[0] = [Tmp4]; };
							if (!((len_167305(descriptive_move_list_167152[0]) == l_175488))) {
							F.line = 1650;
							failed_assert_impl_15266(makeNimstrLit("C:\\Users\\Peter\\scoop\\apps\\nim\\current\\lib\\pure\\collections\\tables.nim(1650, 11) `len(t) ==\x0A    L` the length of the table changed while iterating over it"));
							}
							
							}
							
							F.line = 1263;
							h_175489 = nxt_175491;
						}
				} while(false);
				}
				
			} while(false);
		}
		
		L5: do {
			F.line = 205;
				L6: while (true) {
				if (!true) break L6;
					F.line = 206;
					rawEcho(makeNimstrLit("   Possible moves:"));
					if (compact_description_167153) {
					F.line = 208;
					var disp_168226 = makeNimstrLit("      ");
					L7: do {
						F.line = 209;
						var key_168414 = null;
						F.line = 184;
						var i_175494 = 0;
						F.line = 185;
						var l_175495 = (move_list_167144[0] != null ? move_list_167144[0].length : 0);
						L8: do {
							F.line = 186;
								L9: while (true) {
								if (!(i_175494 < l_175495)) break L9;
									F.line = 209;
									key_168414 = move_list_167144[0][chckIndx(i_175494, 0, (move_list_167144[0] != null ? move_list_167144[0].length : 0)+0-1)-0];
									F.line = 210;
									if (disp_168226 != null) { disp_168226 = (disp_168226).concat(nsuFormatVarargs(makeNimstrLit("[$#] "), [nimCopy(null, key_168414, NTI138)])); } else { disp_168226 = nsuFormatVarargs(makeNimstrLit("[$#] "), [nimCopy(null, key_168414, NTI138)]).slice(); };
									F.line = 188;
									i_175494 = addInt(i_175494, 1);
									if (!(((move_list_167144[0] != null ? move_list_167144[0].length : 0) == l_175495))) {
									F.line = 189;
									failed_assert_impl_15266(makeNimstrLit("C:\\Users\\Peter\\scoop\\apps\\nim\\current\\lib\\system\\iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					F.line = 211;
					rawEcho(disp_168226);
					}
					else {
						L10: do {
							F.line = 213;
							var key_168428 = null;
							F.line = 213;
							var value_168429 = null;
							F.line = 1647;
							var l_175498 = len_167305(descriptive_move_list_167152[0]);
							if ((0 < descriptive_move_list_167152[0].counter)) {
							F.line = 1258;
							var h_175499 = descriptive_move_list_167152[0].first;
							L11: do {
								F.line = 1259;
									L12: while (true) {
									if (!(0 <= h_175499)) break L12;
										F.line = 1260;
										var nxt_175501 = descriptive_move_list_167152[0].data[chckIndx(h_175499, 0, (descriptive_move_list_167152[0].data != null ? descriptive_move_list_167152[0].data.length : 0)+0-1)-0].Field1;
										if (is_filled_163018(descriptive_move_list_167152[0].data[chckIndx(h_175499, 0, (descriptive_move_list_167152[0].data != null ? descriptive_move_list_167152[0].data.length : 0)+0-1)-0].Field0)) {
										F.line = 213;
										key_168428 = descriptive_move_list_167152[0].data[chckIndx(h_175499, 0, (descriptive_move_list_167152[0].data != null ? descriptive_move_list_167152[0].data.length : 0)+0-1)-0].Field2;
										F.line = 1649;
										value_168429 = descriptive_move_list_167152[0].data[chckIndx(h_175499, 0, (descriptive_move_list_167152[0].data != null ? descriptive_move_list_167152[0].data.length : 0)+0-1)-0].Field3;
										F.line = 214;
										rawEcho((makeNimstrLit("      ") || []).concat(nsuFormatVarargs(makeNimstrLit("[$key]: $value"), [makeNimstrLit("key"), nimCopy(null, key_168428, NTI138), makeNimstrLit("value"), nimCopy(null, value_168429, NTI138)]) || []));
										if (!((len_167305(descriptive_move_list_167152[0]) == l_175498))) {
										F.line = 1650;
										failed_assert_impl_15266(makeNimstrLit("C:\\Users\\Peter\\scoop\\apps\\nim\\current\\lib\\pure\\collections\\tables.nim(1650, 11) `len(t) ==\x0A    L` the length of the table changed while iterating over it"));
										}
										
										}
										
										F.line = 1263;
										h_175499 = nxt_175501;
									}
							} while(false);
							}
							
						} while(false);
					}
					
					F.line = 215;
					rawEcho(makeNimstrLit("   Enter move (or \'quit\'): "));
					F.line = 216;
					var response_168442 = null;
					F.line = 219;
					response_168442 = nimCopy(null, makeNimstrLit("When compiling for Javascript, you cannot use this procedure."), NTI138);
					if (contains_168602(move_list_167144[0], response_168442)) {
					F.line = 223;
					result_167127 = nimCopy(null, response_168442, NTI138);
					break BeforeRet;
					}
					
					if (eqStrings(response_168442, makeNimstrLit("quit"))) {
					F.line = 225;
					result_167127 = nimCopy(null, [], NTI138);
					break BeforeRet;
					}
					
					F.line = 226;
					rawEcho(makeNimstrLit("   BAD ENTRY. Try again."));
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_167127;

}

function get_move_168691(self_167125, game_167126) {
	var result_168693 = null;

	var F={procname:"turn_based_game.get_move",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 510;
		chckNilDisp(self_167125);
		if (isObj(self_167125.m_type, NTI171151)) {
		F.line = 191;
		result_168693 = get_move_171157(self_167125, game_167126);
		break BeforeRet;
		}
		else {
		if (isObj(self_167125.m_type, NTI167025)) {
		F.line = 191;
		result_168693 = get_move_167123(self_167125, game_167126);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_168693;

}

function current_player_168823(self_168825) {
	var result_168826 = null;

	var F={procname:"turn_based_game.current_player",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 248;
		result_168826 = self_168825.players[chckIndx(subInt(self_168825.current_player_number, 1), 0, (self_168825.players != null ? self_168825.players.length : 0)+0-1)-0];
	framePtr = F.prev;

	return result_168826;

}

function current_player_168855(self_168825) {
	var result_168857 = null;

	var F={procname:"turn_based_game.current_player",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 247;
		result_168857 = current_player_168823(self_168825);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_168857;

}

function winning_player_168858(self_168860) {
	var result_168861 = null;

	var F={procname:"turn_based_game.winning_player",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((0 < self_168860.winner_player_number)) {
		F.line = 257;
		result_168861 = self_168860.players[chckIndx(subInt(self_168860.winner_player_number, 1), 0, (self_168860.players != null ? self_168860.players.length : 0)+0-1)-0];
		break BeforeRet;
		}
		else {
		if ((self_168860.winner_player_number == 0)) {
		F.line = 259;
		result_168861 = {name: makeNimstrLit("NO WINNER YET"), m_type: NTI167025};
		break BeforeRet;
		}
		else {
			F.line = 261;
			result_168861 = {name: makeNimstrLit("STALEMATE OR TIE"), m_type: NTI167025};
			break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_168861;

}

function winning_player_168877(self_168860) {
	var result_168879 = null;

	var F={procname:"turn_based_game.winning_player",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 252;
		result_168879 = winning_player_168858(self_168860);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_168879;

}

function determine_winner_173729(self_173731) {
	var F={procname:"knights.determine_winner",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((0 < self_173731.winner_player_number)) {
		F.line = 135;
		break BeforeRet;
		}
		
		if ((move_counter_173687(self_173731, 1) == 0)) {
		F.line = 137;
		self_173731.winner_player_number = 2;
		}
		
		if ((move_counter_173687(self_173731, 2) == 0)) {
		F.line = 139;
		self_173731.winner_player_number = 1;
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function determine_winner_169063(self_169065) {
	var F={procname:"turn_based_game.determine_winner",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 3478;
		var eHEX60gensym169068_169203 = null;
		F.line = 3481;
		eHEX60gensym169068_169203 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 313;
		eHEX60gensym169068_169203.message = nimCopy(null, makeNimstrLit("determine_winner() must be overridden"), NTI138);
		F.line = 3474;
		eHEX60gensym169068_169203.parent = null;
		F.line = 313;
		raiseException(eHEX60gensym169068_169203, "FieldError");
	framePtr = F.prev;

	
}

function determine_winner_169223(self_169065) {
	var F={procname:"turn_based_game.determine_winner",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 510;
		chckNilDisp(self_169065);
		if (isObj(self_169065.m_type, NTI173102)) {
		F.line = 303;
		determine_winner_173729(self_169065);
		}
		else {
		if (isObj(self_169065.m_type, NTI167018)) {
		F.line = 303;
		determine_winner_169063(self_169065);
		}
		}
	framePtr = F.prev;

	
}

function default_setup_170025(self_170027, players_170029) {
	var F={procname:"turn_based_game.default_setup",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 361;
		self_170027.players = nimCopy(null, players_170029, NTI170028);
		F.line = 362;
		self_170027.player_count = (self_170027.players != null ? self_170027.players.length : 0);
		F.line = 363;
		self_170027.current_player_number = 1;
		F.line = 364;
		self_170027.winner_player_number = 0;
	framePtr = F.prev;

	
}

function default_setup_170063(self_170027, players_170029) {
	var F={procname:"turn_based_game.default_setup",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 348;
		default_setup_170025(self_170027, players_170029);
	framePtr = F.prev;

	
}

function setup_173239(self_173241, players_173243) {
	var F={procname:"knights.setup",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 88;
		default_setup_170063(self_173241, players_173243);
		F.line = 89;
		nimCopy(self_173241.board, [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], NTI173244);
		F.line = 96;
		place_player_173224(self_173241, 1, [0, 0]);
		F.line = 97;
		nimCopy(self_173241.player_pos[chckIndx(2, 0, (self_173241.player_pos != null ? self_173241.player_pos.length : 0)+0-1)-0], [4, 4], NTI173264);
		F.line = 98;
		place_player_173224(self_173241, 2, [4, 4]);
	framePtr = F.prev;

	
}

function setup_169825(self_169827, players_169829) {
	var F={procname:"turn_based_game.setup",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 3478;
		var eHEX60gensym169832_170003 = null;
		F.line = 3481;
		eHEX60gensym169832_170003 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 345;
		eHEX60gensym169832_170003.message = nimCopy(null, makeNimstrLit("setup() must be overridden"), NTI138);
		F.line = 3474;
		eHEX60gensym169832_170003.parent = null;
		F.line = 345;
		raiseException(eHEX60gensym169832_170003, "FieldError");
	framePtr = F.prev;

	
}

function setup_170023(self_169827, players_169829) {
	var F={procname:"turn_based_game.setup",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 510;
		chckNilDisp(self_169827);
		if (isObj(self_169827.m_type, NTI173102)) {
		F.line = 341;
		setup_173239(self_169827, players_169829);
		}
		else {
		if (isObj(self_169827.m_type, NTI167018)) {
		F.line = 341;
		setup_169825(self_169827, players_169829);
		}
		}
	framePtr = F.prev;

	
}

function play_170065(self_170067) {
	var result_170069 = null;

	var F={procname:"turn_based_game.play",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 370;
		result_170069 = nimCopy(null, [], NTI170084);
		F.line = 371;
		var move_170085 = [];
		L1: do {
			F.line = 372;
				L2: while (true) {
				if (!!(is_over_169043(self_170067))) break L2;
					F.line = 373;
					display_167121(current_player_168855(self_170067), makeNimstrLit("-----------------"));
					F.line = 374;
					display_167121(current_player_168855(self_170067), nsuFormatVarargs(makeNimstrLit("$1\'s Turn"), [nimCopy(null, current_player_168855(self_170067).name, NTI138)]));
					F.line = 375;
					move_170085 = nimCopy(null, get_move_168691(current_player_168855(self_170067), self_170067), NTI138);
					if (eqStrings(move_170085, [])) {
					F.line = 377;
					break L1;
					}
					
					F.line = 378;
					display_167121(current_player_168855(self_170067), []);
					F.line = 379;
					display_167121(current_player_168855(self_170067), nsuFormatVarargs(makeNimstrLit("$1 chose \"$2\""), [nimCopy(null, current_player_168855(self_170067).name, NTI138), nimCopy(null, move_170085, NTI138)]));
					F.line = 380;
					var Tmp3 = nimCopy(null, move_170085, NTI138);
					if (result_170069 != null) { result_170069.push(Tmp3); } else { result_170069 = [Tmp3]; };
					F.line = 381;
					display_167121(current_player_168855(self_170067), []);
					F.line = 382;
					display_167121(current_player_168855(self_170067), (makeNimstrLit("   ") || []).concat(make_move_169023(self_170067, move_170085) || []));
					F.line = 383;
					determine_winner_169223(self_170067);
					if (is_over_169043(self_170067)) {
					F.line = 385;
					display_167121(current_player_168855(self_170067), []);
					if ((self_170067.winner_player_number == -1)) {
					F.line = 387;
					display_167121(current_player_168855(self_170067), makeNimstrLit("STALEMATE."));
					}
					else {
						F.line = 389;
					display_167121(current_player_168855(self_170067), nsuFormatVarargs(makeNimstrLit("WINNER IS $#"), [nimCopy(null, winning_player_168877(self_170067).name, NTI138)]));
					}
					
					F.line = 390;
					break L1;
					}
					
					F.line = 391;
					self_170067.current_player_number = next_player_number_168902(self_170067);
				}
		} while(false);
	framePtr = F.prev;

	return result_170069;

}

function play_170117(self_170067) {
	var result_170119 = null;

	var F={procname:"turn_based_game.play",prev:framePtr,filename:"turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 367;
		result_170119 = play_170065(self_170067);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_170119;

}
