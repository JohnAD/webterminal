/* Generated by the Nim Compiler v0.18.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI52770 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI55106 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI55093 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI55092 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI52734 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI55451 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI51114 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI55081 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI55072 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3660 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI55595 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI53029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI53093 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI52505 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI55136 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI55187 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI55006 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI55005 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI55118 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI55133 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3628 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3684 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3658 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3648 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3640 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3711 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3656 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI53113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51012 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51004 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI51007 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI51005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI55042 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI55043 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI55037 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI55038 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI55034 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI56001 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
NTI56001.base = NTI138;
NTI55037.base = NTI104;
NTI55038.base = NTI55037;
NTI55042.base = NTI104;
NTI55043.base = NTI55042;
var NNI55034 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "board", len: 0, typ: NTI55038, name: "board", sons: null}, 
{kind: 1, offset: "player_pos", len: 0, typ: NTI55043, name: "player_pos", sons: null}]};
NTI55034.node = NNI55034;
var NNI51012 = {kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null};
NTI51012.node = NNI51012;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI51012.base = NTI3608;
NTI51004.base = NTI51012;
NTI51007.base = NTI51004;
var NNI51005 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "player_count", len: 0, typ: NTI104, name: "player_count", sons: null}, 
{kind: 1, offset: "players", len: 0, typ: NTI51007, name: "players", sons: null}, 
{kind: 1, offset: "current_player_number", len: 0, typ: NTI104, name: "current_player_number", sons: null}, 
{kind: 1, offset: "winner_player_number", len: 0, typ: NTI104, name: "winner_player_number", sons: null}]};
NTI51005.node = NNI51005;
NTI51005.base = NTI3608;
NTI55034.base = NTI51005;
var NNI53113 = {kind: 1, offset: "depth", len: 0, typ: NTI104, name: "depth", sons: null};
NTI53113.node = NNI53113;
NTI53113.base = NTI51012;
var NNI3656 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3656.node = NNI3656;
NTI3706.base = NTI3626;
NTI3711.base = NTI3626;
var NNI3626 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3706, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3711, name: "up", sons: null}]};
NTI3626.node = NNI3626;
NTI3626.base = NTI3608;
NTI3656.base = NTI3626;
var NNI14009 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI14009.node = NNI14009;
var NNI3644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3644.node = NNI3644;
var NNI3640 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3640.node = NNI3640;
NTI3640.base = NTI3626;
NTI3644.base = NTI3640;
var NNI3648 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3648.node = NNI3648;
NTI3648.base = NTI3626;
var NNI3658 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3658.node = NNI3658;
NTI3658.base = NTI3626;
var NNI3684 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3684.node = NNI3684;
var NNI3628 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3628.node = NNI3628;
NTI3628.base = NTI3626;
NTI3684.base = NTI3628;
NTI55118.base = NTI104;
NTI55133.base = NTI55118;
NTI55006.base = NTI104;
NTI55005.base = NTI55006;
NTI55187.base = NTI104;
NTI55136.base = NTI104;
NTI52505.base = NTI138;
NTI53093.base = NTI138;
NTI53029.base = NTI138;
NTI55595.base = NTI138;
var NNI3660 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3660.node = NNI3660;
NTI3660.base = NTI3626;
var NNI3650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3650.node = NNI3650;
NTI3650.base = NTI3626;
NTI55072.base = NTI104;
NTI55081.base = NTI104;
NTI51114.base = NTI138;
NTI55451.base = NTI138;
NTI52734.base = NTI51004;
NTI55093.base = NTI104;
NTI55092.base = NTI55093;
NTI55106.base = NTI104;
NTI52770.base = NTI138;

function makeNimstrLit(c_15003) {
		    var ln = c_15003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_15003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_20217, src_20218, ti_20219) {
	var result_20629 = null;

		switch (ti_20219.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_20201(ti_20219))) {
			result_20629 = src_20218;
			}
			else {
				result_20629 = [src_20218[0], src_20218[1]];
			}
			
			break;
		case 19:
			      if (dest_20217 === null || dest_20217 === undefined) {
        dest_20217 = {};
      }
      else {
        for (var key in dest_20217) { delete dest_20217[key]; }
      }
      for (var key in src_20218) { dest_20217[key] = src_20218[key]; }
      result_20629 = dest_20217;
    
			break;
		case 18:
		case 17:
			if (!((ti_20219.base == null))) {
			result_20629 = nimCopy(dest_20217, src_20218, ti_20219.base);
			}
			else {
			if ((ti_20219.kind == 17)) {
			result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {m_type: ti_20219} : dest_20217;
			}
			else {
				result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {} : dest_20217;
			}
			}
			nimCopyAux(result_20629, src_20218, ti_20219.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_20218 === null) {
        result_20629 = null;
      }
      else {
        if (dest_20217 === null || dest_20217 === undefined) {
          dest_20217 = new Array(src_20218.length);
        }
        else {
          dest_20217.length = src_20218.length;
        }
        result_20629 = dest_20217;
        for (var i = 0; i < src_20218.length; ++i) {
          result_20629[i] = nimCopy(result_20629[i], src_20218[i], ti_20219.base);
        }
      }
    
			break;
		case 28:
			      if (src_20218 !== null) {
        result_20629 = src_20218.slice(0);
      }
    
			break;
		default: 
			result_20629 = src_20218;
			break;
		}

	return result_20629;

}

function toJSStr(s_15403) {
		    var len = s_15403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15403[i] < 128)
        asciiPart[i] = fcc(s_15403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function eqStrings(a_17603, b_17604) {
		    if (a_17603 == b_17604) return true;
    if ((!a_17603) || (!b_17604)) return false;
    var alen = a_17603.length;
    if (alen != b_17604.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17603[i] != b_17604[i]) return false;
    return true;
  

	
}

function arrayConstr(len_20664, value_20665, typ_20666) {
		      var result = new Array(len_20664);
      for (var i = 0; i < len_20664; ++i) result[i] = nimCopy(null, value_20665, typ_20666);
      return result;
    

	
}

function cstrToNimstr(c_15203) {
		  var ln = c_15203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_15203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_15203.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function raiseException(e_14406, ename_14407) {
		e_14406.name = ename_14407;
		if ((excHandler == 0)) {
		unhandledException(e_14406);
		}
		
		e_14406.trace = nimCopy(null, rawWriteStackTrace_14228(), NTI138);
		throw e_14406;

	
}

function chckIndx(i_20803, a_20804, b_20805) {
			var Tmp1;

	var result_20806 = 0;

	BeforeRet: do {
			if (!(a_20804 <= i_20803)) Tmp1 = false; else {				Tmp1 = (i_20803 <= b_20805);			}		if (Tmp1) {
		result_20806 = i_20803;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_20806;

}

function addInt(a_17803, b_17804) {
		      var result = a_17803 + b_17804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function addChar(x_20906, c_20907) {
		    x_20906[x_20906.length-1] = c_20907; x_20906.push(0);
  

	
}

function isObj(obj_20868, subclass_20869) {
	var result_20870 = false;

	BeforeRet: do {
		var x_20871 = obj_20868;
		if ((x_20871 == subclass_20869)) {
		result_20870 = true;
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!!((x_20871 == subclass_20869))) break L2;
					if ((x_20871 == null)) {
					result_20870 = false;
					break BeforeRet;
					}
					
					x_20871 = x_20871.base;
				}
		} while(false);
		result_20870 = true;
		break BeforeRet;
	} while (false);

	return result_20870;

}
						var DIRECTIONS_55004 = nimCopy(null, [[1, 2], [-1, 2], [1, -2], [-1, -2], [2, 1], [2, -1], [-2, 1], [-2, -1]], NTI55005);

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function subInt(a_18003, b_18004) {
		      var result = a_18003 - b_18004;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}
var ConstSet2 = setConstr([48, 57]);
var ConstSet3 = setConstr([48, 57]);

function mulInt(a_18203, b_18204) {
		      var result = a_18203 * b_18204;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function chckRange(i_20809, a_20810, b_20811) {
			var Tmp1;

	var result_20812 = 0;

	BeforeRet: do {
			if (!(a_20810 <= i_20809)) Tmp1 = false; else {				Tmp1 = (i_20809 <= b_20811);			}		if (Tmp1) {
		result_20812 = i_20809;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_20812;

}

function mnewString(len_15603) {
		      var result = new Array(len_15603+1);
      result[0] = 0;
      result[len_15603] = 0;
      return result;
    

	
}

function nimCharToStr(x_13651) {
	var result_13652 = null;

		result_13652 = nimCopy(null, mnewString(1), NTI138);
		result_13652[0] = x_13651;

	return result_13652;

}
var ConstSet4 = setConstr([48, 57]);
var ConstSet5 = setConstr(0, 125);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([65, 90]);
var ConstSet8 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
var ConstSet9 = setConstr(0, 13, 10);
var nimvm_6539 = false;
var nim_program_result = 0;
var globalRaiseHook_12005 = [null];
var localRaiseHook_12010 = [null];
var outOfMemHook_12013 = [null];
var objectID_44231 = [0];

function isFatPointer_20201(ti_20203) {
	var result_20204 = false;

	BeforeRet: do {
		result_20204 = !((ConstSet1[ti_20203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_20204;

}

function nimCopyAux(dest_20222, src_20223, n_20225) {
		switch (n_20225.kind) {
		case 0:
			break;
		case 1:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
    
			break;
		case 2:
			L1: do {
				var i_20615 = 0;
				var colontmp__20617 = 0;
				colontmp__20617 = (n_20225.len - 1);
				var res_20620 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20620 <= colontmp__20617)) break L3;
							i_20615 = res_20620;
							nimCopyAux(dest_20222, src_20223, n_20225.sons[i_20615]);
							res_20620 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
      for (var i = 0; i < n_20225.sons.length; ++i) {
        nimCopyAux(dest_20222, src_20223, n_20225.sons[i][1]);
      }
    
			break;
		}

	
}
var instructions_56003 = nimCopy(null, [makeNimstrLit("Each player has one chess knight in the corners of a 5x5 chessboard. Just"), makeNimstrLit("like in regular chess, a Knight can jump in an \"L\" pattern. Each turn,"), makeNimstrLit("move your knight to any tile that hasn\'t been occupied by a knight before."), makeNimstrLit("The first player that cannot move loses.")], NTI56001);
var game_56010 = [{m_type: NTI55034, board: [new Int32Array(5), new Int32Array(5), new Int32Array(5), new Int32Array(5), new Int32Array(5)], player_pos: [new Int32Array(2), new Int32Array(2), new Int32Array(2)], player_count: 0, players: null, current_player_number: 0, winner_player_number: 0}];
var current_state_56011 = [0];
setup_52713(game_56010[0], [{name: makeNimstrLit("White Knight"), m_type: NTI51012}, {name: makeNimstrLit("Black Knight"), depth: 10, m_type: NTI53113}]);

function send_54019(msg_54021) {
	var F={procname:"webterminal.send",prev:framePtr,filename:"/home/johnd/Projects/webterminal/src/webterminal.nim",line:0};
	framePtr = F;
		F.line = 15;
		send(toJSStr(msg_54021));
	framePtr = F.prev;

	
}

function add_12029(x_12032, x_12032_Idx, y_12033) {
		        var len = x_12032[0].length-1;
        for (var i = 0; i < y_12033.length; ++i) {
          x_12032[0][len] = y_12033.charCodeAt(i);
          ++len;
        }
        x_12032[0][len] = 0
      

	
}

function auxWriteStackTrace_14004(f_14006) {
					var Tmp3;

	var result_14007 = [null];

		var it_14015 = f_14006;
		var i_14016 = 0;
		var total_14017 = 0;
		var tempFrames_14021 = arrayConstr(64, {Field0: null, Field1: 0}, NTI14009);
		L1: do {
				L2: while (true) {
					if (!!((it_14015 == null))) Tmp3 = false; else {						Tmp3 = (i_14016 <= 63);					}				if (!Tmp3) break L2;
					tempFrames_14021[i_14016].Field0 = it_14015.procname;
					tempFrames_14021[i_14016].Field1 = it_14015.line;
					i_14016 += 1;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_14015 == null))) break L5;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		result_14007[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if (!((total_14017 == i_14016))) {
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_14007[0] = makeNimstrLit("(");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr(((total_14017 - i_14016))+"")); } else { result_14007[0] = cstrToNimstr(((total_14017 - i_14016))+"");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_14007[0] = makeNimstrLit(" calls omitted) ...\x0A");};
		}
		
		L6: do {
			var j_14215 = 0;
			var colontmp__14221 = 0;
			colontmp__14221 = (i_14016 - 1);
			var res_14224 = colontmp__14221;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_14224)) break L8;
						j_14215 = res_14224;
						add_12029(result_14007, 0, tempFrames_14021[j_14215].Field0);
						if ((0 < tempFrames_14021[j_14215].Field1)) {
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_14007[0] = makeNimstrLit(", line: ");};
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_14021[j_14215].Field1)+"")); } else { result_14007[0] = cstrToNimstr((tempFrames_14021[j_14215].Field1)+"");};
						}
						
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_14007[0] = makeNimstrLit("\x0A");};
						res_14224 -= 1;
					}
			} while(false);
		} while(false);

	return result_14007[0];

}

function rawWriteStackTrace_14228() {
	var result_14230 = null;

		if (!((framePtr == null))) {
		result_14230 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_14004(framePtr)), NTI138);
		}
		else {
			result_14230 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_14230;

}

function unhandledException(e_14253) {
			var Tmp1;

		var buf_14254 = [makeNimstrLit("")];
			if (!!(eqStrings(e_14253.message, null))) Tmp1 = false; else {				Tmp1 = !((e_14253.message[0] == 0));			}		if (Tmp1) {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(e_14253.message); } else { buf_14254[0] = e_14253.message;};
		}
		else {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_14254[0] = makeNimstrLit(" [");};
		add_12029(buf_14254, 0, e_14253.name);
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_14254[0] = makeNimstrLit("]\x0A");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(rawWriteStackTrace_14228()); } else { buf_14254[0] = rawWriteStackTrace_14228();};
		var cbuf_14401 = toJSStr(buf_14254[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14401);
  }
  else {
    throw cbuf_14401;
  }
  

	
}

function raiseIndexError() {
		var e_14894 = null;
		e_14894 = {m_type: NTI3656, parent: null, name: null, message: null, trace: null, up: null};
		e_14894.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_14894.parent = null;
		raiseException(e_14894, "IndexError");

	
}

function raiseOverflow() {
		var e_14840 = null;
		e_14840 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, up: null};
		e_14840.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_14840.parent = null;
		raiseException(e_14840, "OverflowError");

	
}

function addEscapedChar_24601(s_24604, s_24604_Idx, c_24605) {
	var F={procname:"system.addEscapedChar",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 3931;
		switch (c_24605) {
		case 0:
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
		case 16:
		case 17:
		case 18:
		case 19:
		case 20:
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
		case 26:
		case 27:
		case 28:
		case 29:
		case 30:
		case 31:
		case 127:
		case 128:
		case 129:
		case 130:
		case 131:
		case 132:
		case 133:
		case 134:
		case 135:
		case 136:
		case 137:
		case 138:
		case 139:
		case 140:
		case 141:
		case 142:
		case 143:
		case 144:
		case 145:
		case 146:
		case 147:
		case 148:
		case 149:
		case 150:
		case 151:
		case 152:
		case 153:
		case 154:
		case 155:
		case 156:
		case 157:
		case 158:
		case 159:
		case 160:
		case 161:
		case 162:
		case 163:
		case 164:
		case 165:
		case 166:
		case 167:
		case 168:
		case 169:
		case 170:
		case 171:
		case 172:
		case 173:
		case 174:
		case 175:
		case 176:
		case 177:
		case 178:
		case 179:
		case 180:
		case 181:
		case 182:
		case 183:
		case 184:
		case 185:
		case 186:
		case 187:
		case 188:
		case 189:
		case 190:
		case 191:
		case 192:
		case 193:
		case 194:
		case 195:
		case 196:
		case 197:
		case 198:
		case 199:
		case 200:
		case 201:
		case 202:
		case 203:
		case 204:
		case 205:
		case 206:
		case 207:
		case 208:
		case 209:
		case 210:
		case 211:
		case 212:
		case 213:
		case 214:
		case 215:
		case 216:
		case 217:
		case 218:
		case 219:
		case 220:
		case 221:
		case 222:
		case 223:
		case 224:
		case 225:
		case 226:
		case 227:
		case 228:
		case 229:
		case 230:
		case 231:
		case 232:
		case 233:
		case 234:
		case 235:
		case 236:
		case 237:
		case 238:
		case 239:
		case 240:
		case 241:
		case 242:
		case 243:
		case 244:
		case 245:
		case 246:
		case 247:
		case 248:
		case 249:
		case 250:
		case 251:
		case 252:
		case 253:
		case 254:
		case 255:
			F.line = 3933;
			if (s_24604[s_24604_Idx] != null) { s_24604[s_24604_Idx] = (s_24604[s_24604_Idx].slice(0, -1)).concat(makeNimstrLit("\\x")); } else { s_24604[s_24604_Idx] = makeNimstrLit("\\x");};
			F.line = 3935;
			var n_24613 = c_24605;
			F.line = 3936;
			if (s_24604[s_24604_Idx] != null) { addChar(s_24604[s_24604_Idx], makeNimstrLit("0123456789ABCDEF")[chckIndx((((n_24613 & 240) >>> 0) >>> 4), 0, makeNimstrLit("0123456789ABCDEF").length+0-1)-0]); } else { s_24604[s_24604_Idx] = [makeNimstrLit("0123456789ABCDEF")[chckIndx((((n_24613 & 240) >>> 0) >>> 4), 0, makeNimstrLit("0123456789ABCDEF").length+0-1)-0], 0]; };
			F.line = 3937;
			if (s_24604[s_24604_Idx] != null) { addChar(s_24604[s_24604_Idx], makeNimstrLit("0123456789ABCDEF")[chckIndx((n_24613 & 15), 0, makeNimstrLit("0123456789ABCDEF").length+0-1)-0]); } else { s_24604[s_24604_Idx] = [makeNimstrLit("0123456789ABCDEF")[chckIndx((n_24613 & 15), 0, makeNimstrLit("0123456789ABCDEF").length+0-1)-0], 0]; };
			break;
		case 92:
			F.line = 3938;
			if (s_24604[s_24604_Idx] != null) { s_24604[s_24604_Idx] = (s_24604[s_24604_Idx].slice(0, -1)).concat(makeNimstrLit("\\\\")); } else { s_24604[s_24604_Idx] = makeNimstrLit("\\\\");};
			break;
		case 39:
			F.line = 3939;
			if (s_24604[s_24604_Idx] != null) { s_24604[s_24604_Idx] = (s_24604[s_24604_Idx].slice(0, -1)).concat(makeNimstrLit("\\\'")); } else { s_24604[s_24604_Idx] = makeNimstrLit("\\\'");};
			break;
		case 34:
			F.line = 3940;
			if (s_24604[s_24604_Idx] != null) { s_24604[s_24604_Idx] = (s_24604[s_24604_Idx].slice(0, -1)).concat(makeNimstrLit("\\\"")); } else { s_24604[s_24604_Idx] = makeNimstrLit("\\\"");};
			break;
		default: 
			F.line = 3941;
			if (s_24604[s_24604_Idx] != null) { addChar(s_24604[s_24604_Idx], c_24605); } else { s_24604[s_24604_Idx] = [c_24605, 0]; };
			break;
		}
	framePtr = F.prev;

	
}

function sysFatal_23221(message_23227) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 2830;
		var e_23229 = null;
		F.line = 2831;
		e_23229 = {m_type: NTI3648, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2832;
		e_23229.message = nimCopy(null, message_23227, NTI138);
		F.line = 2833;
		raiseException(e_23229, "AssertionError");
	framePtr = F.prev;

	
}

function raiseAssert_23216(msg_23218) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 3771;
		sysFatal_23221(msg_23218);
	framePtr = F.prev;

	
}

function failedAssertImpl_23239(msg_23241) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 3778;
		raiseAssert_23216(msg_23241);
	framePtr = F.prev;

	
}

function addQuoted_56076(s_56080, s_56080_Idx, x_56082) {
	var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 3964;
		if (s_56080[s_56080_Idx] != null) { s_56080[s_56080_Idx] = (s_56080[s_56080_Idx].slice(0, -1)).concat(makeNimstrLit("\"")); } else { s_56080[s_56080_Idx] = makeNimstrLit("\"");};
		L1: do {
			F.line = 3965;
			var c_56202 = 0;
			F.line = 3823;
			var i_56206 = 0;
			F.line = 3824;
			var L_56208 = (x_56082 != null ? x_56082.length-1 : 0);
			L2: do {
				F.line = 3825;
					L3: while (true) {
					if (!(i_56206 < L_56208)) break L3;
						F.line = 3826;
						c_56202 = x_56082[chckIndx(i_56206, 0, x_56082.length+0-1)-0];
						F.line = 3966;
						addEscapedChar_24601(s_56080, s_56080_Idx, c_56202);
						F.line = 3827;
						i_56206 = addInt(i_56206, 1);
						if (!(((x_56082 != null ? x_56082.length-1 : 0) == L_56208))) {
						F.line = 3828;
						failedAssertImpl_23239(makeNimstrLit("len(a) == L string modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 3967;
		if (s_56080[s_56080_Idx] != null) { s_56080[s_56080_Idx] = (s_56080[s_56080_Idx].slice(0, -1)).concat(makeNimstrLit("\"")); } else { s_56080[s_56080_Idx] = makeNimstrLit("\"");};
	framePtr = F.prev;

	
}

function collectionToString_56053(x_56057, prefix_56059, separator_56061, suffix_56063) {
	var result_56064 = [null];

	var F={procname:"collectionToString.collectionToString",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 2538;
		result_56064[0] = nimCopy(null, prefix_56059, NTI138);
		F.line = 2539;
		var firstElement_56065 = true;
		L1: do {
			F.line = 2540;
			var value_56074 = null;
			F.line = 3805;
			var i_56404 = 0;
			F.line = 3806;
			var L_56406 = (x_56057 != null ? x_56057.length : 0);
			L2: do {
				F.line = 3807;
					L3: while (true) {
					if (!(i_56404 < L_56406)) break L3;
						F.line = 3808;
						value_56074 = x_56057[chckIndx(i_56404, 0, x_56057.length+0-1)-0];
						if (firstElement_56065) {
						F.line = 2542;
						firstElement_56065 = false;
						}
						else {
							F.line = 2544;
						if (result_56064[0] != null) { result_56064[0] = (result_56064[0].slice(0, -1)).concat(separator_56061); } else { result_56064[0] = separator_56061;};
						}
						
						if ((value_56074 === null)) {
						F.line = 2549;
						if (result_56064[0] != null) { result_56064[0] = (result_56064[0].slice(0, -1)).concat(makeNimstrLit("nil")); } else { result_56064[0] = makeNimstrLit("nil");};
						}
						else {
							F.line = 2551;
						addQuoted_56076(result_56064, 0, value_56074);
						}
						
						F.line = 3809;
						i_56404 = addInt(i_56404, 1);
						if (!(((x_56057 != null ? x_56057.length : 0) == L_56406))) {
						F.line = 3810;
						failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2555;
		if (result_56064[0] != null) { result_56064[0] = (result_56064[0].slice(0, -1)).concat(suffix_56063); } else { result_56064[0] = suffix_56063;};
	framePtr = F.prev;

	return result_56064[0];

}

function dollar__56038(x_56043) {
		var Tmp1;

	var result_56044 = null;

	var F={procname:"$.$",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 2566;
		if ((x_56043 === null)) {
		Tmp1 = makeNimstrLit("nil");
		}
		else {
		Tmp1 = collectionToString_56053(x_56043, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]"));
		}
		
		result_56044 = nimCopy(null, Tmp1, NTI138);
	framePtr = F.prev;

	return result_56044;

}

function show_turn_start_56031(game_56033) {
	var F={procname:"game_of_knights.show_turn_start",prev:framePtr,filename:"game_of_knights.nim",line:0};
	framePtr = F;
		F.line = 43;
		var moves_possible_56035 = [null];
		F.line = 44;
		set_possible_moves_51072(game_56033, moves_possible_56035, 0);
		F.line = 45;
		send_54019(makeNimstrLit(" "));
		F.line = 46;
		send_54019(makeNimstrLit("-----------------"));
		if ((game_56033.current_player_number == 1)) {
		F.line = 48;
		send_54019(makeNimstrLit("Your turn (White Knight)"));
		}
		else {
			F.line = 50;
		send_54019(makeNimstrLit("AI\'s turn (Black Knight)"));
		}
		
		F.line = 51;
		send_54019(status_51078(game_56033));
		if ((game_56033.current_player_number == 1)) {
		F.line = 53;
		send_54019((makeNimstrLit("Possible moves: ").slice(0,-1)).concat(dollar__56038(moves_possible_56035[0])));
		F.line = 54;
		send_54019(makeNimstrLit("Send move:"));
		}
		else {
			F.line = 56;
		send_54019(makeNimstrLit("Thinking..."));
		}
		
	framePtr = F.prev;

	
}

function on_load_56408() {
	var F={procname:"game_of_knights.on_load",prev:framePtr,filename:"game_of_knights.nim",line:0};
	framePtr = F;
		F.line = 59;
		current_state_56011[0] = 1;
		F.line = 60;
		send_54019(makeNimstrLit("Game of Knights"));
		F.line = 61;
		send_54019(makeNimstrLit(" "));
		L1: do {
			F.line = 62;
			var line_56457 = null;
			F.line = 2199;
			var i_56461 = 0;
			if ((i_56461 <= 3)) {
			L2: do {
				F.line = 2201;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2202;
						line_56457 = instructions_56003[chckIndx(i_56461, 0, instructions_56003.length+0-1)-0];
						F.line = 63;
						send_54019(line_56457);
						if ((3 <= i_56461)) {
						F.line = 2203;
						break L2;
						}
						
						F.line = 2204;
						i_56461 = addInt(i_56461, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 64;
		show_turn_start_56031(game_56010[0]);
	framePtr = F.prev;

	
}
establish_terminal_on_start_function(on_load_56408);

function find_52413(a_52418, item_52420) {
	var result_52421 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2418;
			var i_52446 = null;
			F.line = 2185;
			var i_52459 = 0;
			L2: do {
				F.line = 2186;
					L3: while (true) {
					if (!(i_52459 < (a_52418 != null ? a_52418.length : 0))) break L3;
						F.line = 2187;
						i_52446 = a_52418[chckIndx(i_52459, 0, a_52418.length+0-1)-0];
						if (eqStrings(i_52446, item_52420)) {
						F.line = 2419;
						break BeforeRet;
						}
						
						F.line = 2420;
						result_52421 = addInt(result_52421, 1);
						F.line = 2188;
						i_52459 = addInt(i_52459, 1);
					}
			} while(false);
		} while(false);
		F.line = 2421;
		result_52421 = -1;
	} while (false);
	framePtr = F.prev;

	return result_52421;

}

function contains_52403(a_52408, item_52410) {
	var result_52411 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 2426;
		result_52411 = (0 <= find_52413(a_52408, item_52410));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_52411;

}

function handle_end_56028(game_56030) {
	var F={procname:"game_of_knights.handle_end",prev:framePtr,filename:"game_of_knights.nim",line:0};
	framePtr = F;
		F.line = 30;
		send_54019(makeNimstrLit(" "));
		F.line = 31;
		send_54019(makeNimstrLit("-----------------"));
		F.line = 32;
		send_54019(makeNimstrLit("GAME OVER"));
		F.line = 33;
		send_54019(status_51078(game_56030));
		F.line = 34;
		send_54019(makeNimstrLit(" "));
		if ((game_56030.winner_player_number == 1)) {
		F.line = 36;
		send_54019(makeNimstrLit("YOU WON! The AI is out of moves."));
		}
		else {
			F.line = 38;
		send_54019(makeNimstrLit("The AI won. You ran out of moves."));
		}
		
		F.line = 39;
		send_54019(makeNimstrLit("\x0ARefresh the browser page to play again."));
		F.line = 40;
		current_state_56011[0] = 3;
	framePtr = F.prev;

	
}

function on_input_56468(cmsg_56470) {
	var F={procname:"game_of_knights.on_input",prev:framePtr,filename:"game_of_knights.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 69;
		var moves_possible_56472 = [null];
		F.line = 70;
		var move_56473 = null;
		F.line = 71;
		var msg_56474 = cstrToNimstr(cmsg_56470);
		if (is_over_52604(game_56010[0])) {
		F.line = 73;
		current_state_56011[0] = 3;
		F.line = 74;
		send_54019(makeNimstrLit("game over"));
		F.line = 75;
		break BeforeRet;
		}
		
		if (!((current_state_56011[0] == 1))) {
		F.line = 77;
		break BeforeRet;
		}
		
		F.line = 78;
		set_possible_moves_51072(game_56010[0], moves_possible_56472, 0);
		if (contains_52403(moves_possible_56472[0], msg_56474)) {
		F.line = 80;
		send_54019((makeNimstrLit(">>").slice(0,-1)).concat(make_move_52579(game_56010[0], msg_56474)));
		F.line = 81;
		determine_winner_52616(game_56010[0]);
		if (is_over_52604(game_56010[0])) {
		F.line = 83;
		handle_end_56028(game_56010[0]);
		}
		else {
			F.line = 85;
			current_state_56011[0] = 2;
			F.line = 86;
			game_56010[0].current_player_number = next_player_number_52555(game_56010[0]);
			F.line = 87;
			show_turn_start_56031(game_56010[0]);
			F.line = 88;
			move_56473 = nimCopy(null, get_move_51095(current_player_52535(game_56010[0]), game_56010[0]), NTI138);
			F.line = 89;
			send_54019((makeNimstrLit(">>").slice(0,-1)).concat(make_move_52579(game_56010[0], move_56473)));
			F.line = 90;
			determine_winner_52616(game_56010[0]);
			if (is_over_52604(game_56010[0])) {
			F.line = 92;
			handle_end_56028(game_56010[0]);
			}
			else {
				F.line = 94;
				game_56010[0].current_player_number = next_player_number_52555(game_56010[0]);
				F.line = 95;
				show_turn_start_56031(game_56010[0]);
				F.line = 96;
				current_state_56011[0] = 1;
			}
			
		}
		
		}
		else {
			F.line = 98;
		send_54019((makeNimstrLit("\"").slice(0,-1)).concat(msg_56474.slice(0,-1),makeNimstrLit("\" is not a recognized move. Try again.")));
		}
		
	} while (false);
	framePtr = F.prev;

	
}
establish_terminal_on_input_function(on_input_56468);

function set_possible_moves_51028(self_51030, moves_51061) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 98;
		F.line = 2810;
		var e_52520 = null;
		F.line = 2811;
		e_52520 = {m_type: NTI3658, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2812;
		e_52520.message = nimCopy(null, makeNimstrLit("set_possible_moves(OrderedTable) must be overridden"), NTI138);
		F.line = 2813;
		e_52520.parent = null;
		raiseException(e_52520, "FieldError");
	framePtr = F.prev;

	
}

function set_possible_moves_51063(self_51030, moves_51061) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 34;
		set_possible_moves_51028(self_51030, moves_51061);
	framePtr = F.prev;

	
}

function sysFatal_19852(message_19858) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 2830;
		var e_19860 = null;
		F.line = 2831;
		e_19860 = {m_type: NTI3684, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2832;
		e_19860.message = nimCopy(null, message_19858, NTI138);
		F.line = 2833;
		raiseException(e_19860, "NilAccessError");
	framePtr = F.prev;

	
}

function chckNilDisp(p_19849, p_19849_Idx) {
		if ((p_19849_Idx == 0)) {
		sysFatal_19852(makeNimstrLit("cannot dispatch; dispatcher is nil"));
		}
		

	
}

function convert_coord_to_string_55058(dest_55062) {
	var result_55063 = null;

	var F={procname:"knights.convert_coord_to_string",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 62;
		result_55063 = nimCopy(null, makeNimstrLit(""), NTI138);
		F.line = 63;
		if (result_55063 != null) { addChar(result_55063, makeNimstrLit("ABCDEFGHIJ")[chckIndx(dest_55062[chckIndx(0, 0, dest_55062.length+0-1)-0], 0, makeNimstrLit("ABCDEFGHIJ").length+0-1)-0]); } else { result_55063 = [makeNimstrLit("ABCDEFGHIJ")[chckIndx(dest_55062[chckIndx(0, 0, dest_55062.length+0-1)-0], 0, makeNimstrLit("ABCDEFGHIJ").length+0-1)-0], 0]; };
		F.line = 64;
		if (result_55063 != null) { result_55063 = (result_55063.slice(0, -1)).concat(cstrToNimstr((dest_55062[chckIndx(1, 0, dest_55062.length+0-1)-0])+"")); } else { result_55063 = cstrToNimstr((dest_55062[chckIndx(1, 0, dest_55062.length+0-1)-0])+"");};
	framePtr = F.prev;

	return result_55063;

}

function set_possible_moves_55110(self_55112, moves_55115, moves_55115_Idx) {
	var F={procname:"knights.set_possible_moves",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 105;
		var valid_dest_55134 = nimCopy(null, [], NTI55133);
		F.line = 106;
		var dest_55137 = new Int32Array(2);
		F.line = 107;
		var cur_55138 = nimCopy(null, self_55112.player_pos[chckIndx(self_55112.current_player_number, 0, self_55112.player_pos.length+0-1)-0], NTI55042);
		L1: do {
			F.line = 108;
			var jump_55186 = new Int32Array(2);
			F.line = 2199;
			var i_55418 = 0;
			if ((i_55418 <= 7)) {
			L2: do {
				F.line = 2201;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2202;
						nimCopy(jump_55186, DIRECTIONS_55004[chckIndx(i_55418, 0, DIRECTIONS_55004.length+0-1)-0], NTI55006);
						F.line = 109;
						nimCopy(dest_55137, [addInt(cur_55138[chckIndx(0, 0, cur_55138.length+0-1)-0], jump_55186[chckIndx(0, 0, jump_55186.length+0-1)-0]), addInt(cur_55138[chckIndx(1, 0, cur_55138.length+0-1)-0], jump_55186[chckIndx(1, 0, jump_55186.length+0-1)-0])], NTI55187);
						if ((dest_55137[chckIndx(0, 0, dest_55137.length+0-1)-0] < 5)) {
						if ((dest_55137[chckIndx(1, 0, dest_55137.length+0-1)-0] < 5)) {
						if ((0 <= dest_55137[chckIndx(0, 0, dest_55137.length+0-1)-0])) {
						if ((0 <= dest_55137[chckIndx(1, 0, dest_55137.length+0-1)-0])) {
						if ((self_55112.board[chckIndx(dest_55137[chckIndx(0, 0, dest_55137.length+0-1)-0], 0, self_55112.board.length+0-1)-0][chckIndx(dest_55137[chckIndx(1, 0, dest_55137.length+0-1)-0], 0, self_55112.board[chckIndx(dest_55137[chckIndx(0, 0, dest_55137.length+0-1)-0], 0, self_55112.board.length+0-1)-0].length+0-1)-0] == 0)) {
						F.line = 115;
						var Tmp4 = nimCopy(null, dest_55137, NTI55136);
						if (valid_dest_55134 != null) { valid_dest_55134.push(Tmp4); } else { valid_dest_55134 = [Tmp4]; };
						}
						
						}
						
						}
						
						}
						
						}
						
						if ((7 <= i_55418)) {
						F.line = 2203;
						break L2;
						}
						
						F.line = 2204;
						i_55418 = addInt(i_55418, 1);
					}
			} while(false);
			}
			
		} while(false);
		L5: do {
			F.line = 116;
			var dest_55402 = new Int32Array(2);
			F.line = 3805;
			var i_55422 = 0;
			F.line = 3806;
			var L_55424 = (valid_dest_55134 != null ? valid_dest_55134.length : 0);
			L6: do {
				F.line = 3807;
					L7: while (true) {
					if (!(i_55422 < L_55424)) break L7;
						F.line = 3808;
						nimCopy(dest_55402, valid_dest_55134[chckIndx(i_55422, 0, valid_dest_55134.length+0-1)-0], NTI55118);
						F.line = 117;
						if (moves_55115[moves_55115_Idx] != null) { moves_55115[moves_55115_Idx].push(convert_coord_to_string_55058(dest_55402)); } else { moves_55115[moves_55115_Idx] = [convert_coord_to_string_55058(dest_55402)]; };
						F.line = 3809;
						i_55422 = addInt(i_55422, 1);
						if (!(((valid_dest_55134 != null ? valid_dest_55134.length : 0) == L_55424))) {
						F.line = 3810;
						failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function set_possible_moves_51065(self_51067, moves_51070, moves_51070_Idx) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 94;
		moves_51070[moves_51070_Idx] = nimCopy(null, [], NTI52505);
	framePtr = F.prev;

	
}

function set_possible_moves_51072(self_51067, moves_51070, moves_51070_Idx) {
	var F={procname:"turn_based_game.set_possible_moves",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 654;
		chckNilDisp(self_51067);
		if (isObj(self_51067.m_type, NTI55034)) {
		F.line = 35;
		set_possible_moves_55110(self_51067, moves_51070, moves_51070_Idx);
		}
		else {
		if (isObj(self_51067.m_type, NTI51005)) {
		F.line = 35;
		set_possible_moves_51065(self_51067, moves_51070, moves_51070_Idx);
		}
		else {
		if (isObj(self_51067.m_type, NTI51005)) {
		F.line = 35;
		set_possible_moves_51065(self_51067, moves_51070, moves_51070_Idx);
		}
		}}
	framePtr = F.prev;

	
}

function status_55517(self_55519) {
	var result_55520 = null;

	var F={procname:"knights.status",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 141;
		result_55520 = nimCopy(null, makeNimstrLit("    "), NTI138);
		L1: do {
			F.line = 142;
			var n_55531 = 0;
			F.line = 2032;
			var res_55557 = 0;
			L2: do {
				F.line = 2033;
					L3: while (true) {
					if (!(res_55557 <= 4)) break L3;
						F.line = 2034;
						n_55531 = res_55557;
						F.line = 143;
						if (result_55520 != null) { result_55520 = (result_55520.slice(0, -1)).concat((makeNimstrLit(" ").slice(0,-1)).concat(cstrToNimstr((n_55531)+""))); } else { result_55520 = (makeNimstrLit(" ").slice(0,-1)).concat(cstrToNimstr((n_55531)+""));};
						F.line = 2035;
						res_55557 = addInt(res_55557, 1);
					}
			} while(false);
		} while(false);
		F.line = 144;
		if (result_55520 != null) { result_55520 = (result_55520.slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_55520 = makeNimstrLit("\x0A");};
		L4: do {
			F.line = 145;
			var x_55542 = 0;
			F.line = 2032;
			var res_55571 = 0;
			L5: do {
				F.line = 2033;
					L6: while (true) {
					if (!(res_55571 <= 4)) break L6;
						F.line = 2034;
						x_55542 = res_55571;
						F.line = 146;
						if (result_55520 != null) { result_55520 = (result_55520.slice(0, -1)).concat((makeNimstrLit("  ").slice(0,-1)).concat([makeNimstrLit("ABCDEFGHIJ")[chckIndx(x_55542, 0, makeNimstrLit("ABCDEFGHIJ").length+0-1)-0]],makeNimstrLit(" "))); } else { result_55520 = (makeNimstrLit("  ").slice(0,-1)).concat([makeNimstrLit("ABCDEFGHIJ")[chckIndx(x_55542, 0, makeNimstrLit("ABCDEFGHIJ").length+0-1)-0]],makeNimstrLit(" "));};
						L7: do {
							F.line = 147;
							var y_55553 = 0;
							F.line = 2032;
							var res_55565 = 0;
							L8: do {
								F.line = 2033;
									L9: while (true) {
									if (!(res_55565 <= 4)) break L9;
										F.line = 2034;
										y_55553 = res_55565;
										F.line = 148;
										if (result_55520 != null) { result_55520 = (result_55520.slice(0, -1)).concat((makeNimstrLit(" ").slice(0,-1)).concat([makeNimstrLit(".WBX")[chckIndx(self_55519.board[chckIndx(x_55542, 0, self_55519.board.length+0-1)-0][chckIndx(y_55553, 0, self_55519.board[chckIndx(x_55542, 0, self_55519.board.length+0-1)-0].length+0-1)-0], 0, makeNimstrLit(".WBX").length+0-1)-0], 0])); } else { result_55520 = (makeNimstrLit(" ").slice(0,-1)).concat([makeNimstrLit(".WBX")[chckIndx(self_55519.board[chckIndx(x_55542, 0, self_55519.board.length+0-1)-0][chckIndx(y_55553, 0, self_55519.board[chckIndx(x_55542, 0, self_55519.board.length+0-1)-0].length+0-1)-0], 0, makeNimstrLit(".WBX").length+0-1)-0], 0]);};
										F.line = 2035;
										res_55565 = addInt(res_55565, 1);
									}
							} while(false);
						} while(false);
						F.line = 149;
						if (result_55520 != null) { result_55520 = (result_55520.slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_55520 = makeNimstrLit("\x0A");};
						F.line = 2035;
						res_55571 = addInt(res_55571, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_55520;

}

function is_over_52599(self_52601) {
	var result_52602 = false;

	var F={procname:"turn_based_game.is_over",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 127;
		result_52602 = !((self_52601.winner_player_number == 0));
	framePtr = F.prev;

	return result_52602;

}

function is_over_52604(self_52601) {
	var result_52607 = false;

	var F={procname:"turn_based_game.is_over",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 126;
		result_52607 = is_over_52599(self_52601);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_52607;

}

function status_51074(self_51076) {
	var result_52611 = null;

	var F={procname:"turn_based_game.status",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (is_over_52604(self_51076)) {
		F.line = 132;
		result_52611 = nimCopy(null, makeNimstrLit("game is over"), NTI138);
		break BeforeRet;
		}
		else {
			F.line = 134;
			result_52611 = nimCopy(null, makeNimstrLit("game is active"), NTI138);
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_52611;

}

function status_51078(self_51076) {
	var result_52611 = null;

	var F={procname:"turn_based_game.status",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 654;
		chckNilDisp(self_51076);
		if (isObj(self_51076.m_type, NTI55034)) {
		F.line = 36;
		result_52611 = status_55517(self_51076);
		break BeforeRet;
		}
		else {
		if (isObj(self_51076.m_type, NTI51005)) {
		F.line = 36;
		result_52611 = status_51074(self_51076);
		break BeforeRet;
		}
		else {
		if (isObj(self_51076.m_type, NTI51005)) {
		F.line = 36;
		result_52611 = status_51074(self_51076);
		break BeforeRet;
		}
		}}
	} while (false);
	framePtr = F.prev;

	return result_52611;

}

function display_51080(self_51082, msg_51083) {
	var F={procname:"turn_based_game.display",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 46;
		rawEcho(msg_51083);
	framePtr = F.prev;

	
}

function display_51085(self_51082, msg_51083) {
	var F={procname:"turn_based_game.display",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 45;
		display_51080(self_51082, msg_51083);
	framePtr = F.prev;

	
}

function next_player_number_52550(self_52552) {
	var result_52553 = 0;

	var F={procname:"turn_based_game.next_player_number",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 115;
		result_52553 = addInt((self_52552.current_player_number % self_52552.player_count), 1);
	framePtr = F.prev;

	return result_52553;

}

function next_player_number_52555(self_52552) {
	var result_52558 = 0;

	var F={procname:"turn_based_game.next_player_number",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 114;
		result_52558 = next_player_number_52550(self_52552);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_52558;

}

function scoring_55575(self_55577) {
	var result_55578 = 0.0;

	var F={procname:"knights.scoring",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((self_55577.winner_player_number == self_55577.current_player_number)) {
		F.line = 164;
		result_55578 = 1.0000000000000000e+03;
		break BeforeRet;
		}
		
		if (!((self_55577.winner_player_number == 0))) {
		F.line = 166;
		result_55578 = -1.0000000000000000e+03;
		break BeforeRet;
		}
		
		F.line = 167;
		var poss_moves_55596 = [nimCopy(null, [], NTI55595)];
		F.line = 168;
		set_possible_moves_51072(self_55577, poss_moves_55596, 0);
		F.line = 169;
		var my_move_score_55605 = ((poss_moves_55596[0] != null ? poss_moves_55596[0].length : 0) * 1.0000000000000000e+02);
		F.line = 170;
		var save_player_55606 = self_55577.current_player_number;
		F.line = 171;
		self_55577.current_player_number = next_player_number_52555(self_55577);
		F.line = 172;
		set_possible_moves_51072(self_55577, poss_moves_55596, 0);
		F.line = 173;
		self_55577.current_player_number = save_player_55606;
		F.line = 174;
		var opp_move_score_55615 = ((poss_moves_55596[0] != null ? poss_moves_55596[0].length : 0) * 1.0000000000000000e+02);
		F.line = 175;
		result_55578 = (my_move_score_55605 - opp_move_score_55615);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_55578;

}

function scoring_52634(self_52636) {
	var result_52637 = 0.0;

	var F={procname:"turn_based_game.scoring",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 142;
		F.line = 2810;
		var e_52649 = null;
		F.line = 2811;
		e_52649 = {m_type: NTI3658, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2812;
		e_52649.message = nimCopy(null, makeNimstrLit("scoring() must be overridden (if used)"), NTI138);
		F.line = 2813;
		e_52649.parent = null;
		raiseException(e_52649, "FieldError");
	framePtr = F.prev;

	return result_52637;

}

function scoring_52639(self_52636) {
	var result_52642 = 0.0;

	var F={procname:"turn_based_game.scoring",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 654;
		chckNilDisp(self_52636);
		if (isObj(self_52636.m_type, NTI55034)) {
		F.line = 141;
		result_52642 = scoring_55575(self_52636);
		break BeforeRet;
		}
		else {
		if (isObj(self_52636.m_type, NTI51005)) {
		F.line = 141;
		result_52642 = scoring_52634(self_52636);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_52642;

}

function get_state_55619(self_55621) {
	var result_55622 = null;

	var F={procname:"knights.get_state",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		if ((self_55621.current_player_number == 1)) {
		F.line = 180;
		result_55622 = nimCopy(null, makeNimstrLit("1"), NTI138);
		}
		else {
			F.line = 182;
			result_55622 = nimCopy(null, makeNimstrLit("2"), NTI138);
		}
		
		L1: do {
			F.line = 183;
			var row_55670 = new Int32Array(5);
			F.line = 2197;
			var colontmp__55724 = [new Int32Array(5), new Int32Array(5), new Int32Array(5), new Int32Array(5), new Int32Array(5)];
			F.line = 183;
			nimCopy(colontmp__55724, self_55621.board, NTI55038);
			F.line = 2199;
			var i_55727 = 0;
			if ((i_55727 <= 4)) {
			L2: do {
				F.line = 2201;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2202;
						nimCopy(row_55670, colontmp__55724[chckIndx(i_55727, 0, colontmp__55724.length+0-1)-0], NTI55037);
						L4: do {
							F.line = 184;
							var column_55718 = 0;
							F.line = 2199;
							var i_55723 = 0;
							if ((i_55723 <= 4)) {
							L5: do {
								F.line = 2201;
									L6: while (true) {
									if (!true) break L6;
										F.line = 2202;
										column_55718 = row_55670[chckIndx(i_55723, 0, row_55670.length+0-1)-0];
										F.line = 185;
										if (result_55622 != null) { addChar(result_55622, makeNimstrLit(".WBX")[chckIndx(column_55718, 0, makeNimstrLit(".WBX").length+0-1)-0]); } else { result_55622 = [makeNimstrLit(".WBX")[chckIndx(column_55718, 0, makeNimstrLit(".WBX").length+0-1)-0], 0]; };
										if ((4 <= i_55723)) {
										F.line = 2203;
										break L5;
										}
										
										F.line = 2204;
										i_55723 = addInt(i_55723, 1);
									}
							} while(false);
							}
							
						} while(false);
						if ((4 <= i_55727)) {
						F.line = 2203;
						break L2;
						}
						
						F.line = 2204;
						i_55727 = addInt(i_55727, 1);
					}
			} while(false);
			}
			
		} while(false);
	framePtr = F.prev;

	return result_55622;

}

function get_state_52659(self_52661) {
	var result_52662 = null;

	var F={procname:"turn_based_game.get_state",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 146;
		F.line = 2810;
		var e_52674 = null;
		F.line = 2811;
		e_52674 = {m_type: NTI3658, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2812;
		e_52674.message = nimCopy(null, makeNimstrLit("get_state() must be overridden (if used)"), NTI138);
		F.line = 2813;
		e_52674.parent = null;
		raiseException(e_52674, "FieldError");
	framePtr = F.prev;

	return result_52662;

}

function get_state_52664(self_52661) {
	var result_52667 = null;

	var F={procname:"turn_based_game.get_state",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 654;
		chckNilDisp(self_52661);
		if (isObj(self_52661.m_type, NTI55034)) {
		F.line = 145;
		result_52667 = get_state_55619(self_52661);
		break BeforeRet;
		}
		else {
		if (isObj(self_52661.m_type, NTI51005)) {
		F.line = 145;
		result_52667 = get_state_52659(self_52661);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_52667;

}

function rawParseInt_27995(s_27997, b_27999, b_27999_Idx, start_28000) {
	var result_28001 = 0;

	var F={procname:"parseutils.rawParseInt",prev:framePtr,filename:"lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 232;
		var sign_28002 = -1;
		F.line = 233;
		var i_28003 = start_28000;
		if ((s_27997[chckIndx(i_28003, 0, s_27997.length+0-1)-0] == 43)) {
		F.line = 234;
		i_28003 = addInt(i_28003, 1);
		}
		else {
		if ((s_27997[chckIndx(i_28003, 0, s_27997.length+0-1)-0] == 45)) {
		F.line = 236;
		i_28003 = addInt(i_28003, 1);
		F.line = 237;
		sign_28002 = 1;
		}
		}
		if ((ConstSet2[s_27997[chckIndx(i_28003, 0, s_27997.length+0-1)-0]] != undefined)) {
		F.line = 239;
		b_27999[b_27999_Idx] = 0;
		L1: do {
			F.line = 240;
				L2: while (true) {
				if (!(ConstSet3[s_27997[chckIndx(i_28003, 0, s_27997.length+0-1)-0]] != undefined)) break L2;
					F.line = 241;
					b_27999[b_27999_Idx] = subInt(mulInt(b_27999[b_27999_Idx], 10), subInt(s_27997[chckIndx(i_28003, 0, s_27997.length+0-1)-0], 48));
					F.line = 242;
					i_28003 = addInt(i_28003, 1);
					L3: do {
						F.line = 243;
							L4: while (true) {
							if (!(s_27997[chckIndx(i_28003, 0, s_27997.length+0-1)-0] == 95)) break L4;
								F.line = 243;
								i_28003 = addInt(i_28003, 1);
							}
					} while(false);
				}
		} while(false);
		F.line = 244;
		b_27999[b_27999_Idx] = mulInt(b_27999[b_27999_Idx], sign_28002);
		F.line = 245;
		result_28001 = subInt(i_28003, start_28000);
		}
		
	framePtr = F.prev;

	return result_28001;

}

function npuParseBiggestInt(s_28077, number_28079, number_28079_Idx, start_28080) {
	var result_28081 = 0;

	var F={procname:"parseutils.parseBiggestInt",prev:framePtr,filename:"lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 253;
		var res_28082 = [0];
		F.line = 256;
		result_28081 = rawParseInt_27995(s_28077, res_28082, 0, start_28080);
		F.line = 257;
		number_28079[number_28079_Idx] = res_28082[0];
	framePtr = F.prev;

	return result_28081;

}

function raiseRangeError() {
		var e_14876 = null;
		e_14876 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, up: null};
		e_14876.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_14876.parent = null;
		raiseException(e_14876, "RangeError");

	
}

function npuParseInt(s_28087, number_28089, number_28089_Idx, start_28090) {
			var Tmp1;
				var Tmp2;

	var result_28091 = 0;

	var F={procname:"parseutils.parseInt",prev:framePtr,filename:"lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 264;
		var res_28092 = [0];
		F.line = 265;
		result_28091 = npuParseBiggestInt(s_28087, res_28092, 0, start_28090);
			if (!true) Tmp1 = false; else {				if ((res_28092[0] < -2147483648)) Tmp2 = true; else {					Tmp2 = (2147483647 < res_28092[0]);				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 268;
		F.line = 2810;
		var e_28119 = null;
		F.line = 2811;
		e_28119 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2812;
		e_28119.message = nimCopy(null, makeNimstrLit("overflow"), NTI138);
		F.line = 2813;
		e_28119.parent = null;
		raiseException(e_28119, "OverflowError");
		}
		else {
		if (!((result_28091 == 0))) {
		F.line = 270;
		number_28089[number_28089_Idx] = chckRange(res_28092[0], -2147483648, 2147483647);
		}
		}
	framePtr = F.prev;

	return result_28091;

}

function nsuParseInt(s_37589) {
			var Tmp1;

	var result_37590 = [0];

		var L_37592 = npuParseInt(s_37589, result_37590, 0, 0);
			if (!((L_37592 == (s_37589 != null ? s_37589.length-1 : 0)))) Tmp1 = true; else {				Tmp1 = (L_37592 == 0);			}		if (Tmp1) {
		var e_37599 = null;
		e_37599 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, up: null};
		e_37599.message = nimCopy(null, (makeNimstrLit("invalid integer: ").slice(0,-1)).concat(s_37589), NTI138);
		e_37599.parent = null;
		raiseException(e_37599, "ValueError");
		}
		

	return result_37590[0];

}

function convert_string_to_coord_55064(dest_55066) {
	var result_55069 = new Int32Array(2);

	var F={procname:"knights.convert_string_to_coord",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 70;
		var x_55070 = subInt(((dest_55066[chckIndx(0, 0, dest_55066.length+0-1)-0])|0), 65);
		F.line = 71;
		var y_55071 = nsuParseInt(nimCharToStr(dest_55066[chckIndx(1, 0, dest_55066.length+0-1)-0]));
		F.line = 72;
		nimCopy(result_55069, [x_55070, y_55071], NTI55072);
	framePtr = F.prev;

	return result_55069;

}

function place_player_55076(self_55078, knight_55079, coord_55082) {
	var F={procname:"knights.place_player",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 77;
		var src_55086 = nimCopy(null, self_55078.player_pos[chckIndx(knight_55079, 0, self_55078.player_pos.length+0-1)-0], NTI55042);
		F.line = 78;
		self_55078.board[chckIndx(src_55086[chckIndx(0, 0, src_55086.length+0-1)-0], 0, self_55078.board.length+0-1)-0][chckIndx(src_55086[chckIndx(1, 0, src_55086.length+0-1)-0], 0, self_55078.board[chckIndx(src_55086[chckIndx(0, 0, src_55086.length+0-1)-0], 0, self_55078.board.length+0-1)-0].length+0-1)-0] = 3;
		F.line = 79;
		self_55078.board[chckIndx(coord_55082[chckIndx(0, 0, coord_55082.length+0-1)-0], 0, self_55078.board.length+0-1)-0][chckIndx(coord_55082[chckIndx(1, 0, coord_55082.length+0-1)-0], 0, self_55078.board[chckIndx(coord_55082[chckIndx(0, 0, coord_55082.length+0-1)-0], 0, self_55078.board.length+0-1)-0].length+0-1)-0] = knight_55079;
		F.line = 80;
		nimCopy(self_55078.player_pos[chckIndx(knight_55079, 0, self_55078.player_pos.length+0-1)-0], coord_55082, NTI55081);
	framePtr = F.prev;

	
}

function place_player_55084(self_55078, knight_55079, coord_55082) {
	var F={procname:"knights.place_player",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 76;
		place_player_55076(self_55078, knight_55079, coord_55082);
	framePtr = F.prev;

	
}

function invalidFormatString_42602() {
		var e_42610 = null;
		e_42610 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, up: null};
		e_42610.message = nimCopy(null, makeNimstrLit("invalid format string"), NTI138);
		e_42610.parent = null;
		raiseException(e_42610, "ValueError");

	
}

function nsuToLowerAsciiChar(c_35782) {
	var result_35783 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"lib/pure/strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet7[c_35782] != undefined)) {
		F.line = 208;
		result_35783 = chckRange(addInt(c_35782, 32), 0, 255);
		}
		else {
			F.line = 210;
			result_35783 = c_35782;
		}
		
	framePtr = F.prev;

	return result_35783;

}

function nsuCmpIgnoreStyle(a_36047, b_36048) {
						var Tmp7;

	var result_36049 = 0;

		var i_36050 = 0;
		var j_36051 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					L3: do {
							L4: while (true) {
							if (!(a_36047[i_36050] == 95)) break L4;
								i_36050 += 1;
							}
					} while(false);
					L5: do {
							L6: while (true) {
							if (!(b_36048[j_36051] == 95)) break L6;
								j_36051 += 1;
							}
					} while(false);
					var aa_36070 = nsuToLowerAsciiChar(a_36047[i_36050]);
					var bb_36071 = nsuToLowerAsciiChar(b_36048[j_36051]);
					result_36049 = (aa_36070 - bb_36071);
						if (!((result_36049 == 0))) Tmp7 = true; else {							Tmp7 = (aa_36070 == 0);						}					if (Tmp7) {
					break L1;
					}
					
					i_36050 += 1;
					j_36051 += 1;
				}
		} while(false);

	return result_36049;

}

function findNormalized_42578(x_42580, inArray_42582) {
	var result_42583 = 0;

	BeforeRet: do {
		var i_42584 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_42584 < (inArray_42582 != null ? (inArray_42582.length-1) : -1))) break L2;
					if ((nsuCmpIgnoreStyle(x_42580, inArray_42582[i_42584]) == 0)) {
					result_42583 = i_42584;
					break BeforeRet;
					}
					
					i_42584 += 2;
				}
		} while(false);
		result_42583 = -1;
		break BeforeRet;
	} while (false);

	return result_42583;

}

function nsuAddf(s_42623, s_42623_Idx, formatstr_42624, a_42626) {
						var Tmp5;
						var Tmp8;
								var Tmp9;
							var Tmp12;

		var i_42629 = 0;
		var num_42630 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_42629 < (formatstr_42624 != null ? formatstr_42624.length-1 : 0))) break L2;
					if ((formatstr_42624[i_42629] == 36)) {
					switch (formatstr_42624[(i_42629 + 1)]) {
					case 35:
						if (((a_42626 != null ? (a_42626.length-1) : -1) < num_42630)) {
						invalidFormatString_42602();
						}
						
						if (s_42623[s_42623_Idx] != null) { s_42623[s_42623_Idx] = (s_42623[s_42623_Idx].slice(0, -1)).concat(a_42626[num_42630]); } else { s_42623[s_42623_Idx] = a_42626[num_42630];};
						i_42629 += 2;
						num_42630 += 1;
						break;
					case 36:
						if (s_42623[s_42623_Idx] != null) { addChar(s_42623[s_42623_Idx], 36); } else { s_42623[s_42623_Idx] = [36, 0]; };
						i_42629 += 2;
						break;
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
					case 54:
					case 55:
					case 56:
					case 57:
					case 45:
						var j_42673 = 0;
						i_42629 += 1;
						var negative_42683 = (formatstr_42624[i_42629] == 45);
						if (negative_42683) {
						i_42629 += 1;
						}
						
						L3: do {
								L4: while (true) {
								if (!(ConstSet4[formatstr_42624[i_42629]] != undefined)) break L4;
									j_42673 = (((j_42673 * 10) + formatstr_42624[i_42629]) - 48);
									i_42629 += 1;
								}
						} while(false);
						if (!(negative_42683)) {
						Tmp5 = (j_42673 - 1);
						}
						else {
						Tmp5 = ((a_42626 != null ? a_42626.length : 0) - j_42673);
						}
						
						var idx_42729 = Tmp5;
						if (((a_42626 != null ? (a_42626.length-1) : -1) < idx_42729)) {
						invalidFormatString_42602();
						}
						
						if (s_42623[s_42623_Idx] != null) { s_42623[s_42623_Idx] = (s_42623[s_42623_Idx].slice(0, -1)).concat(a_42626[idx_42729]); } else { s_42623[s_42623_Idx] = a_42626[idx_42729];};
						break;
					case 123:
						var j_42745 = (i_42629 + 2);
						var k_42746 = 0;
						var negative_42747 = (formatstr_42624[j_42745] == 45);
						if (negative_42747) {
						j_42745 += 1;
						}
						
						var isNumber_42757 = 0;
						L6: do {
								L7: while (true) {
								if (!!((ConstSet5[formatstr_42624[j_42745]] != undefined))) break L7;
									if ((ConstSet6[formatstr_42624[j_42745]] != undefined)) {
									k_42746 = (((k_42746 * 10) + formatstr_42624[j_42745]) - 48);
									if ((isNumber_42757 == 0)) {
									isNumber_42757 = 1;
									}
									
									}
									else {
										isNumber_42757 = -1;
									}
									
									j_42745 += 1;
								}
						} while(false);
						if ((isNumber_42757 == 1)) {
						if (!(negative_42747)) {
						Tmp8 = (k_42746 - 1);
						}
						else {
						Tmp8 = ((a_42626 != null ? a_42626.length : 0) - k_42746);
						}
						
						var idx_42804 = Tmp8;
						if (((a_42626 != null ? (a_42626.length-1) : -1) < idx_42804)) {
						invalidFormatString_42602();
						}
						
						if (s_42623[s_42623_Idx] != null) { s_42623[s_42623_Idx] = (s_42623[s_42623_Idx].slice(0, -1)).concat(a_42626[idx_42804]); } else { s_42623[s_42623_Idx] = a_42626[idx_42804];};
						}
						else {
							var x_42820 = findNormalized_42578((formatstr_42624.slice((i_42629 + 2), ((j_42745 - 1))+1).concat(0)), a_42626);
								if (!(0 <= x_42820)) Tmp9 = false; else {									Tmp9 = (x_42820 < (a_42626 != null ? (a_42626.length-1) : -1));								}							if (Tmp9) {
							if (s_42623[s_42623_Idx] != null) { s_42623[s_42623_Idx] = (s_42623[s_42623_Idx].slice(0, -1)).concat(a_42626[(x_42820 + 1)]); } else { s_42623[s_42623_Idx] = a_42626[(x_42820 + 1)];};
							}
							else {
							invalidFormatString_42602();
							}
							
						}
						
						i_42629 = (j_42745 + 1);
						break;
					case 97:
					case 98:
					case 99:
					case 100:
					case 101:
					case 102:
					case 103:
					case 104:
					case 105:
					case 106:
					case 107:
					case 108:
					case 109:
					case 110:
					case 111:
					case 112:
					case 113:
					case 114:
					case 115:
					case 116:
					case 117:
					case 118:
					case 119:
					case 120:
					case 121:
					case 122:
					case 65:
					case 66:
					case 67:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 73:
					case 74:
					case 75:
					case 76:
					case 77:
					case 78:
					case 79:
					case 80:
					case 81:
					case 82:
					case 83:
					case 84:
					case 85:
					case 86:
					case 87:
					case 88:
					case 89:
					case 90:
					case 128:
					case 129:
					case 130:
					case 131:
					case 132:
					case 133:
					case 134:
					case 135:
					case 136:
					case 137:
					case 138:
					case 139:
					case 140:
					case 141:
					case 142:
					case 143:
					case 144:
					case 145:
					case 146:
					case 147:
					case 148:
					case 149:
					case 150:
					case 151:
					case 152:
					case 153:
					case 154:
					case 155:
					case 156:
					case 157:
					case 158:
					case 159:
					case 160:
					case 161:
					case 162:
					case 163:
					case 164:
					case 165:
					case 166:
					case 167:
					case 168:
					case 169:
					case 170:
					case 171:
					case 172:
					case 173:
					case 174:
					case 175:
					case 176:
					case 177:
					case 178:
					case 179:
					case 180:
					case 181:
					case 182:
					case 183:
					case 184:
					case 185:
					case 186:
					case 187:
					case 188:
					case 189:
					case 190:
					case 191:
					case 192:
					case 193:
					case 194:
					case 195:
					case 196:
					case 197:
					case 198:
					case 199:
					case 200:
					case 201:
					case 202:
					case 203:
					case 204:
					case 205:
					case 206:
					case 207:
					case 208:
					case 209:
					case 210:
					case 211:
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 226:
					case 227:
					case 228:
					case 229:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
					case 236:
					case 237:
					case 238:
					case 239:
					case 240:
					case 241:
					case 242:
					case 243:
					case 244:
					case 245:
					case 246:
					case 247:
					case 248:
					case 249:
					case 250:
					case 251:
					case 252:
					case 253:
					case 254:
					case 255:
					case 95:
						var j_42828 = (i_42629 + 1);
						L10: do {
								L11: while (true) {
								if (!(ConstSet8[formatstr_42624[j_42828]] != undefined)) break L11;
									j_42828 += 1;
								}
						} while(false);
						var x_42847 = findNormalized_42578((formatstr_42624.slice((i_42629 + 1), ((j_42828 - 1))+1).concat(0)), a_42626);
							if (!(0 <= x_42847)) Tmp12 = false; else {								Tmp12 = (x_42847 < (a_42626 != null ? (a_42626.length-1) : -1));							}						if (Tmp12) {
						if (s_42623[s_42623_Idx] != null) { s_42623[s_42623_Idx] = (s_42623[s_42623_Idx].slice(0, -1)).concat(a_42626[(x_42847 + 1)]); } else { s_42623[s_42623_Idx] = a_42626[(x_42847 + 1)];};
						}
						else {
						invalidFormatString_42602();
						}
						
						i_42629 = j_42828;
						break;
					default: 
						invalidFormatString_42602();
						break;
					}
					}
					else {
						if (s_42623[s_42623_Idx] != null) { addChar(s_42623[s_42623_Idx], formatstr_42624[i_42629]); } else { s_42623[s_42623_Idx] = [formatstr_42624[i_42629], 0]; };
						i_42629 += 1;
					}
					
				}
		} while(false);

	
}

function nsuFormatVarargs(formatstr_42899, a_42901) {
	var result_42902 = [null];

		result_42902[0] = nimCopy(null, mnewString(0), NTI138);
		nsuAddf(result_42902, 0, formatstr_42899, a_42901);

	return result_42902[0];

}

function make_move_55425(self_55427, move_55428) {
	var result_55429 = null;

	var F={procname:"knights.make_move",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 121;
		var dest_55430 = convert_string_to_coord_55064(move_55428);
		F.line = 122;
		place_player_55084(self_55427, self_55427.current_player_number, dest_55430);
		F.line = 123;
		result_55429 = nimCopy(null, nsuFormatVarargs(makeNimstrLit("Jumped to $#."), [move_55428]), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_55429;

}

function make_move_52573(self_52575, move_52576) {
	var result_52577 = null;

	var F={procname:"turn_based_game.make_move",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 123;
		F.line = 2810;
		var e_52589 = null;
		F.line = 2811;
		e_52589 = {m_type: NTI3658, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2812;
		e_52589.message = nimCopy(null, makeNimstrLit("make_move() must be overridden"), NTI138);
		F.line = 2813;
		e_52589.parent = null;
		raiseException(e_52589, "FieldError");
	framePtr = F.prev;

	return result_52577;

}

function make_move_52579(self_52575, move_52576) {
	var result_52582 = null;

	var F={procname:"turn_based_game.make_move",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 654;
		chckNilDisp(self_52575);
		if (isObj(self_52575.m_type, NTI55034)) {
		F.line = 122;
		result_52582 = make_move_55425(self_52575, move_52576);
		break BeforeRet;
		}
		else {
		if (isObj(self_52575.m_type, NTI51005)) {
		F.line = 122;
		result_52582 = make_move_52573(self_52575, move_52576);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_52582;

}

function finish_turn_52567(self_52569) {
	var F={procname:"turn_based_game.finish_turn",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 119;
		self_52569.current_player_number = next_player_number_52555(self_52569);
	framePtr = F.prev;

	
}

function finish_turn_52571(self_52569) {
	var F={procname:"turn_based_game.finish_turn",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 118;
		finish_turn_52567(self_52569);
	framePtr = F.prev;

	
}

function nsuStartsWith(s_39453, prefix_39454) {
	var result_39455 = false;

	BeforeRet: do {
		var i_39456 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					if ((prefix_39454[i_39456] == 0)) {
					result_39455 = true;
					break BeforeRet;
					}
					
					if (!((s_39453[i_39456] == prefix_39454[i_39456]))) {
					result_39455 = false;
					break BeforeRet;
					}
					
					i_39456 += 1;
				}
		} while(false);
	} while (false);

	return result_39455;

}

function nsuFindChar(s_39803, sub_39804, start_39805, last_39806) {
		var Tmp1;

	var result_39807 = 0;

	BeforeRet: do {
		if ((last_39806 == 0)) {
		Tmp1 = (s_39803 != null ? (s_39803.length-2) : -1);
		}
		else {
		Tmp1 = last_39806;
		}
		
		var last_39809 = Tmp1;
		L2: do {
			var i_40409 = 0;
			var colontmp__40609 = 0;
			colontmp__40609 = last_39809;
			var res_40612 = start_39805;
			L3: do {
					L4: while (true) {
					if (!(res_40612 <= colontmp__40609)) break L4;
						i_40409 = res_40612;
						if ((sub_39804 == s_39803[i_40409])) {
						result_39807 = i_40409;
						break BeforeRet;
						}
						
						res_40612 += 1;
					}
			} while(false);
		} while(false);
		result_39807 = -1;
		break BeforeRet;
	} while (false);

	return result_39807;

}

function find_55924(a_55929, item_55931) {
	var result_55932 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2418;
			var i_55957 = 0;
			F.line = 2185;
			var i_55970 = 0;
			L2: do {
				F.line = 2186;
					L3: while (true) {
					if (!(i_55970 < (a_55929 != null ? a_55929.length : 0))) break L3;
						F.line = 2187;
						i_55957 = a_55929[chckIndx(i_55970, 0, a_55929.length+0-1)-0];
						if ((i_55957 == item_55931)) {
						F.line = 2419;
						break BeforeRet;
						}
						
						F.line = 2420;
						result_55932 = addInt(result_55932, 1);
						F.line = 2188;
						i_55970 = addInt(i_55970, 1);
					}
			} while(false);
		} while(false);
		F.line = 2421;
		result_55932 = -1;
	} while (false);
	framePtr = F.prev;

	return result_55932;

}

function contains_55914(a_55919, item_55921) {
	var result_55922 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 2426;
		result_55922 = (0 <= find_55924(a_55919, item_55921));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_55922;

}

function restore_state_55728(self_55730, state_55731) {
	var F={procname:"knights.restore_state",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 189;
		var i_55732 = 0;
		F.line = 190;
		var e_55733 = 0;
		if (nsuStartsWith(state_55731, makeNimstrLit("1"))) {
		F.line = 192;
		self_55730.current_player_number = 1;
		}
		else {
			F.line = 194;
			self_55730.current_player_number = 2;
		}
		
		L1: do {
			F.line = 195;
			var x_55744 = 0;
			F.line = 2032;
			var res_55983 = 0;
			L2: do {
				F.line = 2033;
					L3: while (true) {
					if (!(res_55983 <= 4)) break L3;
						F.line = 2034;
						x_55744 = res_55983;
						L4: do {
							F.line = 196;
							var y_55755 = 0;
							F.line = 2032;
							var res_55977 = 0;
							L5: do {
								F.line = 2033;
									L6: while (true) {
									if (!(res_55977 <= 4)) break L6;
										F.line = 2034;
										y_55755 = res_55977;
										F.line = 197;
										i_55732 = addInt(addInt(mulInt(x_55744, 5), y_55755), 1);
										F.line = 198;
										e_55733 = nsuFindChar(makeNimstrLit(".WBX"), state_55731[chckIndx(i_55732, 0, state_55731.length+0-1)-0], 0, 0);
										F.line = 199;
										self_55730.board[chckIndx(x_55744, 0, self_55730.board.length+0-1)-0][chckIndx(y_55755, 0, self_55730.board[chckIndx(x_55744, 0, self_55730.board.length+0-1)-0].length+0-1)-0] = e_55733;
										if (contains_55914([1, 2], e_55733)) {
										F.line = 201;
										self_55730.player_pos[chckIndx(e_55733, 0, self_55730.player_pos.length+0-1)-0][chckIndx(0, 0, self_55730.player_pos[chckIndx(e_55733, 0, self_55730.player_pos.length+0-1)-0].length+0-1)-0] = x_55744;
										F.line = 202;
										self_55730.player_pos[chckIndx(e_55733, 0, self_55730.player_pos.length+0-1)-0][chckIndx(1, 0, self_55730.player_pos[chckIndx(e_55733, 0, self_55730.player_pos.length+0-1)-0].length+0-1)-0] = y_55755;
										}
										
										F.line = 2035;
										res_55977 = addInt(res_55977, 1);
									}
							} while(false);
						} while(false);
						F.line = 2035;
						res_55983 = addInt(res_55983, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function restore_state_52684(self_52686, state_52687) {
	var F={procname:"turn_based_game.restore_state",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 150;
		F.line = 2810;
		var e_52697 = null;
		F.line = 2811;
		e_52697 = {m_type: NTI3658, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2812;
		e_52697.message = nimCopy(null, makeNimstrLit("restore_state() must be overridden (if used)"), NTI138);
		F.line = 2813;
		e_52697.parent = null;
		raiseException(e_52697, "FieldError");
	framePtr = F.prev;

	
}

function restore_state_52689(self_52686, state_52687) {
	var F={procname:"turn_based_game.restore_state",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 654;
		chckNilDisp(self_52686);
		if (isObj(self_52686.m_type, NTI55034)) {
		F.line = 149;
		restore_state_55728(self_52686, state_52687);
		}
		else {
		if (isObj(self_52686.m_type, NTI51005)) {
		F.line = 149;
		restore_state_52684(self_52686, state_52687);
		}
		}
	framePtr = F.prev;

	
}

function negamax_core_53003(game_53006, game_53006_Idx, ai_choice_53008, ai_choice_53008_Idx, depth_53009, orig_depth_53010, alpha_in_53011, beta_in_53012) {
			var Tmp1;
			var Tmp2;

	var result_53013 = 0.0;

	var F={procname:"negamax.negamax_core",prev:framePtr,filename:"/home/johnd/Projects/negamax/src/negamax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 9;
		var possible_moves_53030 = [nimCopy(null, [], NTI53029)];
		F.line = 10;
		var starting_state_53031 = null;
		F.line = 11;
		var move_alpha_53032 = 0.0;
		F.line = 12;
		var alpha_53033 = alpha_in_53011;
		F.line = 13;
		var beta_53034 = beta_in_53012;
		F.line = 16;
		set_possible_moves_51072(game_53006[game_53006_Idx], possible_moves_53030, 0);
			if ((depth_53009 == 0)) Tmp2 = true; else {				Tmp2 = is_over_52604(game_53006[game_53006_Idx]);			}			if (Tmp2) Tmp1 = true; else {				Tmp1 = ((possible_moves_53030[0] != null ? possible_moves_53030[0].length : 0) == 0);			}		if (Tmp1) {
		F.line = 21;
		var score_53043 = scoring_52639(game_53006[game_53006_Idx]);
		if ((score_53043 == 0.0)) {
		F.line = 24;
		result_53013 = score_53043;
		break BeforeRet;
		}
		else {
			F.line = 26;
			result_53013 = (score_53043 - (((1.0000000000000000e-02 * depth_53009) * Math.abs(score_53043)) / score_53043));
			break BeforeRet;
		}
		
		}
		
		F.line = 30;
		starting_state_53031 = nimCopy(null, get_state_52664(game_53006[game_53006_Idx]), NTI138);
		F.line = 35;
		var best_move_53044 = nimCopy(null, possible_moves_53030[0][chckIndx(0, 0, possible_moves_53030[0].length+0-1)-0], NTI138);
		F.line = 36;
		var best_value_53047 = -Infinity;
		L3: do {
			F.line = 38;
			var move_53056 = null;
			F.line = 3805;
			var i_53066 = 0;
			F.line = 3806;
			var L_53068 = (possible_moves_53030[0] != null ? possible_moves_53030[0].length : 0);
			L4: do {
				F.line = 3807;
					L5: while (true) {
					if (!(i_53066 < L_53068)) break L5;
						F.line = 3808;
						move_53056 = possible_moves_53030[0][chckIndx(i_53066, 0, possible_moves_53030[0].length+0-1)-0];
						F.line = 42;
						make_move_52579(game_53006[game_53006_Idx], move_53056);
						F.line = 43;
						finish_turn_52571(game_53006[game_53006_Idx]);
						F.line = 47;
						move_alpha_53032 = -(negamax_core_53003(game_53006, game_53006_Idx, ai_choice_53008, ai_choice_53008_Idx, subInt(depth_53009, 1), orig_depth_53010, -(beta_53034), -(alpha_53033)));
						F.line = 56;
						restore_state_52689(game_53006[game_53006_Idx], starting_state_53031);
						if ((best_value_53047 < move_alpha_53032)) {
						F.line = 61;
						best_value_53047 = move_alpha_53032;
						F.line = 62;
						best_move_53044 = nimCopy(null, move_53056, NTI138);
						}
						
						if ((alpha_53033 < move_alpha_53032)) {
						F.line = 64;
						alpha_53033 = move_alpha_53032;
						if ((depth_53009 == orig_depth_53010)) {
						F.line = 66;
						ai_choice_53008[ai_choice_53008_Idx] = nimCopy(null, best_move_53044, NTI138);
						}
						
						if ((beta_53034 <= alpha_53033)) {
						F.line = 68;
						break L3;
						}
						
						}
						
						F.line = 3809;
						i_53066 = addInt(i_53066, 1);
						if (!(((possible_moves_53030[0] != null ? possible_moves_53030[0].length : 0) == L_53068))) {
						F.line = 3810;
						failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 70;
		result_53013 = best_value_53047;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_53013;

}

function negamax_53069(game_53072, game_53072_Idx, depth_53073) {
	var result_53074 = null;

	var F={procname:"negamax.negamax",prev:framePtr,filename:"/home/johnd/Projects/negamax/src/negamax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 76;
		var alpha_53075 = 0.0;
		F.line = 77;
		var beta_53076 = 0.0;
		F.line = 78;
		var ai_choice_53077 = [null];
		F.line = 79;
		var possible_moves_53094 = [nimCopy(null, [], NTI53093)];
		F.line = 81;
		alpha_53075 = -Infinity;
		F.line = 82;
		beta_53076 = Infinity;
		F.line = 86;
		set_possible_moves_51072(game_53072[game_53072_Idx], possible_moves_53094, 0);
		if (((possible_moves_53094[0] != null ? possible_moves_53094[0].length : 0) == 0)) {
		F.line = 88;
		result_53074 = nimCopy(null, null, NTI138);
		break BeforeRet;
		}
		
		F.line = 89;
		ai_choice_53077[0] = nimCopy(null, possible_moves_53094[0][chckIndx(0, 0, possible_moves_53094[0].length+0-1)-0], NTI138);
		F.line = 91;
		alpha_53075 = negamax_core_53003(game_53072, game_53072_Idx, ai_choice_53077, 0, depth_53073, depth_53073, alpha_53075, beta_53076);
		F.line = 99;
		result_53074 = nimCopy(null, ai_choice_53077[0], NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_53074;

}

function get_move_53119(self_53121, game_53122) {
	var result_53123 = null;

	var F={procname:"negamax.get_move",prev:framePtr,filename:"/home/johnd/Projects/negamax/src/negamax.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 110;
		var new_game_53124 = [null];
		F.line = 112;
		new_game_53124[0] = game_53122;
		F.line = 115;
		var choice_53202 = negamax_53069(new_game_53124, 0, self_53121.depth);
		F.line = 116;
		result_53123 = nimCopy(null, choice_53202, NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_53123;

}

function nsuIndent(s_38613, count_38614, padding_38615) {
	var result_38616 = null;

		result_38616 = nimCopy(null, makeNimstrLit(""), NTI138);
		var i_38617 = 0;
		L1: do {
			var line_38618 = null;
			var first_38649 = 0;
			var last_38651 = 0;
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						L4: do {
								L5: while (true) {
								if (!!((ConstSet9[s_38613[last_38651]] != undefined))) break L5;
									last_38651 += 1;
								}
						} while(false);
						line_38618 = (s_38613.slice(first_38649, ((last_38651 - 1))+1).concat(0));
						if (!((i_38617 == 0))) {
						if (result_38616 != null) { result_38616 = (result_38616.slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_38616 = makeNimstrLit("\x0A");};
						}
						
						L6: do {
							var j_38627 = 0;
							var colontmp__38639 = 0;
							colontmp__38639 = count_38614;
							var res_38642 = 1;
							L7: do {
									L8: while (true) {
									if (!(res_38642 <= colontmp__38639)) break L8;
										j_38627 = res_38642;
										if (result_38616 != null) { result_38616 = (result_38616.slice(0, -1)).concat(padding_38615); } else { result_38616 = padding_38615;};
										res_38642 += 1;
									}
							} while(false);
						} while(false);
						if (result_38616 != null) { result_38616 = (result_38616.slice(0, -1)).concat(line_38618); } else { result_38616 = line_38618;};
						i_38617 += 1;
						if ((s_38613[last_38651] == 10)) {
						last_38651 += 1;
						}
						else {
						if ((s_38613[last_38651] == 13)) {
						last_38651 += 1;
						if ((s_38613[last_38651] == 10)) {
						last_38651 += 1;
						}
						
						}
						else {
							break L2;
						}
						}
						first_38649 = last_38651;
					}
			} while(false);
		} while(false);

	return result_38616;

}

function isFilled_47465(hcode_47467) {
	var result_47468 = false;

	var F={procname:"tables.isFilled",prev:framePtr,filename:"lib/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 18;
		result_47468 = !((hcode_47467 == 0));
	framePtr = F.prev;

	return result_47468;

}

function get_move_51089(self_51091, game_51092) {
	var result_51093 = null;

	var F={procname:"turn_based_game.get_move",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 50;
		var move_list_51115 = [nimCopy(null, [], NTI51114)];
		F.line = 51;
		var descriptive_move_list_51119 = [{data: null, counter: 0, first: 0, last: 0}];
		F.line = 52;
		var compact_description_51120 = false;
		F.line = 53;
		rawEcho(makeNimstrLit(""));
		F.line = 54;
		rawEcho(makeNimstrLit("   Status:"));
		F.line = 55;
		rawEcho(nsuIndent(status_51078(game_51092), 2, makeNimstrLit("   ")));
		F.line = 56;
		set_possible_moves_51072(game_51092, move_list_51115, 0);
		if ((0 < (move_list_51115[0] != null ? move_list_51115[0].length : 0))) {
		F.line = 58;
		compact_description_51120 = true;
		}
		else {
			F.line = 60;
			set_possible_moves_51063(game_51092, descriptive_move_list_51119[0]);
			L1: do {
				F.line = 61;
				var key_52017 = null;
				F.line = 61;
				var value_52018 = null;
				F.line = 504;
				var h_52468 = descriptive_move_list_51119[0].first;
				L2: do {
					F.line = 513;
						L3: while (true) {
						if (!(0 <= h_52468)) break L3;
							F.line = 506;
							var nxt_52470 = descriptive_move_list_51119[0].data[chckIndx(h_52468, 0, descriptive_move_list_51119[0].data.length+0-1)-0].Field1;
							if (isFilled_47465(descriptive_move_list_51119[0].data[chckIndx(h_52468, 0, descriptive_move_list_51119[0].data.length+0-1)-0].Field0)) {
							F.line = 514;
							key_52017 = descriptive_move_list_51119[0].data[chckIndx(h_52468, 0, descriptive_move_list_51119[0].data.length+0-1)-0].Field2;
							F.line = 514;
							value_52018 = descriptive_move_list_51119[0].data[chckIndx(h_52468, 0, descriptive_move_list_51119[0].data.length+0-1)-0].Field3;
							F.line = 62;
							var Tmp4 = nimCopy(null, key_52017, NTI138);
							if (move_list_51115[0] != null) { move_list_51115[0].push(Tmp4); } else { move_list_51115[0] = [Tmp4]; };
							}
							
							F.line = 508;
							h_52468 = nxt_52470;
						}
				} while(false);
			} while(false);
		}
		
		L5: do {
			F.line = 63;
				L6: while (true) {
				if (!true) break L6;
					F.line = 64;
					rawEcho(makeNimstrLit("   Possible moves:"));
					if (compact_description_51120) {
					F.line = 66;
					var disp_52031 = makeNimstrLit("      ");
					L7: do {
						F.line = 67;
						var key_52202 = null;
						F.line = 3805;
						var i_52475 = 0;
						F.line = 3806;
						var L_52477 = (move_list_51115[0] != null ? move_list_51115[0].length : 0);
						L8: do {
							F.line = 3807;
								L9: while (true) {
								if (!(i_52475 < L_52477)) break L9;
									F.line = 3808;
									key_52202 = move_list_51115[0][chckIndx(i_52475, 0, move_list_51115[0].length+0-1)-0];
									F.line = 68;
									if (disp_52031 != null) { disp_52031 = (disp_52031.slice(0, -1)).concat(nsuFormatVarargs(makeNimstrLit("[$#] "), [key_52202])); } else { disp_52031 = nsuFormatVarargs(makeNimstrLit("[$#] "), [key_52202]);};
									F.line = 3809;
									i_52475 = addInt(i_52475, 1);
									if (!(((move_list_51115[0] != null ? move_list_51115[0].length : 0) == L_52477))) {
									F.line = 3810;
									failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
									}
									
								}
						} while(false);
					} while(false);
					F.line = 69;
					rawEcho(disp_52031);
					}
					else {
						L10: do {
							F.line = 71;
							var key_52216 = null;
							F.line = 71;
							var value_52217 = null;
							F.line = 504;
							var h_52481 = descriptive_move_list_51119[0].first;
							L11: do {
								F.line = 513;
									L12: while (true) {
									if (!(0 <= h_52481)) break L12;
										F.line = 506;
										var nxt_52483 = descriptive_move_list_51119[0].data[chckIndx(h_52481, 0, descriptive_move_list_51119[0].data.length+0-1)-0].Field1;
										if (isFilled_47465(descriptive_move_list_51119[0].data[chckIndx(h_52481, 0, descriptive_move_list_51119[0].data.length+0-1)-0].Field0)) {
										F.line = 514;
										key_52216 = descriptive_move_list_51119[0].data[chckIndx(h_52481, 0, descriptive_move_list_51119[0].data.length+0-1)-0].Field2;
										F.line = 514;
										value_52217 = descriptive_move_list_51119[0].data[chckIndx(h_52481, 0, descriptive_move_list_51119[0].data.length+0-1)-0].Field3;
										F.line = 72;
										rawEcho((makeNimstrLit("      ").slice(0,-1)).concat(nsuFormatVarargs(makeNimstrLit("[$key]: $value"), [makeNimstrLit("key"), key_52216, makeNimstrLit("value"), value_52217])));
										}
										
										F.line = 508;
										h_52481 = nxt_52483;
									}
							} while(false);
						} while(false);
					}
					
					F.line = 73;
					rawEcho(makeNimstrLit("   Enter move (or \'quit\'): "));
					F.line = 74;
					var response_52224 = null;
					F.line = 77;
					response_52224 = nimCopy(null, makeNimstrLit("When compiling for Javascript, you cannot use this procedure."), NTI138);
					if (contains_52403(move_list_51115[0], response_52224)) {
					F.line = 81;
					result_51093 = nimCopy(null, response_52224, NTI138);
					break BeforeRet;
					}
					
					if (eqStrings(response_52224, makeNimstrLit("quit"))) {
					F.line = 83;
					result_51093 = nimCopy(null, null, NTI138);
					break BeforeRet;
					}
					
					F.line = 84;
					rawEcho(makeNimstrLit("   BAD ENTRY. Try again."));
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_51093;

}

function get_move_51095(self_51091, game_51092) {
	var result_51098 = null;

	var F={procname:"turn_based_game.get_move",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 654;
		chckNilDisp(self_51091);
		if (isObj(self_51091.m_type, NTI53113)) {
		F.line = 49;
		result_51098 = get_move_53119(self_51091, game_51092);
		break BeforeRet;
		}
		else {
		if (isObj(self_51091.m_type, NTI51012)) {
		F.line = 49;
		result_51098 = get_move_51089(self_51091, game_51092);
		break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_51098;

}

function current_player_52530(self_52532) {
	var result_52533 = null;

	var F={procname:"turn_based_game.current_player",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 102;
		result_52533 = self_52532.players[chckIndx(subInt(self_52532.current_player_number, 1), 0, self_52532.players.length+0-1)-0];
	framePtr = F.prev;

	return result_52533;

}

function current_player_52535(self_52532) {
	var result_52538 = null;

	var F={procname:"turn_based_game.current_player",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 101;
		result_52538 = current_player_52530(self_52532);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_52538;

}

function winning_player_52539(self_52541) {
	var result_52542 = null;

	var F={procname:"turn_based_game.winning_player",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((0 < self_52541.winner_player_number)) {
		F.line = 107;
		result_52542 = self_52541.players[chckIndx(subInt(self_52541.winner_player_number, 1), 0, self_52541.players.length+0-1)-0];
		break BeforeRet;
		}
		else {
		if ((self_52541.winner_player_number == 0)) {
		F.line = 109;
		result_52542 = {name: makeNimstrLit("NO WINNER YET"), m_type: NTI51012};
		break BeforeRet;
		}
		else {
			F.line = 111;
			result_52542 = {name: makeNimstrLit("STALEMATE OR TIE"), m_type: NTI51012};
			break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_52542;

}

function winning_player_52544(self_52541) {
	var result_52547 = null;

	var F={procname:"turn_based_game.winning_player",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 105;
		result_52547 = winning_player_52539(self_52541);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_52547;

}

function determine_winner_55433(self_55435) {
	var F={procname:"knights.determine_winner",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((0 < self_55435.winner_player_number)) {
		F.line = 128;
		break BeforeRet;
		}
		
		F.line = 129;
		var poss_moves_55452 = [nimCopy(null, [], NTI55451)];
		F.line = 130;
		var save_player_55453 = self_55435.current_player_number;
		L1: do {
			F.line = 131;
			var p_55503 = 0;
			F.line = 2199;
			var i_55516 = 0;
			if ((i_55516 <= 1)) {
			L2: do {
				F.line = 2201;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2202;
						p_55503 = [1, 2][chckIndx(i_55516, 0, [1, 2].length+0-1)-0];
						F.line = 132;
						self_55435.current_player_number = p_55503;
						F.line = 133;
						set_possible_moves_51072(self_55435, poss_moves_55452, 0);
						if (((poss_moves_55452[0] != null ? poss_moves_55452[0].length : 0) == 0)) {
						F.line = 135;
						self_55435.winner_player_number = next_player_number_52555(self_55435);
						}
						
						if ((1 <= i_55516)) {
						F.line = 2203;
						break L2;
						}
						
						F.line = 2204;
						i_55516 = addInt(i_55516, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 136;
		self_55435.current_player_number = save_player_55453;
	} while (false);
	framePtr = F.prev;

	
}

function determine_winner_52612(self_52614) {
	var F={procname:"turn_based_game.determine_winner",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 138;
		F.line = 2810;
		var e_52624 = null;
		F.line = 2811;
		e_52624 = {m_type: NTI3658, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2812;
		e_52624.message = nimCopy(null, makeNimstrLit("determine_winner() must be overridden"), NTI138);
		F.line = 2813;
		e_52624.parent = null;
		raiseException(e_52624, "FieldError");
	framePtr = F.prev;

	
}

function determine_winner_52616(self_52614) {
	var F={procname:"turn_based_game.determine_winner",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 654;
		chckNilDisp(self_52614);
		if (isObj(self_52614.m_type, NTI55034)) {
		F.line = 137;
		determine_winner_55433(self_52614);
		}
		else {
		if (isObj(self_52614.m_type, NTI51005)) {
		F.line = 137;
		determine_winner_52612(self_52614);
		}
		}
	framePtr = F.prev;

	
}

function default_setup_52731(self_52733, players_52735) {
	var F={procname:"turn_based_game.default_setup",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 158;
		self_52733.players = nimCopy(null, players_52735, NTI52734);
		F.line = 159;
		self_52733.player_count = (self_52733.players != null ? self_52733.players.length : 0);
		F.line = 160;
		self_52733.current_player_number = 1;
		F.line = 161;
		self_52733.winner_player_number = 0;
	framePtr = F.prev;

	
}

function default_setup_52737(self_52733, players_52735) {
	var F={procname:"turn_based_game.default_setup",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 157;
		default_setup_52731(self_52733, players_52735);
	framePtr = F.prev;

	
}

function setup_55087(self_55089, players_55091) {
	var F={procname:"knights.setup",prev:framePtr,filename:"knights.nim",line:0};
	framePtr = F;
		F.line = 90;
		default_setup_52737(self_55089, players_55091);
		F.line = 91;
		nimCopy(self_55089.board, [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], NTI55092);
		F.line = 98;
		place_player_55084(self_55089, 1, [0, 0]);
		F.line = 99;
		nimCopy(self_55089.player_pos[chckIndx(2, 0, self_55089.player_pos.length+0-1)-0], [4, 4], NTI55106);
		F.line = 100;
		place_player_55084(self_55089, 2, [4, 4]);
	framePtr = F.prev;

	
}

function setup_52707(self_52709, players_52711) {
	var F={procname:"turn_based_game.setup",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 154;
		F.line = 2810;
		var e_52721 = null;
		F.line = 2811;
		e_52721 = {m_type: NTI3658, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2812;
		e_52721.message = nimCopy(null, makeNimstrLit("setup() must be overridden"), NTI138);
		F.line = 2813;
		e_52721.parent = null;
		raiseException(e_52721, "FieldError");
	framePtr = F.prev;

	
}

function setup_52713(self_52709, players_52711) {
	var F={procname:"turn_based_game.setup",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 654;
		chckNilDisp(self_52709);
		if (isObj(self_52709.m_type, NTI55034)) {
		F.line = 153;
		setup_55087(self_52709, players_52711);
		}
		else {
		if (isObj(self_52709.m_type, NTI51005)) {
		F.line = 153;
		setup_52707(self_52709, players_52711);
		}
		}
	framePtr = F.prev;

	
}

function play_52746(self_52748) {
	var result_52750 = null;

	var F={procname:"turn_based_game.play",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
		F.line = 165;
		result_52750 = nimCopy(null, [], NTI52770);
		F.line = 166;
		var move_52771 = makeNimstrLit("");
		L1: do {
			F.line = 167;
				L2: while (true) {
				if (!!(is_over_52604(self_52748))) break L2;
					F.line = 168;
					display_51085(current_player_52535(self_52748), makeNimstrLit("-----------------"));
					F.line = 169;
					display_51085(current_player_52535(self_52748), nsuFormatVarargs(makeNimstrLit("$1\'s Turn"), [current_player_52535(self_52748).name]));
					F.line = 170;
					move_52771 = nimCopy(null, get_move_51095(current_player_52535(self_52748), self_52748), NTI138);
					if ((move_52771 === null)) {
					F.line = 172;
					break L1;
					}
					
					F.line = 173;
					var Tmp3 = nimCopy(null, move_52771, NTI138);
					if (result_52750 != null) { result_52750.push(Tmp3); } else { result_52750 = [Tmp3]; };
					F.line = 174;
					display_51085(current_player_52535(self_52748), makeNimstrLit(""));
					F.line = 175;
					display_51085(current_player_52535(self_52748), (makeNimstrLit("   ").slice(0,-1)).concat(make_move_52579(self_52748, move_52771)));
					F.line = 176;
					determine_winner_52616(self_52748);
					if (is_over_52604(self_52748)) {
					F.line = 178;
					display_51085(current_player_52535(self_52748), makeNimstrLit(""));
					if ((self_52748.winner_player_number == -1)) {
					F.line = 180;
					display_51085(current_player_52535(self_52748), makeNimstrLit("STALEMATE."));
					}
					else {
						F.line = 182;
					display_51085(current_player_52535(self_52748), nsuFormatVarargs(makeNimstrLit("WINNER IS $#"), [winning_player_52544(self_52748).name]));
					}
					
					F.line = 183;
					break L1;
					}
					
					F.line = 184;
					self_52748.current_player_number = next_player_number_52555(self_52748);
				}
		} while(false);
	framePtr = F.prev;

	return result_52750;

}

function play_52752(self_52748) {
	var result_52755 = null;

	var F={procname:"turn_based_game.play",prev:framePtr,filename:"/home/johnd/Projects/turn_based_game/src/turn_based_game.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 164;
		result_52755 = play_52746(self_52748);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_52755;

}
